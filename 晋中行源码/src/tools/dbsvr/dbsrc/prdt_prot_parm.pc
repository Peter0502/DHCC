#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"prdt_prot_parm_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int prdt_prot_parm_con ( struct prdt_prot_parm_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct prdt_prot_parm_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->prot_type);
	zip_tail(ps->reg_fun);
	zip_tail(ps->main_prdt_code);
	zip_tail(ps->app_prdt_code);
	zip_tail(ps->turn_mode);
	zip_tail(ps->turn_term_type);
	zip_tail(ps->turn_cond);
	zip_tail(ps->turn_amt_def);
	zip_tail(ps->deal_func);
}
int Prdt_prot_parm_Debug(struct prdt_prot_parm_c *ps){
	vtcp_log("prdt_prot_parm_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("prdt_prot_parm_c.prot_type=[%s]\n",ps->prot_type);
	vtcp_log("prdt_prot_parm_c.reg_fun=[%s]\n",ps->reg_fun);
	vtcp_log("prdt_prot_parm_c.deal_seq=[%ld]\n",ps->deal_seq);
	vtcp_log("prdt_prot_parm_c.main_prdt_code=[%s]\n",ps->main_prdt_code);
	vtcp_log("prdt_prot_parm_c.app_prdt_code=[%s]\n",ps->app_prdt_code);
	vtcp_log("prdt_prot_parm_c.turn_mode=[%s]\n",ps->turn_mode);
	vtcp_log("prdt_prot_parm_c.turn_term_type=[%s]\n",ps->turn_term_type);
	vtcp_log("prdt_prot_parm_c.turn_cond=[%s]\n",ps->turn_cond);
	vtcp_log("prdt_prot_parm_c.turn_amt_def=[%s]\n",ps->turn_amt_def);
	vtcp_log("prdt_prot_parm_c.deal_func=[%s]\n",ps->deal_func);
	vtcp_log("prdt_prot_parm_c.min_bal=[%f]\n",ps->min_bal);
	vtcp_log("prdt_prot_parm_c.min_amt=[%f]\n",ps->min_amt);
	vtcp_log("prdt_prot_parm_c.turn_unit=[%f]\n",ps->turn_unit);
	vtcp_log("prdt_prot_parm_c.end_date=[%ld]\n",ps->end_date);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Prdt_prot_parm_Sel(reply,prdt_prot_parm_c,fmtstr,va_alist)
char    *reply;
struct  prdt_prot_parm_c *prdt_prot_parm_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Prdt_prot_parm_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Prdt_prot_parm_Fet_Sel( prdt_prot_parm_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Prdt_prot_parm_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Prdt_prot_parm_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,prdt_prot_parm.* FROM prdt_prot_parm WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE prdt_prot_parm_sel FROM :comm;
	EXEC SQL DECLARE sel_prdt_prot_parm CURSOR FOR prdt_prot_parm_sel;

	EXEC SQL OPEN sel_prdt_prot_parm;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN prdt_prot_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Prdt_prot_parm_Fet_Sel ( struct prdt_prot_parm_c *prdt_prot_parm_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_prdt_prot_parm INTO :prdt_prot_parm_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch prdt_prot_parm error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch prdt_prot_parm finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(prdt_prot_parm_c);

	return 0;
}

int Prdt_prot_parm_Clo_Sel (){
	EXEC SQL CLOSE sel_prdt_prot_parm;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Prdt_prot_parm_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,prdt_prot_parm.* FROM prdt_prot_parm WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE prdt_prot_parm_upd FROM :comm;

	EXEC SQL DECLARE upd_prdt_prot_parm CURSOR FOR prdt_prot_parm_upd;

	EXEC SQL OPEN upd_prdt_prot_parm;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open prdt_prot_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Prdt_prot_parm_Fet_Upd( struct prdt_prot_parm_c *prdt_prot_parm_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_prdt_prot_parm INTO :prdt_prot_parm_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd prdt_prot_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH prdt_prot_parm finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(prdt_prot_parm_c);

	return 0;
}

int Prdt_prot_parm_Upd_Upd( struct prdt_prot_parm_c prdt_prot_parm_c , char * reply){
	int ret;

	EXEC SQL UPDATE prdt_prot_parm SET prot_type=:prdt_prot_parm_c.prot_type,
			reg_fun=:prdt_prot_parm_c.reg_fun,
			deal_seq=:prdt_prot_parm_c.deal_seq,
			main_prdt_code=:prdt_prot_parm_c.main_prdt_code,
			app_prdt_code=:prdt_prot_parm_c.app_prdt_code,
			turn_mode=:prdt_prot_parm_c.turn_mode,
			turn_term_type=:prdt_prot_parm_c.turn_term_type,
			turn_cond=:prdt_prot_parm_c.turn_cond,
			turn_amt_def=:prdt_prot_parm_c.turn_amt_def,
			deal_func=:prdt_prot_parm_c.deal_func,
			min_bal=:prdt_prot_parm_c.min_bal,
			min_amt=:prdt_prot_parm_c.min_amt,
			turn_unit=:prdt_prot_parm_c.turn_unit,
			end_date=:prdt_prot_parm_c.end_date
	WHERE rowid=:prdt_prot_parm_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE prdt_prot_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Prdt_prot_parm_Del_Upd(struct prdt_prot_parm_c prdt_prot_parm_c , char * reply  ){

	EXEC SQL DELETE FROM prdt_prot_parm WHERE rowid=:prdt_prot_parm_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE prdt_prot_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Prdt_prot_parm_Clo_Upd( ){
	EXEC SQL CLOSE upd_prdt_prot_parm;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Prdt_prot_parm_Ins( struct prdt_prot_parm_c prdt_prot_parm_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO prdt_prot_parm VALUES (:prdt_prot_parm_c.prot_type,
			:prdt_prot_parm_c.reg_fun,
			:prdt_prot_parm_c.deal_seq,
			:prdt_prot_parm_c.main_prdt_code,
			:prdt_prot_parm_c.app_prdt_code,
			:prdt_prot_parm_c.turn_mode,
			:prdt_prot_parm_c.turn_term_type,
			:prdt_prot_parm_c.turn_cond,
			:prdt_prot_parm_c.turn_amt_def,
			:prdt_prot_parm_c.deal_func,
			:prdt_prot_parm_c.min_bal,
			:prdt_prot_parm_c.min_amt,
			:prdt_prot_parm_c.turn_unit,
			:prdt_prot_parm_c.end_date);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT prdt_prot_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT prdt_prot_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
