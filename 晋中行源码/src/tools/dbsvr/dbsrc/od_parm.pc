#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"od_parm_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int od_parm_con ( struct od_parm_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct od_parm_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->prdt_no);
	zip_tail(ps->title);
	zip_tail(ps->cif_type);
	zip_tail(ps->cur_no);
	zip_tail(ps->intst_ind);
	zip_tail(ps->pay_ind);
	zip_tail(ps->rate_code);
	zip_tail(ps->rate_mode);
	zip_tail(ps->rate_code_def);
	zip_tail(ps->late_chrg_mode);
	zip_tail(ps->late_chrg_code);
	zip_tail(ps->dc_code);
}
int Od_parm_Debug(struct od_parm_c *ps){
	vtcp_log("od_parm_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("od_parm_c.prdt_no=[%s]\n",ps->prdt_no);
	vtcp_log("od_parm_c.title=[%s]\n",ps->title);
	vtcp_log("od_parm_c.beg_date=[%ld]\n",ps->beg_date);
	vtcp_log("od_parm_c.end_date=[%ld]\n",ps->end_date);
	vtcp_log("od_parm_c.cif_type=[%s]\n",ps->cif_type);
	vtcp_log("od_parm_c.cur_no=[%s]\n",ps->cur_no);
	vtcp_log("od_parm_c.max_amt=[%f]\n",ps->max_amt);
	vtcp_log("od_parm_c.cash_amt=[%f]\n",ps->cash_amt);
	vtcp_log("od_parm_c.turn_ill_days=[%ld]\n",ps->turn_ill_days);
	vtcp_log("od_parm_c.intst_ind=[%s]\n",ps->intst_ind);
	vtcp_log("od_parm_c.pay_ind=[%s]\n",ps->pay_ind);
	vtcp_log("od_parm_c.pay_date=[%ld]\n",ps->pay_date);
	vtcp_log("od_parm_c.pay_intvl=[%ld]\n",ps->pay_intvl);
	vtcp_log("od_parm_c.pay_drt_days=[%ld]\n",ps->pay_drt_days);
	vtcp_log("od_parm_c.hst_keep_day=[%ld]\n",ps->hst_keep_day);
	vtcp_log("od_parm_c.rate_code=[%s]\n",ps->rate_code);
	vtcp_log("od_parm_c.rate_mode=[%s]\n",ps->rate_mode);
	vtcp_log("od_parm_c.rate_code_def=[%s]\n",ps->rate_code_def);
	vtcp_log("od_parm_c.year_chrg=[%f]\n",ps->year_chrg);
	vtcp_log("od_parm_c.min_pay_amt=[%f]\n",ps->min_pay_amt);
	vtcp_log("od_parm_c.min_pay_ratio=[%f]\n",ps->min_pay_ratio);
	vtcp_log("od_parm_c.late_chrg_mode=[%s]\n",ps->late_chrg_mode);
	vtcp_log("od_parm_c.late_chrg_code=[%s]\n",ps->late_chrg_code);
	vtcp_log("od_parm_c.opn_lmt=[%ld]\n",ps->opn_lmt);
	vtcp_log("od_parm_c.cls_lmt=[%ld]\n",ps->cls_lmt);
	vtcp_log("od_parm_c.dc_code=[%s]\n",ps->dc_code);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Od_parm_Sel(reply,od_parm_c,fmtstr,va_alist)
char    *reply;
struct  od_parm_c *od_parm_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Od_parm_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Od_parm_Fet_Sel( od_parm_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Od_parm_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Od_parm_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,od_parm.* FROM od_parm WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE od_parm_sel FROM :comm;
	EXEC SQL DECLARE sel_od_parm CURSOR FOR od_parm_sel;

	EXEC SQL OPEN sel_od_parm;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN od_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Od_parm_Fet_Sel ( struct od_parm_c *od_parm_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_od_parm INTO :od_parm_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch od_parm error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch od_parm finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(od_parm_c);

	return 0;
}

int Od_parm_Clo_Sel (){
	EXEC SQL CLOSE sel_od_parm;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Od_parm_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,od_parm.* FROM od_parm WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE od_parm_upd FROM :comm;

	EXEC SQL DECLARE upd_od_parm CURSOR FOR od_parm_upd;

	EXEC SQL OPEN upd_od_parm;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open od_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Od_parm_Fet_Upd( struct od_parm_c *od_parm_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_od_parm INTO :od_parm_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd od_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH od_parm finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(od_parm_c);

	return 0;
}

int Od_parm_Upd_Upd( struct od_parm_c od_parm_c , char * reply){
	int ret;

	EXEC SQL UPDATE od_parm SET prdt_no=:od_parm_c.prdt_no,
			title=:od_parm_c.title,
			beg_date=:od_parm_c.beg_date,
			end_date=:od_parm_c.end_date,
			cif_type=:od_parm_c.cif_type,
			cur_no=:od_parm_c.cur_no,
			max_amt=:od_parm_c.max_amt,
			cash_amt=:od_parm_c.cash_amt,
			turn_ill_days=:od_parm_c.turn_ill_days,
			intst_ind=:od_parm_c.intst_ind,
			pay_ind=:od_parm_c.pay_ind,
			pay_date=:od_parm_c.pay_date,
			pay_intvl=:od_parm_c.pay_intvl,
			pay_drt_days=:od_parm_c.pay_drt_days,
			hst_keep_day=:od_parm_c.hst_keep_day,
			rate_code=:od_parm_c.rate_code,
			rate_mode=:od_parm_c.rate_mode,
			rate_code_def=:od_parm_c.rate_code_def,
			year_chrg=:od_parm_c.year_chrg,
			min_pay_amt=:od_parm_c.min_pay_amt,
			min_pay_ratio=:od_parm_c.min_pay_ratio,
			late_chrg_mode=:od_parm_c.late_chrg_mode,
			late_chrg_code=:od_parm_c.late_chrg_code,
			opn_lmt=:od_parm_c.opn_lmt,
			cls_lmt=:od_parm_c.cls_lmt,
			dc_code=:od_parm_c.dc_code
	WHERE rowid=:od_parm_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE od_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Od_parm_Del_Upd(struct od_parm_c od_parm_c , char * reply  ){

	EXEC SQL DELETE FROM od_parm WHERE rowid=:od_parm_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE od_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Od_parm_Clo_Upd( ){
	EXEC SQL CLOSE upd_od_parm;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Od_parm_Ins( struct od_parm_c od_parm_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO od_parm VALUES (:od_parm_c.prdt_no,
			:od_parm_c.title,
			:od_parm_c.beg_date,
			:od_parm_c.end_date,
			:od_parm_c.cif_type,
			:od_parm_c.cur_no,
			:od_parm_c.max_amt,
			:od_parm_c.cash_amt,
			:od_parm_c.turn_ill_days,
			:od_parm_c.intst_ind,
			:od_parm_c.pay_ind,
			:od_parm_c.pay_date,
			:od_parm_c.pay_intvl,
			:od_parm_c.pay_drt_days,
			:od_parm_c.hst_keep_day,
			:od_parm_c.rate_code,
			:od_parm_c.rate_mode,
			:od_parm_c.rate_code_def,
			:od_parm_c.year_chrg,
			:od_parm_c.min_pay_amt,
			:od_parm_c.min_pay_ratio,
			:od_parm_c.late_chrg_mode,
			:od_parm_c.late_chrg_code,
			:od_parm_c.opn_lmt,
			:od_parm_c.cls_lmt,
			:od_parm_c.dc_code);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT od_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT od_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
