#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"cms_rollback_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int cms_rollback_con ( struct cms_rollback_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct cms_rollback_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->cms_sq_no);
	zip_tail(ps->do_type);
	zip_tail(ps->beg_table);
	zip_tail(ps->beg_sql);
	zip_tail(ps->rolbk_sql);
	zip_tail(ps->sts);
	zip_tail(ps->filler);
}
int Cms_rollback_Debug(struct cms_rollback_c *ps){
	vtcp_log("cms_rollback_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("cms_rollback_c.cms_sq_no=[%s]\n",ps->cms_sq_no);
	vtcp_log("cms_rollback_c.do_type=[%s]\n",ps->do_type);
	vtcp_log("cms_rollback_c.beg_table=[%s]\n",ps->beg_table);
	vtcp_log("cms_rollback_c.beg_sql=[%s]\n",ps->beg_sql);
	vtcp_log("cms_rollback_c.rolbk_sql=[%s]\n",ps->rolbk_sql);
	vtcp_log("cms_rollback_c.sts=[%s]\n",ps->sts);
	vtcp_log("cms_rollback_c.filler=[%s]\n",ps->filler);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Cms_rollback_Sel(reply,cms_rollback_c,fmtstr,va_alist)
char    *reply;
struct  cms_rollback_c *cms_rollback_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Cms_rollback_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Cms_rollback_Fet_Sel( cms_rollback_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Cms_rollback_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Cms_rollback_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,cms_rollback.* FROM cms_rollback WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE cms_rollback_sel FROM :comm;
	EXEC SQL DECLARE sel_cms_rollback CURSOR FOR cms_rollback_sel;

	EXEC SQL OPEN sel_cms_rollback;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN cms_rollback error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Cms_rollback_Fet_Sel ( struct cms_rollback_c *cms_rollback_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_cms_rollback INTO :cms_rollback_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch cms_rollback error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch cms_rollback finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(cms_rollback_c);

	return 0;
}

int Cms_rollback_Clo_Sel (){
	EXEC SQL CLOSE sel_cms_rollback;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Cms_rollback_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,cms_rollback.* FROM cms_rollback WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE cms_rollback_upd FROM :comm;

	EXEC SQL DECLARE upd_cms_rollback CURSOR FOR cms_rollback_upd;

	EXEC SQL OPEN upd_cms_rollback;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open cms_rollback error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Cms_rollback_Fet_Upd( struct cms_rollback_c *cms_rollback_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_cms_rollback INTO :cms_rollback_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd cms_rollback error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH cms_rollback finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(cms_rollback_c);

	return 0;
}

int Cms_rollback_Upd_Upd( struct cms_rollback_c cms_rollback_c , char * reply){
	int ret;

	EXEC SQL UPDATE cms_rollback SET cms_sq_no=:cms_rollback_c.cms_sq_no,
			do_type=:cms_rollback_c.do_type,
			beg_table=:cms_rollback_c.beg_table,
			beg_sql=:cms_rollback_c.beg_sql,
			rolbk_sql=:cms_rollback_c.rolbk_sql,
			sts=:cms_rollback_c.sts,
			filler=:cms_rollback_c.filler
	WHERE rowid=:cms_rollback_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE cms_rollback error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Cms_rollback_Del_Upd(struct cms_rollback_c cms_rollback_c , char * reply  ){

	EXEC SQL DELETE FROM cms_rollback WHERE rowid=:cms_rollback_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE cms_rollback error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Cms_rollback_Clo_Upd( ){
	EXEC SQL CLOSE upd_cms_rollback;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Cms_rollback_Ins( struct cms_rollback_c cms_rollback_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO cms_rollback VALUES (:cms_rollback_c.cms_sq_no,
			:cms_rollback_c.do_type,
			:cms_rollback_c.beg_table,
			:cms_rollback_c.beg_sql,
			:cms_rollback_c.rolbk_sql,
			:cms_rollback_c.sts,
			:cms_rollback_c.filler);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT cms_rollback error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT cms_rollback error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
