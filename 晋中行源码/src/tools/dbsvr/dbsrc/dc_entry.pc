#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"dc_entry_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int dc_entry_con ( struct dc_entry_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct dc_entry_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->entry_code);
	zip_tail(ps->cur_no);
	zip_tail(ps->acc_hrt);
	zip_tail(ps->dc_ind);
	zip_tail(ps->use_br_ind);
	zip_tail(ps->ct_type);
	zip_tail(ps->ct_ind);
	zip_tail(ps->amt_no);
	zip_tail(ps->brf);
}
int Dc_entry_Debug(struct dc_entry_c *ps){
	vtcp_log("dc_entry_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("dc_entry_c.entry_code=[%s]\n",ps->entry_code);
	vtcp_log("dc_entry_c.seqn=[%ld]\n",ps->seqn);
	vtcp_log("dc_entry_c.cur_no=[%s]\n",ps->cur_no);
	vtcp_log("dc_entry_c.acc_hrt=[%s]\n",ps->acc_hrt);
	vtcp_log("dc_entry_c.dc_ind=[%s]\n",ps->dc_ind);
	vtcp_log("dc_entry_c.use_br_ind=[%s]\n",ps->use_br_ind);
	vtcp_log("dc_entry_c.ct_type=[%s]\n",ps->ct_type);
	vtcp_log("dc_entry_c.ct_ind=[%s]\n",ps->ct_ind);
	vtcp_log("dc_entry_c.amt_no=[%s]\n",ps->amt_no);
	vtcp_log("dc_entry_c.brf=[%s]\n",ps->brf);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Dc_entry_Sel(reply,dc_entry_c,fmtstr,va_alist)
char    *reply;
struct  dc_entry_c *dc_entry_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Dc_entry_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Dc_entry_Fet_Sel( dc_entry_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Dc_entry_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Dc_entry_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,dc_entry.* FROM dc_entry WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE dc_entry_sel FROM :comm;
	EXEC SQL DECLARE sel_dc_entry CURSOR FOR dc_entry_sel;

	EXEC SQL OPEN sel_dc_entry;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN dc_entry error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Dc_entry_Fet_Sel ( struct dc_entry_c *dc_entry_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_dc_entry INTO :dc_entry_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch dc_entry error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch dc_entry finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(dc_entry_c);

	return 0;
}

int Dc_entry_Clo_Sel (){
	EXEC SQL CLOSE sel_dc_entry;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Dc_entry_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,dc_entry.* FROM dc_entry WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE dc_entry_upd FROM :comm;

	EXEC SQL DECLARE upd_dc_entry CURSOR FOR dc_entry_upd;

	EXEC SQL OPEN upd_dc_entry;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open dc_entry error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Dc_entry_Fet_Upd( struct dc_entry_c *dc_entry_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_dc_entry INTO :dc_entry_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd dc_entry error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH dc_entry finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(dc_entry_c);

	return 0;
}

int Dc_entry_Upd_Upd( struct dc_entry_c dc_entry_c , char * reply){
	int ret;

	EXEC SQL UPDATE dc_entry SET entry_code=:dc_entry_c.entry_code,
			seqn=:dc_entry_c.seqn,
			cur_no=:dc_entry_c.cur_no,
			acc_hrt=:dc_entry_c.acc_hrt,
			dc_ind=:dc_entry_c.dc_ind,
			use_br_ind=:dc_entry_c.use_br_ind,
			ct_type=:dc_entry_c.ct_type,
			ct_ind=:dc_entry_c.ct_ind,
			amt_no=:dc_entry_c.amt_no,
			brf=:dc_entry_c.brf
	WHERE rowid=:dc_entry_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE dc_entry error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Dc_entry_Del_Upd(struct dc_entry_c dc_entry_c , char * reply  ){

	EXEC SQL DELETE FROM dc_entry WHERE rowid=:dc_entry_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE dc_entry error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Dc_entry_Clo_Upd( ){
	EXEC SQL CLOSE upd_dc_entry;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Dc_entry_Ins( struct dc_entry_c dc_entry_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO dc_entry VALUES (:dc_entry_c.entry_code,
			:dc_entry_c.seqn,
			:dc_entry_c.cur_no,
			:dc_entry_c.acc_hrt,
			:dc_entry_c.dc_ind,
			:dc_entry_c.use_br_ind,
			:dc_entry_c.ct_type,
			:dc_entry_c.ct_ind,
			:dc_entry_c.amt_no,
			:dc_entry_c.brf);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT dc_entry error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT dc_entry error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
