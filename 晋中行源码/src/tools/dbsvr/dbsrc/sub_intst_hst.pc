#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"sub_intst_hst_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int sub_intst_hst_con ( struct sub_intst_hst_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct sub_intst_hst_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->br_no);
	zip_tail(ps->ac_no);
	zip_tail(ps->sub_ac_no);
	zip_tail(ps->ac_ind);
	zip_tail(ps->pt_ind);
	zip_tail(ps->intst_flag);
	zip_tail(ps->intst_sts);
}
int Sub_intst_hst_Debug(struct sub_intst_hst_c *ps){
	vtcp_log("sub_intst_hst_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("sub_intst_hst_c.br_no=[%s]\n",ps->br_no);
	vtcp_log("sub_intst_hst_c.ac_no=[%s]\n",ps->ac_no);
	vtcp_log("sub_intst_hst_c.sub_ac_seqn=[%ld]\n",ps->sub_ac_seqn);
	vtcp_log("sub_intst_hst_c.sub_ac_no=[%s]\n",ps->sub_ac_no);
	vtcp_log("sub_intst_hst_c.bic_bal=[%f]\n",ps->bic_bal);
	vtcp_log("sub_intst_hst_c.bic_acm=[%f]\n",ps->bic_acm);
	vtcp_log("sub_intst_hst_c.fct_intst=[%f]\n",ps->fct_intst);
	vtcp_log("sub_intst_hst_c.intst_tax=[%f]\n",ps->intst_tax);
	vtcp_log("sub_intst_hst_c.aic_bal=[%f]\n",ps->aic_bal);
	vtcp_log("sub_intst_hst_c.aic_acm=[%f]\n",ps->aic_acm);
	vtcp_log("sub_intst_hst_c.ic_date=[%ld]\n",ps->ic_date);
	vtcp_log("sub_intst_hst_c.intst_date=[%ld]\n",ps->intst_date);
	vtcp_log("sub_intst_hst_c.ac_ind=[%s]\n",ps->ac_ind);
	vtcp_log("sub_intst_hst_c.pt_ind=[%s]\n",ps->pt_ind);
	vtcp_log("sub_intst_hst_c.rate=[%f]\n",ps->rate);
	vtcp_log("sub_intst_hst_c.jx_date=[%ld]\n",ps->jx_date);
	vtcp_log("sub_intst_hst_c.intst_flag=[%s]\n",ps->intst_flag);
	vtcp_log("sub_intst_hst_c.intst_sts=[%s]\n",ps->intst_sts);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Sub_intst_hst_Sel(reply,sub_intst_hst_c,fmtstr,va_alist)
char    *reply;
struct  sub_intst_hst_c *sub_intst_hst_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Sub_intst_hst_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Sub_intst_hst_Fet_Sel( sub_intst_hst_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Sub_intst_hst_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Sub_intst_hst_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,sub_intst_hst.* FROM sub_intst_hst WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE sub_intst_hst_sel FROM :comm;
	EXEC SQL DECLARE sel_sub_intst_hst CURSOR FOR sub_intst_hst_sel;

	EXEC SQL OPEN sel_sub_intst_hst;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN sub_intst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Sub_intst_hst_Fet_Sel ( struct sub_intst_hst_c *sub_intst_hst_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_sub_intst_hst INTO :sub_intst_hst_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch sub_intst_hst error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch sub_intst_hst finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(sub_intst_hst_c);

	return 0;
}

int Sub_intst_hst_Clo_Sel (){
	EXEC SQL CLOSE sel_sub_intst_hst;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Sub_intst_hst_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,sub_intst_hst.* FROM sub_intst_hst WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE sub_intst_hst_upd FROM :comm;

	EXEC SQL DECLARE upd_sub_intst_hst CURSOR FOR sub_intst_hst_upd;

	EXEC SQL OPEN upd_sub_intst_hst;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open sub_intst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Sub_intst_hst_Fet_Upd( struct sub_intst_hst_c *sub_intst_hst_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_sub_intst_hst INTO :sub_intst_hst_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd sub_intst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH sub_intst_hst finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(sub_intst_hst_c);

	return 0;
}

int Sub_intst_hst_Upd_Upd( struct sub_intst_hst_c sub_intst_hst_c , char * reply){
	int ret;

	EXEC SQL UPDATE sub_intst_hst SET br_no=:sub_intst_hst_c.br_no,
			ac_no=:sub_intst_hst_c.ac_no,
			sub_ac_seqn=:sub_intst_hst_c.sub_ac_seqn,
			sub_ac_no=:sub_intst_hst_c.sub_ac_no,
			bic_bal=:sub_intst_hst_c.bic_bal,
			bic_acm=:sub_intst_hst_c.bic_acm,
			fct_intst=:sub_intst_hst_c.fct_intst,
			intst_tax=:sub_intst_hst_c.intst_tax,
			aic_bal=:sub_intst_hst_c.aic_bal,
			aic_acm=:sub_intst_hst_c.aic_acm,
			ic_date=:sub_intst_hst_c.ic_date,
			intst_date=:sub_intst_hst_c.intst_date,
			ac_ind=:sub_intst_hst_c.ac_ind,
			pt_ind=:sub_intst_hst_c.pt_ind,
			rate=:sub_intst_hst_c.rate,
			jx_date=:sub_intst_hst_c.jx_date,
			intst_flag=:sub_intst_hst_c.intst_flag,
			intst_sts=:sub_intst_hst_c.intst_sts
	WHERE rowid=:sub_intst_hst_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE sub_intst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Sub_intst_hst_Del_Upd(struct sub_intst_hst_c sub_intst_hst_c , char * reply  ){

	EXEC SQL DELETE FROM sub_intst_hst WHERE rowid=:sub_intst_hst_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE sub_intst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Sub_intst_hst_Clo_Upd( ){
	EXEC SQL CLOSE upd_sub_intst_hst;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Sub_intst_hst_Ins( struct sub_intst_hst_c sub_intst_hst_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO sub_intst_hst VALUES (:sub_intst_hst_c.br_no,
			:sub_intst_hst_c.ac_no,
			:sub_intst_hst_c.sub_ac_seqn,
			:sub_intst_hst_c.sub_ac_no,
			:sub_intst_hst_c.bic_bal,
			:sub_intst_hst_c.bic_acm,
			:sub_intst_hst_c.fct_intst,
			:sub_intst_hst_c.intst_tax,
			:sub_intst_hst_c.aic_bal,
			:sub_intst_hst_c.aic_acm,
			:sub_intst_hst_c.ic_date,
			:sub_intst_hst_c.intst_date,
			:sub_intst_hst_c.ac_ind,
			:sub_intst_hst_c.pt_ind,
			:sub_intst_hst_c.rate,
			:sub_intst_hst_c.jx_date,
			:sub_intst_hst_c.intst_flag,
			:sub_intst_hst_c.intst_sts);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT sub_intst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT sub_intst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
