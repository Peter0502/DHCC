#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"hv_fzf_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int hv_fzf_con ( struct hv_fzf_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct hv_fzf_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->otype);
	zip_tail(ps->or_br_no);
	zip_tail(ps->orderno);
	zip_tail(ps->br_no);
	zip_tail(ps->hv_fzf_sts);
	zip_tail(ps->cmtno);
	zip_tail(ps->pay_qs_no);
	zip_tail(ps->ac_br_no);
	zip_tail(ps->cash_qs_no);
	zip_tail(ps->o_or_br_no);
	zip_tail(ps->o_ac_br_no);
	zip_tail(ps->o_orderno);
	zip_tail(ps->o_cur_ind);
	zip_tail(ps->o_cmtno);
	zip_tail(ps->o_tx_type);
	zip_tail(ps->sendco);
	zip_tail(ps->receco);
	zip_tail(ps->req_br_no);
	zip_tail(ps->req_content);
	zip_tail(ps->req_orderno);
	zip_tail(ps->res_br_no);
	zip_tail(ps->res_content);
	zip_tail(ps->res_orderno);
	zip_tail(ps->tx_sts);
	zip_tail(ps->res_sts);
	zip_tail(ps->addid);
	zip_tail(ps->refno);
	zip_tail(ps->lw_ind);
	zip_tail(ps->hv_prt_ind);
	zip_tail(ps->hv_brf);
	zip_tail(ps->tel);
	zip_tail(ps->send_tel);
	zip_tail(ps->reqtype);
	zip_tail(ps->o_packid);
	zip_tail(ps->resp1);
	zip_tail(ps->otxnum);
	zip_tail(ps->filler);
}
int Hv_fzf_Debug(struct hv_fzf_c *ps){
	vtcp_log("hv_fzf_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("hv_fzf_c.otype=[%s]\n",ps->otype);
	vtcp_log("hv_fzf_c.or_br_no=[%s]\n",ps->or_br_no);
	vtcp_log("hv_fzf_c.orderno=[%s]\n",ps->orderno);
	vtcp_log("hv_fzf_c.tx_date=[%ld]\n",ps->tx_date);
	vtcp_log("hv_fzf_c.wt_date=[%ld]\n",ps->wt_date);
	vtcp_log("hv_fzf_c.br_no=[%s]\n",ps->br_no);
	vtcp_log("hv_fzf_c.hv_fzf_sts=[%s]\n",ps->hv_fzf_sts);
	vtcp_log("hv_fzf_c.cmtno=[%s]\n",ps->cmtno);
	vtcp_log("hv_fzf_c.tx_time=[%ld]\n",ps->tx_time);
	vtcp_log("hv_fzf_c.pay_qs_no=[%s]\n",ps->pay_qs_no);
	vtcp_log("hv_fzf_c.ac_br_no=[%s]\n",ps->ac_br_no);
	vtcp_log("hv_fzf_c.cash_qs_no=[%s]\n",ps->cash_qs_no);
	vtcp_log("hv_fzf_c.o_wt_date=[%ld]\n",ps->o_wt_date);
	vtcp_log("hv_fzf_c.o_tx_date=[%ld]\n",ps->o_tx_date);
	vtcp_log("hv_fzf_c.o_or_br_no=[%s]\n",ps->o_or_br_no);
	vtcp_log("hv_fzf_c.o_ac_br_no=[%s]\n",ps->o_ac_br_no);
	vtcp_log("hv_fzf_c.o_orderno=[%s]\n",ps->o_orderno);
	vtcp_log("hv_fzf_c.o_cur_ind=[%s]\n",ps->o_cur_ind);
	vtcp_log("hv_fzf_c.o_tx_amt=[%f]\n",ps->o_tx_amt);
	vtcp_log("hv_fzf_c.o_cmtno=[%s]\n",ps->o_cmtno);
	vtcp_log("hv_fzf_c.o_tx_type=[%s]\n",ps->o_tx_type);
	vtcp_log("hv_fzf_c.sendco=[%s]\n",ps->sendco);
	vtcp_log("hv_fzf_c.receco=[%s]\n",ps->receco);
	vtcp_log("hv_fzf_c.req_date=[%ld]\n",ps->req_date);
	vtcp_log("hv_fzf_c.req_br_no=[%s]\n",ps->req_br_no);
	vtcp_log("hv_fzf_c.req_content=[%s]\n",ps->req_content);
	vtcp_log("hv_fzf_c.req_orderno=[%s]\n",ps->req_orderno);
	vtcp_log("hv_fzf_c.res_date=[%ld]\n",ps->res_date);
	vtcp_log("hv_fzf_c.res_br_no=[%s]\n",ps->res_br_no);
	vtcp_log("hv_fzf_c.res_content=[%s]\n",ps->res_content);
	vtcp_log("hv_fzf_c.res_orderno=[%s]\n",ps->res_orderno);
	vtcp_log("hv_fzf_c.tx_sts=[%s]\n",ps->tx_sts);
	vtcp_log("hv_fzf_c.res_sts=[%s]\n",ps->res_sts);
	vtcp_log("hv_fzf_c.addid=[%s]\n",ps->addid);
	vtcp_log("hv_fzf_c.refno=[%s]\n",ps->refno);
	vtcp_log("hv_fzf_c.lw_ind=[%s]\n",ps->lw_ind);
	vtcp_log("hv_fzf_c.hv_prt_ind=[%s]\n",ps->hv_prt_ind);
	vtcp_log("hv_fzf_c.hv_brf=[%s]\n",ps->hv_brf);
	vtcp_log("hv_fzf_c.tel=[%s]\n",ps->tel);
	vtcp_log("hv_fzf_c.trace_no=[%ld]\n",ps->trace_no);
	vtcp_log("hv_fzf_c.send_tel=[%s]\n",ps->send_tel);
	vtcp_log("hv_fzf_c.send_trace_no=[%ld]\n",ps->send_trace_no);
	vtcp_log("hv_fzf_c.reqtype=[%s]\n",ps->reqtype);
	vtcp_log("hv_fzf_c.o_pack_date=[%ld]\n",ps->o_pack_date);
	vtcp_log("hv_fzf_c.o_packid=[%s]\n",ps->o_packid);
	vtcp_log("hv_fzf_c.resp1=[%s]\n",ps->resp1);
	vtcp_log("hv_fzf_c.otxnum=[%s]\n",ps->otxnum);
	vtcp_log("hv_fzf_c.filler=[%s]\n",ps->filler);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Hv_fzf_Sel(reply,hv_fzf_c,fmtstr,va_alist)
char    *reply;
struct  hv_fzf_c *hv_fzf_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Hv_fzf_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Hv_fzf_Fet_Sel( hv_fzf_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Hv_fzf_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Hv_fzf_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,hv_fzf.* FROM hv_fzf WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE hv_fzf_sel FROM :comm;
	EXEC SQL DECLARE sel_hv_fzf CURSOR FOR hv_fzf_sel;

	EXEC SQL OPEN sel_hv_fzf;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN hv_fzf error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Hv_fzf_Fet_Sel ( struct hv_fzf_c *hv_fzf_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_hv_fzf INTO :hv_fzf_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch hv_fzf error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch hv_fzf finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(hv_fzf_c);

	return 0;
}

int Hv_fzf_Clo_Sel (){
	EXEC SQL CLOSE sel_hv_fzf;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Hv_fzf_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,hv_fzf.* FROM hv_fzf WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE hv_fzf_upd FROM :comm;

	EXEC SQL DECLARE upd_hv_fzf CURSOR FOR hv_fzf_upd;

	EXEC SQL OPEN upd_hv_fzf;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open hv_fzf error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Hv_fzf_Fet_Upd( struct hv_fzf_c *hv_fzf_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_hv_fzf INTO :hv_fzf_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd hv_fzf error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH hv_fzf finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(hv_fzf_c);

	return 0;
}

int Hv_fzf_Upd_Upd( struct hv_fzf_c hv_fzf_c , char * reply){
	int ret;

	EXEC SQL UPDATE hv_fzf SET otype=:hv_fzf_c.otype,
			or_br_no=:hv_fzf_c.or_br_no,
			orderno=:hv_fzf_c.orderno,
			tx_date=:hv_fzf_c.tx_date,
			wt_date=:hv_fzf_c.wt_date,
			br_no=:hv_fzf_c.br_no,
			hv_fzf_sts=:hv_fzf_c.hv_fzf_sts,
			cmtno=:hv_fzf_c.cmtno,
			tx_time=:hv_fzf_c.tx_time,
			pay_qs_no=:hv_fzf_c.pay_qs_no,
			ac_br_no=:hv_fzf_c.ac_br_no,
			cash_qs_no=:hv_fzf_c.cash_qs_no,
			o_wt_date=:hv_fzf_c.o_wt_date,
			o_tx_date=:hv_fzf_c.o_tx_date,
			o_or_br_no=:hv_fzf_c.o_or_br_no,
			o_ac_br_no=:hv_fzf_c.o_ac_br_no,
			o_orderno=:hv_fzf_c.o_orderno,
			o_cur_ind=:hv_fzf_c.o_cur_ind,
			o_tx_amt=:hv_fzf_c.o_tx_amt,
			o_cmtno=:hv_fzf_c.o_cmtno,
			o_tx_type=:hv_fzf_c.o_tx_type,
			sendco=:hv_fzf_c.sendco,
			receco=:hv_fzf_c.receco,
			req_date=:hv_fzf_c.req_date,
			req_br_no=:hv_fzf_c.req_br_no,
			req_content=:hv_fzf_c.req_content,
			req_orderno=:hv_fzf_c.req_orderno,
			res_date=:hv_fzf_c.res_date,
			res_br_no=:hv_fzf_c.res_br_no,
			res_content=:hv_fzf_c.res_content,
			res_orderno=:hv_fzf_c.res_orderno,
			tx_sts=:hv_fzf_c.tx_sts,
			res_sts=:hv_fzf_c.res_sts,
			addid=:hv_fzf_c.addid,
			refno=:hv_fzf_c.refno,
			lw_ind=:hv_fzf_c.lw_ind,
			hv_prt_ind=:hv_fzf_c.hv_prt_ind,
			hv_brf=:hv_fzf_c.hv_brf,
			tel=:hv_fzf_c.tel,
			trace_no=:hv_fzf_c.trace_no,
			send_tel=:hv_fzf_c.send_tel,
			send_trace_no=:hv_fzf_c.send_trace_no,
			reqtype=:hv_fzf_c.reqtype,
			o_pack_date=:hv_fzf_c.o_pack_date,
			o_packid=:hv_fzf_c.o_packid,
			resp1=:hv_fzf_c.resp1,
			otxnum=:hv_fzf_c.otxnum,
			filler=:hv_fzf_c.filler
	WHERE rowid=:hv_fzf_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE hv_fzf error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Hv_fzf_Del_Upd(struct hv_fzf_c hv_fzf_c , char * reply  ){

	EXEC SQL DELETE FROM hv_fzf WHERE rowid=:hv_fzf_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE hv_fzf error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Hv_fzf_Clo_Upd( ){
	EXEC SQL CLOSE upd_hv_fzf;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Hv_fzf_Ins( struct hv_fzf_c hv_fzf_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO hv_fzf VALUES (:hv_fzf_c.otype,
			:hv_fzf_c.or_br_no,
			:hv_fzf_c.orderno,
			:hv_fzf_c.tx_date,
			:hv_fzf_c.wt_date,
			:hv_fzf_c.br_no,
			:hv_fzf_c.hv_fzf_sts,
			:hv_fzf_c.cmtno,
			:hv_fzf_c.tx_time,
			:hv_fzf_c.pay_qs_no,
			:hv_fzf_c.ac_br_no,
			:hv_fzf_c.cash_qs_no,
			:hv_fzf_c.o_wt_date,
			:hv_fzf_c.o_tx_date,
			:hv_fzf_c.o_or_br_no,
			:hv_fzf_c.o_ac_br_no,
			:hv_fzf_c.o_orderno,
			:hv_fzf_c.o_cur_ind,
			:hv_fzf_c.o_tx_amt,
			:hv_fzf_c.o_cmtno,
			:hv_fzf_c.o_tx_type,
			:hv_fzf_c.sendco,
			:hv_fzf_c.receco,
			:hv_fzf_c.req_date,
			:hv_fzf_c.req_br_no,
			:hv_fzf_c.req_content,
			:hv_fzf_c.req_orderno,
			:hv_fzf_c.res_date,
			:hv_fzf_c.res_br_no,
			:hv_fzf_c.res_content,
			:hv_fzf_c.res_orderno,
			:hv_fzf_c.tx_sts,
			:hv_fzf_c.res_sts,
			:hv_fzf_c.addid,
			:hv_fzf_c.refno,
			:hv_fzf_c.lw_ind,
			:hv_fzf_c.hv_prt_ind,
			:hv_fzf_c.hv_brf,
			:hv_fzf_c.tel,
			:hv_fzf_c.trace_no,
			:hv_fzf_c.send_tel,
			:hv_fzf_c.send_trace_no,
			:hv_fzf_c.reqtype,
			:hv_fzf_c.o_pack_date,
			:hv_fzf_c.o_packid,
			:hv_fzf_c.resp1,
			:hv_fzf_c.otxnum,
			:hv_fzf_c.filler);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT hv_fzf error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT hv_fzf error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
