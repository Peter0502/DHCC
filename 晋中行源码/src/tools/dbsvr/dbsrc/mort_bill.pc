#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"mort_bill_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int mort_bill_con ( struct mort_bill_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct mort_bill_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->mort_ac_no);
}
int Mort_bill_Debug(struct mort_bill_c *ps){
	vtcp_log("mort_bill_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("mort_bill_c.mort_ac_no=[%s]\n",ps->mort_ac_no);
	vtcp_log("mort_bill_c.mort_amt=[%f]\n",ps->mort_amt);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Mort_bill_Sel(reply,mort_bill_c,fmtstr,va_alist)
char    *reply;
struct  mort_bill_c *mort_bill_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Mort_bill_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Mort_bill_Fet_Sel( mort_bill_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Mort_bill_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Mort_bill_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,mort_bill.* FROM mort_bill WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mort_bill_sel FROM :comm;
	EXEC SQL DECLARE sel_mort_bill CURSOR FOR mort_bill_sel;

	EXEC SQL OPEN sel_mort_bill;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN mort_bill error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mort_bill_Fet_Sel ( struct mort_bill_c *mort_bill_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_mort_bill INTO :mort_bill_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch mort_bill error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch mort_bill finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(mort_bill_c);

	return 0;
}

int Mort_bill_Clo_Sel (){
	EXEC SQL CLOSE sel_mort_bill;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Mort_bill_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,mort_bill.* FROM mort_bill WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mort_bill_upd FROM :comm;

	EXEC SQL DECLARE upd_mort_bill CURSOR FOR mort_bill_upd;

	EXEC SQL OPEN upd_mort_bill;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open mort_bill error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mort_bill_Fet_Upd( struct mort_bill_c *mort_bill_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_mort_bill INTO :mort_bill_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd mort_bill error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH mort_bill finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(mort_bill_c);

	return 0;
}

int Mort_bill_Upd_Upd( struct mort_bill_c mort_bill_c , char * reply){
	int ret;

	EXEC SQL UPDATE mort_bill SET mort_ac_no=:mort_bill_c.mort_ac_no,
			mort_amt=:mort_bill_c.mort_amt
	WHERE rowid=:mort_bill_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE mort_bill error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Mort_bill_Del_Upd(struct mort_bill_c mort_bill_c , char * reply  ){

	EXEC SQL DELETE FROM mort_bill WHERE rowid=:mort_bill_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE mort_bill error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mort_bill_Clo_Upd( ){
	EXEC SQL CLOSE upd_mort_bill;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Mort_bill_Ins( struct mort_bill_c mort_bill_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO mort_bill VALUES (:mort_bill_c.mort_ac_no,
			:mort_bill_c.mort_amt);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT mort_bill error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT mort_bill error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
