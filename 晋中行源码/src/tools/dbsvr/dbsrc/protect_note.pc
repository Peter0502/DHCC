#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"protect_note_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int protect_note_con ( struct protect_note_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct protect_note_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->tx_br_no);
	zip_tail(ps->pro_ac_no);
	zip_tail(ps->ben_ac_no);
	zip_tail(ps->bail_ac_no);
	zip_tail(ps->pact_no);
	zip_tail(ps->mort_typ);
	zip_tail(ps->mort_ac_no);
	zip_tail(ps->pro_name);
	zip_tail(ps->pro_addr);
	zip_tail(ps->ben_name);
	zip_tail(ps->ben_addr);
	zip_tail(ps->protect_typ);
	zip_tail(ps->protect_sts);
	zip_tail(ps->tel);
}
int Protect_note_Debug(struct protect_note_c *ps){
	vtcp_log("protect_note_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("protect_note_c.tx_br_no=[%s]\n",ps->tx_br_no);
	vtcp_log("protect_note_c.pro_ac_no=[%s]\n",ps->pro_ac_no);
	vtcp_log("protect_note_c.pro_cif_no=[%ld]\n",ps->pro_cif_no);
	vtcp_log("protect_note_c.ben_ac_no=[%s]\n",ps->ben_ac_no);
	vtcp_log("protect_note_c.ben_cif_no=[%ld]\n",ps->ben_cif_no);
	vtcp_log("protect_note_c.bail_ac_no=[%s]\n",ps->bail_ac_no);
	vtcp_log("protect_note_c.pact_no=[%s]\n",ps->pact_no);
	vtcp_log("protect_note_c.opn_date=[%ld]\n",ps->opn_date);
	vtcp_log("protect_note_c.time_limt=[%ld]\n",ps->time_limt);
	vtcp_log("protect_note_c.end_date=[%ld]\n",ps->end_date);
	vtcp_log("protect_note_c.nex_date=[%ld]\n",ps->nex_date);
	vtcp_log("protect_note_c.sum_amt=[%f]\n",ps->sum_amt);
	vtcp_log("protect_note_c.amt=[%f]\n",ps->amt);
	vtcp_log("protect_note_c.bail_amt=[%f]\n",ps->bail_amt);
	vtcp_log("protect_note_c.ratio=[%f]\n",ps->ratio);
	vtcp_log("protect_note_c.mort_typ=[%s]\n",ps->mort_typ);
	vtcp_log("protect_note_c.mort_ac_no=[%s]\n",ps->mort_ac_no);
	vtcp_log("protect_note_c.pro_name=[%s]\n",ps->pro_name);
	vtcp_log("protect_note_c.pro_addr=[%s]\n",ps->pro_addr);
	vtcp_log("protect_note_c.ben_name=[%s]\n",ps->ben_name);
	vtcp_log("protect_note_c.ben_addr=[%s]\n",ps->ben_addr);
	vtcp_log("protect_note_c.amends_amt=[%f]\n",ps->amends_amt);
	vtcp_log("protect_note_c.over_rate=[%f]\n",ps->over_rate);
	vtcp_log("protect_note_c.protect_typ=[%s]\n",ps->protect_typ);
	vtcp_log("protect_note_c.protect_sts=[%s]\n",ps->protect_sts);
	vtcp_log("protect_note_c.tx_date=[%ld]\n",ps->tx_date);
	vtcp_log("protect_note_c.tel=[%s]\n",ps->tel);
	vtcp_log("protect_note_c.trace_no=[%ld]\n",ps->trace_no);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Protect_note_Sel(reply,protect_note_c,fmtstr,va_alist)
char    *reply;
struct  protect_note_c *protect_note_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Protect_note_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Protect_note_Fet_Sel( protect_note_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Protect_note_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Protect_note_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,protect_note.* FROM protect_note WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE protect_note_sel FROM :comm;
	EXEC SQL DECLARE sel_protect_note CURSOR FOR protect_note_sel;

	EXEC SQL OPEN sel_protect_note;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN protect_note error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Protect_note_Fet_Sel ( struct protect_note_c *protect_note_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_protect_note INTO :protect_note_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch protect_note error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch protect_note finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(protect_note_c);

	return 0;
}

int Protect_note_Clo_Sel (){
	EXEC SQL CLOSE sel_protect_note;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Protect_note_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,protect_note.* FROM protect_note WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE protect_note_upd FROM :comm;

	EXEC SQL DECLARE upd_protect_note CURSOR FOR protect_note_upd;

	EXEC SQL OPEN upd_protect_note;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open protect_note error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Protect_note_Fet_Upd( struct protect_note_c *protect_note_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_protect_note INTO :protect_note_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd protect_note error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH protect_note finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(protect_note_c);

	return 0;
}

int Protect_note_Upd_Upd( struct protect_note_c protect_note_c , char * reply){
	int ret;

	EXEC SQL UPDATE protect_note SET tx_br_no=:protect_note_c.tx_br_no,
			pro_ac_no=:protect_note_c.pro_ac_no,
			pro_cif_no=:protect_note_c.pro_cif_no,
			ben_ac_no=:protect_note_c.ben_ac_no,
			ben_cif_no=:protect_note_c.ben_cif_no,
			bail_ac_no=:protect_note_c.bail_ac_no,
			pact_no=:protect_note_c.pact_no,
			opn_date=:protect_note_c.opn_date,
			time_limt=:protect_note_c.time_limt,
			end_date=:protect_note_c.end_date,
			nex_date=:protect_note_c.nex_date,
			sum_amt=:protect_note_c.sum_amt,
			amt=:protect_note_c.amt,
			bail_amt=:protect_note_c.bail_amt,
			ratio=:protect_note_c.ratio,
			mort_typ=:protect_note_c.mort_typ,
			mort_ac_no=:protect_note_c.mort_ac_no,
			pro_name=:protect_note_c.pro_name,
			pro_addr=:protect_note_c.pro_addr,
			ben_name=:protect_note_c.ben_name,
			ben_addr=:protect_note_c.ben_addr,
			amends_amt=:protect_note_c.amends_amt,
			over_rate=:protect_note_c.over_rate,
			protect_typ=:protect_note_c.protect_typ,
			protect_sts=:protect_note_c.protect_sts,
			tx_date=:protect_note_c.tx_date,
			tel=:protect_note_c.tel,
			trace_no=:protect_note_c.trace_no
	WHERE rowid=:protect_note_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE protect_note error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Protect_note_Del_Upd(struct protect_note_c protect_note_c , char * reply  ){

	EXEC SQL DELETE FROM protect_note WHERE rowid=:protect_note_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE protect_note error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Protect_note_Clo_Upd( ){
	EXEC SQL CLOSE upd_protect_note;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Protect_note_Ins( struct protect_note_c protect_note_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO protect_note VALUES (:protect_note_c.tx_br_no,
			:protect_note_c.pro_ac_no,
			:protect_note_c.pro_cif_no,
			:protect_note_c.ben_ac_no,
			:protect_note_c.ben_cif_no,
			:protect_note_c.bail_ac_no,
			:protect_note_c.pact_no,
			:protect_note_c.opn_date,
			:protect_note_c.time_limt,
			:protect_note_c.end_date,
			:protect_note_c.nex_date,
			:protect_note_c.sum_amt,
			:protect_note_c.amt,
			:protect_note_c.bail_amt,
			:protect_note_c.ratio,
			:protect_note_c.mort_typ,
			:protect_note_c.mort_ac_no,
			:protect_note_c.pro_name,
			:protect_note_c.pro_addr,
			:protect_note_c.ben_name,
			:protect_note_c.ben_addr,
			:protect_note_c.amends_amt,
			:protect_note_c.over_rate,
			:protect_note_c.protect_typ,
			:protect_note_c.protect_sts,
			:protect_note_c.tx_date,
			:protect_note_c.tel,
			:protect_note_c.trace_no);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT protect_note error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT protect_note error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
