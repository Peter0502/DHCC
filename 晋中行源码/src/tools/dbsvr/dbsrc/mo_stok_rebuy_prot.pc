#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"mo_stok_rebuy_prot_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int mo_stok_rebuy_prot_con ( struct mo_stok_rebuy_prot_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct mo_stok_rebuy_prot_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->pact_no);
	zip_tail(ps->br_no);
	zip_tail(ps->buy_type);
	zip_tail(ps->tcht_type);
	zip_tail(ps->opt_acno);
	zip_tail(ps->opt_name);
	zip_tail(ps->brf);
	zip_tail(ps->sts);
	zip_tail(ps->tel);
	zip_tail(ps->chk);
	zip_tail(ps->auth);
}
int Mo_stok_rebuy_prot_Debug(struct mo_stok_rebuy_prot_c *ps){
	vtcp_log("mo_stok_rebuy_prot_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("mo_stok_rebuy_prot_c.pact_no=[%s]\n",ps->pact_no);
	vtcp_log("mo_stok_rebuy_prot_c.br_no=[%s]\n",ps->br_no);
	vtcp_log("mo_stok_rebuy_prot_c.ac_id=[%ld]\n",ps->ac_id);
	vtcp_log("mo_stok_rebuy_prot_c.ac_seqn=[%ld]\n",ps->ac_seqn);
	vtcp_log("mo_stok_rebuy_prot_c.buy_type=[%s]\n",ps->buy_type);
	vtcp_log("mo_stok_rebuy_prot_c.tcht_type=[%s]\n",ps->tcht_type);
	vtcp_log("mo_stok_rebuy_prot_c.par_value=[%f]\n",ps->par_value);
	vtcp_log("mo_stok_rebuy_prot_c.bal=[%f]\n",ps->bal);
	vtcp_log("mo_stok_rebuy_prot_c.sign_date=[%ld]\n",ps->sign_date);
	vtcp_log("mo_stok_rebuy_prot_c.matr_date=[%ld]\n",ps->matr_date);
	vtcp_log("mo_stok_rebuy_prot_c.term=[%ld]\n",ps->term);
	vtcp_log("mo_stok_rebuy_prot_c.pledge_rate=[%f]\n",ps->pledge_rate);
	vtcp_log("mo_stok_rebuy_prot_c.rate=[%f]\n",ps->rate);
	vtcp_log("mo_stok_rebuy_prot_c.over_rate=[%f]\n",ps->over_rate);
	vtcp_log("mo_stok_rebuy_prot_c.opt_acno=[%s]\n",ps->opt_acno);
	vtcp_log("mo_stok_rebuy_prot_c.opt_name=[%s]\n",ps->opt_name);
	vtcp_log("mo_stok_rebuy_prot_c.reg_date=[%ld]\n",ps->reg_date);
	vtcp_log("mo_stok_rebuy_prot_c.trace_no=[%ld]\n",ps->trace_no);
	vtcp_log("mo_stok_rebuy_prot_c.brf=[%s]\n",ps->brf);
	vtcp_log("mo_stok_rebuy_prot_c.sts=[%s]\n",ps->sts);
	vtcp_log("mo_stok_rebuy_prot_c.tel=[%s]\n",ps->tel);
	vtcp_log("mo_stok_rebuy_prot_c.chk=[%s]\n",ps->chk);
	vtcp_log("mo_stok_rebuy_prot_c.auth=[%s]\n",ps->auth);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Mo_stok_rebuy_prot_Sel(reply,mo_stok_rebuy_prot_c,fmtstr,va_alist)
char    *reply;
struct  mo_stok_rebuy_prot_c *mo_stok_rebuy_prot_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Mo_stok_rebuy_prot_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Mo_stok_rebuy_prot_Fet_Sel( mo_stok_rebuy_prot_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Mo_stok_rebuy_prot_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Mo_stok_rebuy_prot_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,mo_stok_rebuy_prot.* FROM mo_stok_rebuy_prot WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mo_stok_rebuy_prot_sel FROM :comm;
	EXEC SQL DECLARE sel_mo_stok_rebuy_prot CURSOR FOR mo_stok_rebuy_prot_sel;

	EXEC SQL OPEN sel_mo_stok_rebuy_prot;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN mo_stok_rebuy_prot error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_stok_rebuy_prot_Fet_Sel ( struct mo_stok_rebuy_prot_c *mo_stok_rebuy_prot_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_mo_stok_rebuy_prot INTO :mo_stok_rebuy_prot_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch mo_stok_rebuy_prot error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch mo_stok_rebuy_prot finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(mo_stok_rebuy_prot_c);

	return 0;
}

int Mo_stok_rebuy_prot_Clo_Sel (){
	EXEC SQL CLOSE sel_mo_stok_rebuy_prot;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Mo_stok_rebuy_prot_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,mo_stok_rebuy_prot.* FROM mo_stok_rebuy_prot WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mo_stok_rebuy_prot_upd FROM :comm;

	EXEC SQL DECLARE upd_mo_stok_rebuy_prot CURSOR FOR mo_stok_rebuy_prot_upd;

	EXEC SQL OPEN upd_mo_stok_rebuy_prot;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open mo_stok_rebuy_prot error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_stok_rebuy_prot_Fet_Upd( struct mo_stok_rebuy_prot_c *mo_stok_rebuy_prot_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_mo_stok_rebuy_prot INTO :mo_stok_rebuy_prot_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd mo_stok_rebuy_prot error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH mo_stok_rebuy_prot finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(mo_stok_rebuy_prot_c);

	return 0;
}

int Mo_stok_rebuy_prot_Upd_Upd( struct mo_stok_rebuy_prot_c mo_stok_rebuy_prot_c , char * reply){
	int ret;

	EXEC SQL UPDATE mo_stok_rebuy_prot SET pact_no=:mo_stok_rebuy_prot_c.pact_no,
			br_no=:mo_stok_rebuy_prot_c.br_no,
			ac_id=:mo_stok_rebuy_prot_c.ac_id,
			ac_seqn=:mo_stok_rebuy_prot_c.ac_seqn,
			buy_type=:mo_stok_rebuy_prot_c.buy_type,
			tcht_type=:mo_stok_rebuy_prot_c.tcht_type,
			par_value=:mo_stok_rebuy_prot_c.par_value,
			bal=:mo_stok_rebuy_prot_c.bal,
			sign_date=:mo_stok_rebuy_prot_c.sign_date,
			matr_date=:mo_stok_rebuy_prot_c.matr_date,
			term=:mo_stok_rebuy_prot_c.term,
			pledge_rate=:mo_stok_rebuy_prot_c.pledge_rate,
			rate=:mo_stok_rebuy_prot_c.rate,
			over_rate=:mo_stok_rebuy_prot_c.over_rate,
			opt_acno=:mo_stok_rebuy_prot_c.opt_acno,
			opt_name=:mo_stok_rebuy_prot_c.opt_name,
			reg_date=:mo_stok_rebuy_prot_c.reg_date,
			trace_no=:mo_stok_rebuy_prot_c.trace_no,
			brf=:mo_stok_rebuy_prot_c.brf,
			sts=:mo_stok_rebuy_prot_c.sts,
			tel=:mo_stok_rebuy_prot_c.tel,
			chk=:mo_stok_rebuy_prot_c.chk,
			auth=:mo_stok_rebuy_prot_c.auth
	WHERE rowid=:mo_stok_rebuy_prot_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE mo_stok_rebuy_prot error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Mo_stok_rebuy_prot_Del_Upd(struct mo_stok_rebuy_prot_c mo_stok_rebuy_prot_c , char * reply  ){

	EXEC SQL DELETE FROM mo_stok_rebuy_prot WHERE rowid=:mo_stok_rebuy_prot_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE mo_stok_rebuy_prot error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_stok_rebuy_prot_Clo_Upd( ){
	EXEC SQL CLOSE upd_mo_stok_rebuy_prot;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Mo_stok_rebuy_prot_Ins( struct mo_stok_rebuy_prot_c mo_stok_rebuy_prot_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO mo_stok_rebuy_prot VALUES (:mo_stok_rebuy_prot_c.pact_no,
			:mo_stok_rebuy_prot_c.br_no,
			:mo_stok_rebuy_prot_c.ac_id,
			:mo_stok_rebuy_prot_c.ac_seqn,
			:mo_stok_rebuy_prot_c.buy_type,
			:mo_stok_rebuy_prot_c.tcht_type,
			:mo_stok_rebuy_prot_c.par_value,
			:mo_stok_rebuy_prot_c.bal,
			:mo_stok_rebuy_prot_c.sign_date,
			:mo_stok_rebuy_prot_c.matr_date,
			:mo_stok_rebuy_prot_c.term,
			:mo_stok_rebuy_prot_c.pledge_rate,
			:mo_stok_rebuy_prot_c.rate,
			:mo_stok_rebuy_prot_c.over_rate,
			:mo_stok_rebuy_prot_c.opt_acno,
			:mo_stok_rebuy_prot_c.opt_name,
			:mo_stok_rebuy_prot_c.reg_date,
			:mo_stok_rebuy_prot_c.trace_no,
			:mo_stok_rebuy_prot_c.brf,
			:mo_stok_rebuy_prot_c.sts,
			:mo_stok_rebuy_prot_c.tel,
			:mo_stok_rebuy_prot_c.chk,
			:mo_stok_rebuy_prot_c.auth);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT mo_stok_rebuy_prot error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT mo_stok_rebuy_prot error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
