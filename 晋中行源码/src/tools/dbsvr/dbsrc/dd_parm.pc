#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"dd_parm_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int dd_parm_con ( struct dd_parm_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct dd_parm_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->prdt_no);
	zip_tail(ps->title);
	zip_tail(ps->cif_type);
	zip_tail(ps->cur_no);
	zip_tail(ps->sttl_type);
	zip_tail(ps->ac_type);
	zip_tail(ps->bal_type);
	zip_tail(ps->opn_chrg_ind);
	zip_tail(ps->opn_chrg_code);
	zip_tail(ps->thr_opn_ind);
	zip_tail(ps->thr_cls_ind);
	zip_tail(ps->lmt_code);
	zip_tail(ps->fwd_infrm_code);
	zip_tail(ps->intst_bal_type);
	zip_tail(ps->intst_term_type);
	zip_tail(ps->rate_no);
	zip_tail(ps->rate_type);
	zip_tail(ps->rate_mode);
	zip_tail(ps->rate_func_code);
	zip_tail(ps->intst_type);
	zip_tail(ps->acm_calc_type);
	zip_tail(ps->tax_no);
	zip_tail(ps->chrg_term_type);
	zip_tail(ps->chrg_code);
	zip_tail(ps->drt_no);
	zip_tail(ps->keep_chrg_code);
	zip_tail(ps->opn_dtr_type);
	zip_tail(ps->tx_drt_ind);
	zip_tail(ps->dtx_drt_ind);
	zip_tail(ps->slp_cond);
	zip_tail(ps->slp_chrg_ind);
	zip_tail(ps->cls_cond_no);
	zip_tail(ps->hst_keep_type);
	zip_tail(ps->prt_ind);
	zip_tail(ps->slp_prt_ind);
	zip_tail(ps->prt_term_type);
	zip_tail(ps->dpst_ind);
	zip_tail(ps->draw_ind);
	zip_tail(ps->thr_dpst_ind);
	zip_tail(ps->thr_draw_ind);
	zip_tail(ps->opn_aplic_ind);
	zip_tail(ps->cash_ind);
	zip_tail(ps->singl_ind);
	zip_tail(ps->od_aplic_ind);
	zip_tail(ps->lkg_ind);
	zip_tail(ps->owner_prdt_no);
	zip_tail(ps->dc_code);
	zip_tail(ps->put_ind);
}
int Dd_parm_Debug(struct dd_parm_c *ps){
	vtcp_log("dd_parm_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("dd_parm_c.prdt_no=[%s]\n",ps->prdt_no);
	vtcp_log("dd_parm_c.title=[%s]\n",ps->title);
	vtcp_log("dd_parm_c.beg_date=[%ld]\n",ps->beg_date);
	vtcp_log("dd_parm_c.end_date=[%ld]\n",ps->end_date);
	vtcp_log("dd_parm_c.cif_type=[%s]\n",ps->cif_type);
	vtcp_log("dd_parm_c.cur_no=[%s]\n",ps->cur_no);
	vtcp_log("dd_parm_c.sttl_type=[%s]\n",ps->sttl_type);
	vtcp_log("dd_parm_c.ac_type=[%s]\n",ps->ac_type);
	vtcp_log("dd_parm_c.bal_type=[%s]\n",ps->bal_type);
	vtcp_log("dd_parm_c.min_bal=[%f]\n",ps->min_bal);
	vtcp_log("dd_parm_c.max_bal=[%f]\n",ps->max_bal);
	vtcp_log("dd_parm_c.min_opn_amt=[%f]\n",ps->min_opn_amt);
	vtcp_log("dd_parm_c.max_opn_amt=[%f]\n",ps->max_opn_amt);
	vtcp_log("dd_parm_c.opn_chrg_ind=[%s]\n",ps->opn_chrg_ind);
	vtcp_log("dd_parm_c.opn_chrg_code=[%s]\n",ps->opn_chrg_code);
	vtcp_log("dd_parm_c.thr_opn_ind=[%s]\n",ps->thr_opn_ind);
	vtcp_log("dd_parm_c.thr_cls_ind=[%s]\n",ps->thr_cls_ind);
	vtcp_log("dd_parm_c.lmt_code=[%s]\n",ps->lmt_code);
	vtcp_log("dd_parm_c.fwd_infrm_code=[%s]\n",ps->fwd_infrm_code);
	vtcp_log("dd_parm_c.intst_bal_type=[%s]\n",ps->intst_bal_type);
	vtcp_log("dd_parm_c.intst_term_type=[%s]\n",ps->intst_term_type);
	vtcp_log("dd_parm_c.intst_max_bal=[%f]\n",ps->intst_max_bal);
	vtcp_log("dd_parm_c.intst_min_bal=[%f]\n",ps->intst_min_bal);
	vtcp_log("dd_parm_c.rate_no=[%s]\n",ps->rate_no);
	vtcp_log("dd_parm_c.rate_type=[%s]\n",ps->rate_type);
	vtcp_log("dd_parm_c.rate_mode=[%s]\n",ps->rate_mode);
	vtcp_log("dd_parm_c.rate_func_code=[%s]\n",ps->rate_func_code);
	vtcp_log("dd_parm_c.min_flt_ratio=[%f]\n",ps->min_flt_ratio);
	vtcp_log("dd_parm_c.max_flt_ratio=[%f]\n",ps->max_flt_ratio);
	vtcp_log("dd_parm_c.intst_type=[%s]\n",ps->intst_type);
	vtcp_log("dd_parm_c.acm_calc_type=[%s]\n",ps->acm_calc_type);
	vtcp_log("dd_parm_c.intst_mon=[%ld]\n",ps->intst_mon);
	vtcp_log("dd_parm_c.intst_day=[%ld]\n",ps->intst_day);
	vtcp_log("dd_parm_c.tax_no=[%s]\n",ps->tax_no);
	vtcp_log("dd_parm_c.chrg_term_type=[%s]\n",ps->chrg_term_type);
	vtcp_log("dd_parm_c.chrg_code=[%s]\n",ps->chrg_code);
	vtcp_log("dd_parm_c.drt_no=[%s]\n",ps->drt_no);
	vtcp_log("dd_parm_c.min_drt_amt=[%f]\n",ps->min_drt_amt);
	vtcp_log("dd_parm_c.lmt_drt_amt=[%f]\n",ps->lmt_drt_amt);
	vtcp_log("dd_parm_c.keep_chrg_code=[%s]\n",ps->keep_chrg_code);
	vtcp_log("dd_parm_c.opn_dtr_term=[%ld]\n",ps->opn_dtr_term);
	vtcp_log("dd_parm_c.opn_dtr_type=[%s]\n",ps->opn_dtr_type);
	vtcp_log("dd_parm_c.tx_drt_ind=[%s]\n",ps->tx_drt_ind);
	vtcp_log("dd_parm_c.dtx_drt_ind=[%s]\n",ps->dtx_drt_ind);
	vtcp_log("dd_parm_c.slp_cond=[%s]\n",ps->slp_cond);
	vtcp_log("dd_parm_c.slp_chrg_ind=[%s]\n",ps->slp_chrg_ind);
	vtcp_log("dd_parm_c.cls_cond_no=[%s]\n",ps->cls_cond_no);
	vtcp_log("dd_parm_c.hst_keep_term=[%ld]\n",ps->hst_keep_term);
	vtcp_log("dd_parm_c.hst_keep_type=[%s]\n",ps->hst_keep_type);
	vtcp_log("dd_parm_c.prt_ind=[%s]\n",ps->prt_ind);
	vtcp_log("dd_parm_c.slp_prt_ind=[%s]\n",ps->slp_prt_ind);
	vtcp_log("dd_parm_c.prt_term=[%ld]\n",ps->prt_term);
	vtcp_log("dd_parm_c.prt_term_type=[%s]\n",ps->prt_term_type);
	vtcp_log("dd_parm_c.dpst_ind=[%s]\n",ps->dpst_ind);
	vtcp_log("dd_parm_c.draw_ind=[%s]\n",ps->draw_ind);
	vtcp_log("dd_parm_c.thr_dpst_ind=[%s]\n",ps->thr_dpst_ind);
	vtcp_log("dd_parm_c.thr_draw_ind=[%s]\n",ps->thr_draw_ind);
	vtcp_log("dd_parm_c.opn_aplic_ind=[%s]\n",ps->opn_aplic_ind);
	vtcp_log("dd_parm_c.cash_ind=[%s]\n",ps->cash_ind);
	vtcp_log("dd_parm_c.singl_ind=[%s]\n",ps->singl_ind);
	vtcp_log("dd_parm_c.od_aplic_ind=[%s]\n",ps->od_aplic_ind);
	vtcp_log("dd_parm_c.lkg_ind=[%s]\n",ps->lkg_ind);
	vtcp_log("dd_parm_c.owner_prdt_no=[%s]\n",ps->owner_prdt_no);
	vtcp_log("dd_parm_c.opn_lmt=[%ld]\n",ps->opn_lmt);
	vtcp_log("dd_parm_c.cls_lmt=[%ld]\n",ps->cls_lmt);
	vtcp_log("dd_parm_c.dc_code=[%s]\n",ps->dc_code);
	vtcp_log("dd_parm_c.put_ind=[%s]\n",ps->put_ind);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Dd_parm_Sel(reply,dd_parm_c,fmtstr,va_alist)
char    *reply;
struct  dd_parm_c *dd_parm_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Dd_parm_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Dd_parm_Fet_Sel( dd_parm_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Dd_parm_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Dd_parm_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,dd_parm.* FROM dd_parm WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE dd_parm_sel FROM :comm;
	EXEC SQL DECLARE sel_dd_parm CURSOR FOR dd_parm_sel;

	EXEC SQL OPEN sel_dd_parm;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN dd_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Dd_parm_Fet_Sel ( struct dd_parm_c *dd_parm_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_dd_parm INTO :dd_parm_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch dd_parm error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch dd_parm finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(dd_parm_c);

	return 0;
}

int Dd_parm_Clo_Sel (){
	EXEC SQL CLOSE sel_dd_parm;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Dd_parm_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,dd_parm.* FROM dd_parm WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE dd_parm_upd FROM :comm;

	EXEC SQL DECLARE upd_dd_parm CURSOR FOR dd_parm_upd;

	EXEC SQL OPEN upd_dd_parm;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open dd_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Dd_parm_Fet_Upd( struct dd_parm_c *dd_parm_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_dd_parm INTO :dd_parm_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd dd_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH dd_parm finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(dd_parm_c);

	return 0;
}

int Dd_parm_Upd_Upd( struct dd_parm_c dd_parm_c , char * reply){
	int ret;

	EXEC SQL UPDATE dd_parm SET prdt_no=:dd_parm_c.prdt_no,
			title=:dd_parm_c.title,
			beg_date=:dd_parm_c.beg_date,
			end_date=:dd_parm_c.end_date,
			cif_type=:dd_parm_c.cif_type,
			cur_no=:dd_parm_c.cur_no,
			sttl_type=:dd_parm_c.sttl_type,
			ac_type=:dd_parm_c.ac_type,
			bal_type=:dd_parm_c.bal_type,
			min_bal=:dd_parm_c.min_bal,
			max_bal=:dd_parm_c.max_bal,
			min_opn_amt=:dd_parm_c.min_opn_amt,
			max_opn_amt=:dd_parm_c.max_opn_amt,
			opn_chrg_ind=:dd_parm_c.opn_chrg_ind,
			opn_chrg_code=:dd_parm_c.opn_chrg_code,
			thr_opn_ind=:dd_parm_c.thr_opn_ind,
			thr_cls_ind=:dd_parm_c.thr_cls_ind,
			lmt_code=:dd_parm_c.lmt_code,
			fwd_infrm_code=:dd_parm_c.fwd_infrm_code,
			intst_bal_type=:dd_parm_c.intst_bal_type,
			intst_term_type=:dd_parm_c.intst_term_type,
			intst_max_bal=:dd_parm_c.intst_max_bal,
			intst_min_bal=:dd_parm_c.intst_min_bal,
			rate_no=:dd_parm_c.rate_no,
			rate_type=:dd_parm_c.rate_type,
			rate_mode=:dd_parm_c.rate_mode,
			rate_func_code=:dd_parm_c.rate_func_code,
			min_flt_ratio=:dd_parm_c.min_flt_ratio,
			max_flt_ratio=:dd_parm_c.max_flt_ratio,
			intst_type=:dd_parm_c.intst_type,
			acm_calc_type=:dd_parm_c.acm_calc_type,
			intst_mon=:dd_parm_c.intst_mon,
			intst_day=:dd_parm_c.intst_day,
			tax_no=:dd_parm_c.tax_no,
			chrg_term_type=:dd_parm_c.chrg_term_type,
			chrg_code=:dd_parm_c.chrg_code,
			drt_no=:dd_parm_c.drt_no,
			min_drt_amt=:dd_parm_c.min_drt_amt,
			lmt_drt_amt=:dd_parm_c.lmt_drt_amt,
			keep_chrg_code=:dd_parm_c.keep_chrg_code,
			opn_dtr_term=:dd_parm_c.opn_dtr_term,
			opn_dtr_type=:dd_parm_c.opn_dtr_type,
			tx_drt_ind=:dd_parm_c.tx_drt_ind,
			dtx_drt_ind=:dd_parm_c.dtx_drt_ind,
			slp_cond=:dd_parm_c.slp_cond,
			slp_chrg_ind=:dd_parm_c.slp_chrg_ind,
			cls_cond_no=:dd_parm_c.cls_cond_no,
			hst_keep_term=:dd_parm_c.hst_keep_term,
			hst_keep_type=:dd_parm_c.hst_keep_type,
			prt_ind=:dd_parm_c.prt_ind,
			slp_prt_ind=:dd_parm_c.slp_prt_ind,
			prt_term=:dd_parm_c.prt_term,
			prt_term_type=:dd_parm_c.prt_term_type,
			dpst_ind=:dd_parm_c.dpst_ind,
			draw_ind=:dd_parm_c.draw_ind,
			thr_dpst_ind=:dd_parm_c.thr_dpst_ind,
			thr_draw_ind=:dd_parm_c.thr_draw_ind,
			opn_aplic_ind=:dd_parm_c.opn_aplic_ind,
			cash_ind=:dd_parm_c.cash_ind,
			singl_ind=:dd_parm_c.singl_ind,
			od_aplic_ind=:dd_parm_c.od_aplic_ind,
			lkg_ind=:dd_parm_c.lkg_ind,
			owner_prdt_no=:dd_parm_c.owner_prdt_no,
			opn_lmt=:dd_parm_c.opn_lmt,
			cls_lmt=:dd_parm_c.cls_lmt,
			dc_code=:dd_parm_c.dc_code,
			put_ind=:dd_parm_c.put_ind
	WHERE rowid=:dd_parm_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE dd_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Dd_parm_Del_Upd(struct dd_parm_c dd_parm_c , char * reply  ){

	EXEC SQL DELETE FROM dd_parm WHERE rowid=:dd_parm_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE dd_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Dd_parm_Clo_Upd( ){
	EXEC SQL CLOSE upd_dd_parm;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Dd_parm_Ins( struct dd_parm_c dd_parm_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO dd_parm VALUES (:dd_parm_c.prdt_no,
			:dd_parm_c.title,
			:dd_parm_c.beg_date,
			:dd_parm_c.end_date,
			:dd_parm_c.cif_type,
			:dd_parm_c.cur_no,
			:dd_parm_c.sttl_type,
			:dd_parm_c.ac_type,
			:dd_parm_c.bal_type,
			:dd_parm_c.min_bal,
			:dd_parm_c.max_bal,
			:dd_parm_c.min_opn_amt,
			:dd_parm_c.max_opn_amt,
			:dd_parm_c.opn_chrg_ind,
			:dd_parm_c.opn_chrg_code,
			:dd_parm_c.thr_opn_ind,
			:dd_parm_c.thr_cls_ind,
			:dd_parm_c.lmt_code,
			:dd_parm_c.fwd_infrm_code,
			:dd_parm_c.intst_bal_type,
			:dd_parm_c.intst_term_type,
			:dd_parm_c.intst_max_bal,
			:dd_parm_c.intst_min_bal,
			:dd_parm_c.rate_no,
			:dd_parm_c.rate_type,
			:dd_parm_c.rate_mode,
			:dd_parm_c.rate_func_code,
			:dd_parm_c.min_flt_ratio,
			:dd_parm_c.max_flt_ratio,
			:dd_parm_c.intst_type,
			:dd_parm_c.acm_calc_type,
			:dd_parm_c.intst_mon,
			:dd_parm_c.intst_day,
			:dd_parm_c.tax_no,
			:dd_parm_c.chrg_term_type,
			:dd_parm_c.chrg_code,
			:dd_parm_c.drt_no,
			:dd_parm_c.min_drt_amt,
			:dd_parm_c.lmt_drt_amt,
			:dd_parm_c.keep_chrg_code,
			:dd_parm_c.opn_dtr_term,
			:dd_parm_c.opn_dtr_type,
			:dd_parm_c.tx_drt_ind,
			:dd_parm_c.dtx_drt_ind,
			:dd_parm_c.slp_cond,
			:dd_parm_c.slp_chrg_ind,
			:dd_parm_c.cls_cond_no,
			:dd_parm_c.hst_keep_term,
			:dd_parm_c.hst_keep_type,
			:dd_parm_c.prt_ind,
			:dd_parm_c.slp_prt_ind,
			:dd_parm_c.prt_term,
			:dd_parm_c.prt_term_type,
			:dd_parm_c.dpst_ind,
			:dd_parm_c.draw_ind,
			:dd_parm_c.thr_dpst_ind,
			:dd_parm_c.thr_draw_ind,
			:dd_parm_c.opn_aplic_ind,
			:dd_parm_c.cash_ind,
			:dd_parm_c.singl_ind,
			:dd_parm_c.od_aplic_ind,
			:dd_parm_c.lkg_ind,
			:dd_parm_c.owner_prdt_no,
			:dd_parm_c.opn_lmt,
			:dd_parm_c.cls_lmt,
			:dd_parm_c.dc_code,
			:dd_parm_c.put_ind);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT dd_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT dd_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
