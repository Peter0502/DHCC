#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"chnl_tx_detl_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int chnl_tx_detl_con ( struct chnl_tx_detl_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct chnl_tx_detl_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->tx_code);
	zip_tail(ps->syscode);
	zip_tail(ps->chnl_type);
	zip_tail(ps->tx_time);
	zip_tail(ps->orderno);
	zip_tail(ps->or_br_no);
	zip_tail(ps->sndrcvflag);
	zip_tail(ps->ac_no);
	zip_tail(ps->ac_name);
	zip_tail(ps->add_ind);
	zip_tail(ps->ct_ind);
	zip_tail(ps->df_br_no);
	zip_tail(ps->df_ac_no);
	zip_tail(ps->df_name);
	zip_tail(ps->df_id_type);
	zip_tail(ps->df_id_no);
	zip_tail(ps->txnum);
	zip_tail(ps->yw_type);
	zip_tail(ps->dz_ind);
	zip_tail(ps->filler1);
	zip_tail(ps->filler2);
	zip_tail(ps->filler3);
	zip_tail(ps->filler4);
}
int Chnl_tx_detl_Debug(struct chnl_tx_detl_c *ps){
	vtcp_log("chnl_tx_detl_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("chnl_tx_detl_c.tx_code=[%s]\n",ps->tx_code);
	vtcp_log("chnl_tx_detl_c.syscode=[%s]\n",ps->syscode);
	vtcp_log("chnl_tx_detl_c.chnl_type=[%s]\n",ps->chnl_type);
	vtcp_log("chnl_tx_detl_c.tx_date=[%ld]\n",ps->tx_date);
	vtcp_log("chnl_tx_detl_c.tx_time=[%s]\n",ps->tx_time);
	vtcp_log("chnl_tx_detl_c.trace_no=[%ld]\n",ps->trace_no);
	vtcp_log("chnl_tx_detl_c.trace_cnt=[%ld]\n",ps->trace_cnt);
	vtcp_log("chnl_tx_detl_c.pt_date=[%ld]\n",ps->pt_date);
	vtcp_log("chnl_tx_detl_c.pt_trace_no=[%ld]\n",ps->pt_trace_no);
	vtcp_log("chnl_tx_detl_c.wt_date=[%ld]\n",ps->wt_date);
	vtcp_log("chnl_tx_detl_c.orderno=[%s]\n",ps->orderno);
	vtcp_log("chnl_tx_detl_c.or_br_no=[%s]\n",ps->or_br_no);
	vtcp_log("chnl_tx_detl_c.sndrcvflag=[%s]\n",ps->sndrcvflag);
	vtcp_log("chnl_tx_detl_c.ac_no=[%s]\n",ps->ac_no);
	vtcp_log("chnl_tx_detl_c.ac_name=[%s]\n",ps->ac_name);
	vtcp_log("chnl_tx_detl_c.add_ind=[%s]\n",ps->add_ind);
	vtcp_log("chnl_tx_detl_c.ct_ind=[%s]\n",ps->ct_ind);
	vtcp_log("chnl_tx_detl_c.tx_amt=[%f]\n",ps->tx_amt);
	vtcp_log("chnl_tx_detl_c.df_br_no=[%s]\n",ps->df_br_no);
	vtcp_log("chnl_tx_detl_c.df_ac_no=[%s]\n",ps->df_ac_no);
	vtcp_log("chnl_tx_detl_c.df_name=[%s]\n",ps->df_name);
	vtcp_log("chnl_tx_detl_c.df_id_type=[%s]\n",ps->df_id_type);
	vtcp_log("chnl_tx_detl_c.df_id_no=[%s]\n",ps->df_id_no);
	vtcp_log("chnl_tx_detl_c.txnum=[%s]\n",ps->txnum);
	vtcp_log("chnl_tx_detl_c.yw_type=[%s]\n",ps->yw_type);
	vtcp_log("chnl_tx_detl_c.dz_ind=[%s]\n",ps->dz_ind);
	vtcp_log("chnl_tx_detl_c.filler1=[%s]\n",ps->filler1);
	vtcp_log("chnl_tx_detl_c.filler2=[%s]\n",ps->filler2);
	vtcp_log("chnl_tx_detl_c.filler3=[%s]\n",ps->filler3);
	vtcp_log("chnl_tx_detl_c.filler4=[%s]\n",ps->filler4);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Chnl_tx_detl_Sel(reply,chnl_tx_detl_c,fmtstr,va_alist)
char    *reply;
struct  chnl_tx_detl_c *chnl_tx_detl_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Chnl_tx_detl_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Chnl_tx_detl_Fet_Sel( chnl_tx_detl_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Chnl_tx_detl_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Chnl_tx_detl_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,chnl_tx_detl.* FROM chnl_tx_detl WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE chnl_tx_detl_sel FROM :comm;
	EXEC SQL DECLARE sel_chnl_tx_detl CURSOR FOR chnl_tx_detl_sel;

	EXEC SQL OPEN sel_chnl_tx_detl;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN chnl_tx_detl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Chnl_tx_detl_Fet_Sel ( struct chnl_tx_detl_c *chnl_tx_detl_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_chnl_tx_detl INTO :chnl_tx_detl_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch chnl_tx_detl error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch chnl_tx_detl finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(chnl_tx_detl_c);

	return 0;
}

int Chnl_tx_detl_Clo_Sel (){
	EXEC SQL CLOSE sel_chnl_tx_detl;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Chnl_tx_detl_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,chnl_tx_detl.* FROM chnl_tx_detl WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE chnl_tx_detl_upd FROM :comm;

	EXEC SQL DECLARE upd_chnl_tx_detl CURSOR FOR chnl_tx_detl_upd;

	EXEC SQL OPEN upd_chnl_tx_detl;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open chnl_tx_detl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Chnl_tx_detl_Fet_Upd( struct chnl_tx_detl_c *chnl_tx_detl_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_chnl_tx_detl INTO :chnl_tx_detl_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd chnl_tx_detl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH chnl_tx_detl finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(chnl_tx_detl_c);

	return 0;
}

int Chnl_tx_detl_Upd_Upd( struct chnl_tx_detl_c chnl_tx_detl_c , char * reply){
	int ret;

	EXEC SQL UPDATE chnl_tx_detl SET tx_code=:chnl_tx_detl_c.tx_code,
			syscode=:chnl_tx_detl_c.syscode,
			chnl_type=:chnl_tx_detl_c.chnl_type,
			tx_date=:chnl_tx_detl_c.tx_date,
			tx_time=:chnl_tx_detl_c.tx_time,
			trace_no=:chnl_tx_detl_c.trace_no,
			trace_cnt=:chnl_tx_detl_c.trace_cnt,
			pt_date=:chnl_tx_detl_c.pt_date,
			pt_trace_no=:chnl_tx_detl_c.pt_trace_no,
			wt_date=:chnl_tx_detl_c.wt_date,
			orderno=:chnl_tx_detl_c.orderno,
			or_br_no=:chnl_tx_detl_c.or_br_no,
			sndrcvflag=:chnl_tx_detl_c.sndrcvflag,
			ac_no=:chnl_tx_detl_c.ac_no,
			ac_name=:chnl_tx_detl_c.ac_name,
			add_ind=:chnl_tx_detl_c.add_ind,
			ct_ind=:chnl_tx_detl_c.ct_ind,
			tx_amt=:chnl_tx_detl_c.tx_amt,
			df_br_no=:chnl_tx_detl_c.df_br_no,
			df_ac_no=:chnl_tx_detl_c.df_ac_no,
			df_name=:chnl_tx_detl_c.df_name,
			df_id_type=:chnl_tx_detl_c.df_id_type,
			df_id_no=:chnl_tx_detl_c.df_id_no,
			txnum=:chnl_tx_detl_c.txnum,
			yw_type=:chnl_tx_detl_c.yw_type,
			dz_ind=:chnl_tx_detl_c.dz_ind,
			filler1=:chnl_tx_detl_c.filler1,
			filler2=:chnl_tx_detl_c.filler2,
			filler3=:chnl_tx_detl_c.filler3,
			filler4=:chnl_tx_detl_c.filler4
	WHERE rowid=:chnl_tx_detl_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE chnl_tx_detl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Chnl_tx_detl_Del_Upd(struct chnl_tx_detl_c chnl_tx_detl_c , char * reply  ){

	EXEC SQL DELETE FROM chnl_tx_detl WHERE rowid=:chnl_tx_detl_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE chnl_tx_detl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Chnl_tx_detl_Clo_Upd( ){
	EXEC SQL CLOSE upd_chnl_tx_detl;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Chnl_tx_detl_Ins( struct chnl_tx_detl_c chnl_tx_detl_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO chnl_tx_detl VALUES (:chnl_tx_detl_c.tx_code,
			:chnl_tx_detl_c.syscode,
			:chnl_tx_detl_c.chnl_type,
			:chnl_tx_detl_c.tx_date,
			:chnl_tx_detl_c.tx_time,
			:chnl_tx_detl_c.trace_no,
			:chnl_tx_detl_c.trace_cnt,
			:chnl_tx_detl_c.pt_date,
			:chnl_tx_detl_c.pt_trace_no,
			:chnl_tx_detl_c.wt_date,
			:chnl_tx_detl_c.orderno,
			:chnl_tx_detl_c.or_br_no,
			:chnl_tx_detl_c.sndrcvflag,
			:chnl_tx_detl_c.ac_no,
			:chnl_tx_detl_c.ac_name,
			:chnl_tx_detl_c.add_ind,
			:chnl_tx_detl_c.ct_ind,
			:chnl_tx_detl_c.tx_amt,
			:chnl_tx_detl_c.df_br_no,
			:chnl_tx_detl_c.df_ac_no,
			:chnl_tx_detl_c.df_name,
			:chnl_tx_detl_c.df_id_type,
			:chnl_tx_detl_c.df_id_no,
			:chnl_tx_detl_c.txnum,
			:chnl_tx_detl_c.yw_type,
			:chnl_tx_detl_c.dz_ind,
			:chnl_tx_detl_c.filler1,
			:chnl_tx_detl_c.filler2,
			:chnl_tx_detl_c.filler3,
			:chnl_tx_detl_c.filler4);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT chnl_tx_detl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT chnl_tx_detl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
