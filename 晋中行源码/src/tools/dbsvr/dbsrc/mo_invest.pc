#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"mo_invest_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int mo_invest_con ( struct mo_invest_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct mo_invest_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->pact_no);
	zip_tail(ps->bkrl_code);
	zip_tail(ps->br_no);
	zip_tail(ps->invest_type);
	zip_tail(ps->ticket_type);
	zip_tail(ps->intst_type);
	zip_tail(ps->sts);
	zip_tail(ps->tel);
	zip_tail(ps->chk);
	zip_tail(ps->auth);
}
int Mo_invest_Debug(struct mo_invest_c *ps){
	vtcp_log("mo_invest_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("mo_invest_c.pact_no=[%s]\n",ps->pact_no);
	vtcp_log("mo_invest_c.bkrl_code=[%s]\n",ps->bkrl_code);
	vtcp_log("mo_invest_c.br_no=[%s]\n",ps->br_no);
	vtcp_log("mo_invest_c.ac_id=[%ld]\n",ps->ac_id);
	vtcp_log("mo_invest_c.lx_ac_id=[%ld]\n",ps->lx_ac_id);
	vtcp_log("mo_invest_c.invest_type=[%s]\n",ps->invest_type);
	vtcp_log("mo_invest_c.ticket_type=[%s]\n",ps->ticket_type);
	vtcp_log("mo_invest_c.intst_type=[%s]\n",ps->intst_type);
	vtcp_log("mo_invest_c.cnt=[%ld]\n",ps->cnt);
	vtcp_log("mo_invest_c.isuue_date=[%ld]\n",ps->isuue_date);
	vtcp_log("mo_invest_c.term=[%ld]\n",ps->term);
	vtcp_log("mo_invest_c.par_bal=[%f]\n",ps->par_bal);
	vtcp_log("mo_invest_c.buy_amt=[%f]\n",ps->buy_amt);
	vtcp_log("mo_invest_c.abate_ac_id=[%ld]\n",ps->abate_ac_id);
	vtcp_log("mo_invest_c.abate_amt=[%f]\n",ps->abate_amt);
	vtcp_log("mo_invest_c.overflow_ac_id=[%ld]\n",ps->overflow_ac_id);
	vtcp_log("mo_invest_c.overflow_amt=[%f]\n",ps->overflow_amt);
	vtcp_log("mo_invest_c.pre_intst=[%f]\n",ps->pre_intst);
	vtcp_log("mo_invest_c.buy_date=[%ld]\n",ps->buy_date);
	vtcp_log("mo_invest_c.rate=[%f]\n",ps->rate);
	vtcp_log("mo_invest_c.flt_rate=[%f]\n",ps->flt_rate);
	vtcp_log("mo_invest_c.mtr_date=[%ld]\n",ps->mtr_date);
	vtcp_log("mo_invest_c.sol_amt=[%f]\n",ps->sol_amt);
	vtcp_log("mo_invest_c.sol_date=[%ld]\n",ps->sol_date);
	vtcp_log("mo_invest_c.singl_feeval=[%f]\n",ps->singl_feeval);
	vtcp_log("mo_invest_c.sol_feeval=[%f]\n",ps->sol_feeval);
	vtcp_log("mo_invest_c.wrk_date=[%ld]\n",ps->wrk_date);
	vtcp_log("mo_invest_c.trace_no=[%ld]\n",ps->trace_no);
	vtcp_log("mo_invest_c.sts=[%s]\n",ps->sts);
	vtcp_log("mo_invest_c.tel=[%s]\n",ps->tel);
	vtcp_log("mo_invest_c.chk=[%s]\n",ps->chk);
	vtcp_log("mo_invest_c.auth=[%s]\n",ps->auth);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Mo_invest_Sel(reply,mo_invest_c,fmtstr,va_alist)
char    *reply;
struct  mo_invest_c *mo_invest_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Mo_invest_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Mo_invest_Fet_Sel( mo_invest_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Mo_invest_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Mo_invest_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,mo_invest.* FROM mo_invest WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mo_invest_sel FROM :comm;
	EXEC SQL DECLARE sel_mo_invest CURSOR FOR mo_invest_sel;

	EXEC SQL OPEN sel_mo_invest;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN mo_invest error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_invest_Fet_Sel ( struct mo_invest_c *mo_invest_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_mo_invest INTO :mo_invest_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch mo_invest error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch mo_invest finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(mo_invest_c);

	return 0;
}

int Mo_invest_Clo_Sel (){
	EXEC SQL CLOSE sel_mo_invest;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Mo_invest_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,mo_invest.* FROM mo_invest WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mo_invest_upd FROM :comm;

	EXEC SQL DECLARE upd_mo_invest CURSOR FOR mo_invest_upd;

	EXEC SQL OPEN upd_mo_invest;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open mo_invest error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_invest_Fet_Upd( struct mo_invest_c *mo_invest_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_mo_invest INTO :mo_invest_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd mo_invest error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH mo_invest finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(mo_invest_c);

	return 0;
}

int Mo_invest_Upd_Upd( struct mo_invest_c mo_invest_c , char * reply){
	int ret;

	EXEC SQL UPDATE mo_invest SET pact_no=:mo_invest_c.pact_no,
			bkrl_code=:mo_invest_c.bkrl_code,
			br_no=:mo_invest_c.br_no,
			ac_id=:mo_invest_c.ac_id,
			lx_ac_id=:mo_invest_c.lx_ac_id,
			invest_type=:mo_invest_c.invest_type,
			ticket_type=:mo_invest_c.ticket_type,
			intst_type=:mo_invest_c.intst_type,
			cnt=:mo_invest_c.cnt,
			isuue_date=:mo_invest_c.isuue_date,
			term=:mo_invest_c.term,
			par_bal=:mo_invest_c.par_bal,
			buy_amt=:mo_invest_c.buy_amt,
			abate_ac_id=:mo_invest_c.abate_ac_id,
			abate_amt=:mo_invest_c.abate_amt,
			overflow_ac_id=:mo_invest_c.overflow_ac_id,
			overflow_amt=:mo_invest_c.overflow_amt,
			pre_intst=:mo_invest_c.pre_intst,
			buy_date=:mo_invest_c.buy_date,
			rate=:mo_invest_c.rate,
			flt_rate=:mo_invest_c.flt_rate,
			mtr_date=:mo_invest_c.mtr_date,
			sol_amt=:mo_invest_c.sol_amt,
			sol_date=:mo_invest_c.sol_date,
			singl_feeval=:mo_invest_c.singl_feeval,
			sol_feeval=:mo_invest_c.sol_feeval,
			wrk_date=:mo_invest_c.wrk_date,
			trace_no=:mo_invest_c.trace_no,
			sts=:mo_invest_c.sts,
			tel=:mo_invest_c.tel,
			chk=:mo_invest_c.chk,
			auth=:mo_invest_c.auth
	WHERE rowid=:mo_invest_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE mo_invest error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Mo_invest_Del_Upd(struct mo_invest_c mo_invest_c , char * reply  ){

	EXEC SQL DELETE FROM mo_invest WHERE rowid=:mo_invest_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE mo_invest error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_invest_Clo_Upd( ){
	EXEC SQL CLOSE upd_mo_invest;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Mo_invest_Ins( struct mo_invest_c mo_invest_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO mo_invest VALUES (:mo_invest_c.pact_no,
			:mo_invest_c.bkrl_code,
			:mo_invest_c.br_no,
			:mo_invest_c.ac_id,
			:mo_invest_c.lx_ac_id,
			:mo_invest_c.invest_type,
			:mo_invest_c.ticket_type,
			:mo_invest_c.intst_type,
			:mo_invest_c.cnt,
			:mo_invest_c.isuue_date,
			:mo_invest_c.term,
			:mo_invest_c.par_bal,
			:mo_invest_c.buy_amt,
			:mo_invest_c.abate_ac_id,
			:mo_invest_c.abate_amt,
			:mo_invest_c.overflow_ac_id,
			:mo_invest_c.overflow_amt,
			:mo_invest_c.pre_intst,
			:mo_invest_c.buy_date,
			:mo_invest_c.rate,
			:mo_invest_c.flt_rate,
			:mo_invest_c.mtr_date,
			:mo_invest_c.sol_amt,
			:mo_invest_c.sol_date,
			:mo_invest_c.singl_feeval,
			:mo_invest_c.sol_feeval,
			:mo_invest_c.wrk_date,
			:mo_invest_c.trace_no,
			:mo_invest_c.sts,
			:mo_invest_c.tel,
			:mo_invest_c.chk,
			:mo_invest_c.auth);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT mo_invest error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT mo_invest error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
