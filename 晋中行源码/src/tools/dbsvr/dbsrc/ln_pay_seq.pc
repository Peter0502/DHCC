#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"ln_pay_seq_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int ln_pay_seq_con ( struct ln_pay_seq_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct ln_pay_seq_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->pay_seq_code);
	zip_tail(ps->pay_seqn);
	zip_tail(ps->deal_mode);
}
int Ln_pay_seq_Debug(struct ln_pay_seq_c *ps){
	vtcp_log("ln_pay_seq_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("ln_pay_seq_c.pay_seq_code=[%s]\n",ps->pay_seq_code);
	vtcp_log("ln_pay_seq_c.pay_seqn=[%s]\n",ps->pay_seqn);
	vtcp_log("ln_pay_seq_c.deal_mode=[%s]\n",ps->deal_mode);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Ln_pay_seq_Sel(reply,ln_pay_seq_c,fmtstr,va_alist)
char    *reply;
struct  ln_pay_seq_c *ln_pay_seq_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Ln_pay_seq_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Ln_pay_seq_Fet_Sel( ln_pay_seq_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Ln_pay_seq_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Ln_pay_seq_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,ln_pay_seq.* FROM ln_pay_seq WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE ln_pay_seq_sel FROM :comm;
	EXEC SQL DECLARE sel_ln_pay_seq CURSOR FOR ln_pay_seq_sel;

	EXEC SQL OPEN sel_ln_pay_seq;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN ln_pay_seq error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Ln_pay_seq_Fet_Sel ( struct ln_pay_seq_c *ln_pay_seq_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_ln_pay_seq INTO :ln_pay_seq_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch ln_pay_seq error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch ln_pay_seq finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(ln_pay_seq_c);

	return 0;
}

int Ln_pay_seq_Clo_Sel (){
	EXEC SQL CLOSE sel_ln_pay_seq;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Ln_pay_seq_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,ln_pay_seq.* FROM ln_pay_seq WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE ln_pay_seq_upd FROM :comm;

	EXEC SQL DECLARE upd_ln_pay_seq CURSOR FOR ln_pay_seq_upd;

	EXEC SQL OPEN upd_ln_pay_seq;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open ln_pay_seq error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Ln_pay_seq_Fet_Upd( struct ln_pay_seq_c *ln_pay_seq_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_ln_pay_seq INTO :ln_pay_seq_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd ln_pay_seq error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH ln_pay_seq finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(ln_pay_seq_c);

	return 0;
}

int Ln_pay_seq_Upd_Upd( struct ln_pay_seq_c ln_pay_seq_c , char * reply){
	int ret;

	EXEC SQL UPDATE ln_pay_seq SET pay_seq_code=:ln_pay_seq_c.pay_seq_code,
			pay_seqn=:ln_pay_seq_c.pay_seqn,
			deal_mode=:ln_pay_seq_c.deal_mode
	WHERE rowid=:ln_pay_seq_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE ln_pay_seq error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Ln_pay_seq_Del_Upd(struct ln_pay_seq_c ln_pay_seq_c , char * reply  ){

	EXEC SQL DELETE FROM ln_pay_seq WHERE rowid=:ln_pay_seq_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE ln_pay_seq error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Ln_pay_seq_Clo_Upd( ){
	EXEC SQL CLOSE upd_ln_pay_seq;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Ln_pay_seq_Ins( struct ln_pay_seq_c ln_pay_seq_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO ln_pay_seq VALUES (:ln_pay_seq_c.pay_seq_code,
			:ln_pay_seq_c.pay_seqn,
			:ln_pay_seq_c.deal_mode);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT ln_pay_seq error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT ln_pay_seq error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
