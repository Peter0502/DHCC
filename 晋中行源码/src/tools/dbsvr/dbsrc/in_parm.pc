#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"in_parm_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int in_parm_con ( struct in_parm_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct in_parm_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->prdt_no);
	zip_tail(ps->acc_hrt);
	zip_tail(ps->cur_no);
	zip_tail(ps->prdt_mo);
	zip_tail(ps->amt_dc);
	zip_tail(ps->term_type);
	zip_tail(ps->rate_no);
	zip_tail(ps->fine_rate_no);
	zip_tail(ps->cal_day_type);
	zip_tail(ps->intst_ind);
	zip_tail(ps->intst_knd);
	zip_tail(ps->acm_type);
	zip_tail(ps->od_ind);
	zip_tail(ps->dc_code);
	zip_tail(ps->shar_ind);
	zip_tail(ps->shar_term_type);
	zip_tail(ps->over_date_type);
	zip_tail(ps->invst_type);
	zip_tail(ps->pre_term);
	zip_tail(ps->spe_ind);
}
int In_parm_Debug(struct in_parm_c *ps){
	vtcp_log("in_parm_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("in_parm_c.prdt_no=[%s]\n",ps->prdt_no);
	vtcp_log("in_parm_c.acc_hrt=[%s]\n",ps->acc_hrt);
	vtcp_log("in_parm_c.cur_no=[%s]\n",ps->cur_no);
	vtcp_log("in_parm_c.prdt_mo=[%s]\n",ps->prdt_mo);
	vtcp_log("in_parm_c.amt_dc=[%s]\n",ps->amt_dc);
	vtcp_log("in_parm_c.star_date=[%ld]\n",ps->star_date);
	vtcp_log("in_parm_c.stop_date=[%ld]\n",ps->stop_date);
	vtcp_log("in_parm_c.min_amt=[%f]\n",ps->min_amt);
	vtcp_log("in_parm_c.max_amt=[%f]\n",ps->max_amt);
	vtcp_log("in_parm_c.min_term=[%ld]\n",ps->min_term);
	vtcp_log("in_parm_c.max_term=[%ld]\n",ps->max_term);
	vtcp_log("in_parm_c.term_type=[%s]\n",ps->term_type);
	vtcp_log("in_parm_c.rate_no=[%s]\n",ps->rate_no);
	vtcp_log("in_parm_c.fine_rate_no=[%s]\n",ps->fine_rate_no);
	vtcp_log("in_parm_c.min_flot_rate=[%f]\n",ps->min_flot_rate);
	vtcp_log("in_parm_c.max_flot_rate=[%f]\n",ps->max_flot_rate);
	vtcp_log("in_parm_c.cal_day_type=[%s]\n",ps->cal_day_type);
	vtcp_log("in_parm_c.intst_ind=[%s]\n",ps->intst_ind);
	vtcp_log("in_parm_c.intst_knd=[%s]\n",ps->intst_knd);
	vtcp_log("in_parm_c.acm_type=[%s]\n",ps->acm_type);
	vtcp_log("in_parm_c.intst_mon=[%ld]\n",ps->intst_mon);
	vtcp_log("in_parm_c.intst_date=[%ld]\n",ps->intst_date);
	vtcp_log("in_parm_c.od_ind=[%s]\n",ps->od_ind);
	vtcp_log("in_parm_c.od_amt=[%f]\n",ps->od_amt);
	vtcp_log("in_parm_c.dc_code=[%s]\n",ps->dc_code);
	vtcp_log("in_parm_c.shar_ind=[%s]\n",ps->shar_ind);
	vtcp_log("in_parm_c.shar_term=[%ld]\n",ps->shar_term);
	vtcp_log("in_parm_c.shar_term_type=[%s]\n",ps->shar_term_type);
	vtcp_log("in_parm_c.over_date_type=[%s]\n",ps->over_date_type);
	vtcp_log("in_parm_c.invst_type=[%s]\n",ps->invst_type);
	vtcp_log("in_parm_c.pre_term=[%s]\n",ps->pre_term);
	vtcp_log("in_parm_c.spe_ind=[%s]\n",ps->spe_ind);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int In_parm_Sel(reply,in_parm_c,fmtstr,va_alist)
char    *reply;
struct  in_parm_c *in_parm_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = In_parm_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = In_parm_Fet_Sel( in_parm_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	In_parm_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int In_parm_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,in_parm.* FROM in_parm WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE in_parm_sel FROM :comm;
	EXEC SQL DECLARE sel_in_parm CURSOR FOR in_parm_sel;

	EXEC SQL OPEN sel_in_parm;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN in_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int In_parm_Fet_Sel ( struct in_parm_c *in_parm_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_in_parm INTO :in_parm_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch in_parm error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch in_parm finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(in_parm_c);

	return 0;
}

int In_parm_Clo_Sel (){
	EXEC SQL CLOSE sel_in_parm;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int In_parm_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,in_parm.* FROM in_parm WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE in_parm_upd FROM :comm;

	EXEC SQL DECLARE upd_in_parm CURSOR FOR in_parm_upd;

	EXEC SQL OPEN upd_in_parm;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open in_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int In_parm_Fet_Upd( struct in_parm_c *in_parm_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_in_parm INTO :in_parm_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd in_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH in_parm finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(in_parm_c);

	return 0;
}

int In_parm_Upd_Upd( struct in_parm_c in_parm_c , char * reply){
	int ret;

	EXEC SQL UPDATE in_parm SET prdt_no=:in_parm_c.prdt_no,
			acc_hrt=:in_parm_c.acc_hrt,
			cur_no=:in_parm_c.cur_no,
			prdt_mo=:in_parm_c.prdt_mo,
			amt_dc=:in_parm_c.amt_dc,
			star_date=:in_parm_c.star_date,
			stop_date=:in_parm_c.stop_date,
			min_amt=:in_parm_c.min_amt,
			max_amt=:in_parm_c.max_amt,
			min_term=:in_parm_c.min_term,
			max_term=:in_parm_c.max_term,
			term_type=:in_parm_c.term_type,
			rate_no=:in_parm_c.rate_no,
			fine_rate_no=:in_parm_c.fine_rate_no,
			min_flot_rate=:in_parm_c.min_flot_rate,
			max_flot_rate=:in_parm_c.max_flot_rate,
			cal_day_type=:in_parm_c.cal_day_type,
			intst_ind=:in_parm_c.intst_ind,
			intst_knd=:in_parm_c.intst_knd,
			acm_type=:in_parm_c.acm_type,
			intst_mon=:in_parm_c.intst_mon,
			intst_date=:in_parm_c.intst_date,
			od_ind=:in_parm_c.od_ind,
			od_amt=:in_parm_c.od_amt,
			dc_code=:in_parm_c.dc_code,
			shar_ind=:in_parm_c.shar_ind,
			shar_term=:in_parm_c.shar_term,
			shar_term_type=:in_parm_c.shar_term_type,
			over_date_type=:in_parm_c.over_date_type,
			invst_type=:in_parm_c.invst_type,
			pre_term=:in_parm_c.pre_term,
			spe_ind=:in_parm_c.spe_ind
	WHERE rowid=:in_parm_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE in_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int In_parm_Del_Upd(struct in_parm_c in_parm_c , char * reply  ){

	EXEC SQL DELETE FROM in_parm WHERE rowid=:in_parm_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE in_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int In_parm_Clo_Upd( ){
	EXEC SQL CLOSE upd_in_parm;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int In_parm_Ins( struct in_parm_c in_parm_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO in_parm VALUES (:in_parm_c.prdt_no,
			:in_parm_c.acc_hrt,
			:in_parm_c.cur_no,
			:in_parm_c.prdt_mo,
			:in_parm_c.amt_dc,
			:in_parm_c.star_date,
			:in_parm_c.stop_date,
			:in_parm_c.min_amt,
			:in_parm_c.max_amt,
			:in_parm_c.min_term,
			:in_parm_c.max_term,
			:in_parm_c.term_type,
			:in_parm_c.rate_no,
			:in_parm_c.fine_rate_no,
			:in_parm_c.min_flot_rate,
			:in_parm_c.max_flot_rate,
			:in_parm_c.cal_day_type,
			:in_parm_c.intst_ind,
			:in_parm_c.intst_knd,
			:in_parm_c.acm_type,
			:in_parm_c.intst_mon,
			:in_parm_c.intst_date,
			:in_parm_c.od_ind,
			:in_parm_c.od_amt,
			:in_parm_c.dc_code,
			:in_parm_c.shar_ind,
			:in_parm_c.shar_term,
			:in_parm_c.shar_term_type,
			:in_parm_c.over_date_type,
			:in_parm_c.invst_type,
			:in_parm_c.pre_term,
			:in_parm_c.spe_ind);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT in_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT in_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
