#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"mbfereplymsg_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int mbfereplymsg_con ( struct mbfereplymsg_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct mbfereplymsg_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->rplymsgno);
	zip_tail(ps->origquerymsgno);
	zip_tail(ps->odficenter);
	zip_tail(ps->isdficode);
	zip_tail(ps->rplybkcode);
	zip_tail(ps->rdficenter);
	zip_tail(ps->origqueryisdficode);
	zip_tail(ps->origquerybkcode);
	zip_tail(ps->origodficode);
	zip_tail(ps->origrdficode);
	zip_tail(ps->origtxtype);
	zip_tail(ps->origtxssno);
	zip_tail(ps->rplycontent);
	zip_tail(ps->rplyuser);
	zip_tail(ps->procstate);
	zip_tail(ps->statetime);
	zip_tail(ps->errcode);
	zip_tail(ps->errdesc);
	zip_tail(ps->rplysource);
}
int Mbfereplymsg_Debug(struct mbfereplymsg_c *ps){
	vtcp_log("mbfereplymsg_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("mbfereplymsg_c.rplymsgno=[%s]\n",ps->rplymsgno);
	vtcp_log("mbfereplymsg_c.rplydate=[%ld]\n",ps->rplydate);
	vtcp_log("mbfereplymsg_c.origquerymsgno=[%s]\n",ps->origquerymsgno);
	vtcp_log("mbfereplymsg_c.odficenter=[%s]\n",ps->odficenter);
	vtcp_log("mbfereplymsg_c.isdficode=[%s]\n",ps->isdficode);
	vtcp_log("mbfereplymsg_c.rplybkcode=[%s]\n",ps->rplybkcode);
	vtcp_log("mbfereplymsg_c.rdficenter=[%s]\n",ps->rdficenter);
	vtcp_log("mbfereplymsg_c.origqueryisdficode=[%s]\n",ps->origqueryisdficode);
	vtcp_log("mbfereplymsg_c.origquerybkcode=[%s]\n",ps->origquerybkcode);
	vtcp_log("mbfereplymsg_c.origquerydate=[%ld]\n",ps->origquerydate);
	vtcp_log("mbfereplymsg_c.origconsigndate=[%ld]\n",ps->origconsigndate);
	vtcp_log("mbfereplymsg_c.origodficode=[%s]\n",ps->origodficode);
	vtcp_log("mbfereplymsg_c.origrdficode=[%s]\n",ps->origrdficode);
	vtcp_log("mbfereplymsg_c.origtxtype=[%s]\n",ps->origtxtype);
	vtcp_log("mbfereplymsg_c.origtxssno=[%s]\n",ps->origtxssno);
	vtcp_log("mbfereplymsg_c.origamount=[%f]\n",ps->origamount);
	vtcp_log("mbfereplymsg_c.rplycontent=[%s]\n",ps->rplycontent);
	vtcp_log("mbfereplymsg_c.rplyuser=[%s]\n",ps->rplyuser);
	vtcp_log("mbfereplymsg_c.procstate=[%s]\n",ps->procstate);
	vtcp_log("mbfereplymsg_c.statetime=[%s]\n",ps->statetime);
	vtcp_log("mbfereplymsg_c.errcode=[%s]\n",ps->errcode);
	vtcp_log("mbfereplymsg_c.errdesc=[%s]\n",ps->errdesc);
	vtcp_log("mbfereplymsg_c.printno=[%ld]\n",ps->printno);
	vtcp_log("mbfereplymsg_c.rplysource=[%s]\n",ps->rplysource);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Mbfereplymsg_Sel(reply,mbfereplymsg_c,fmtstr,va_alist)
char    *reply;
struct  mbfereplymsg_c *mbfereplymsg_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Mbfereplymsg_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Mbfereplymsg_Fet_Sel( mbfereplymsg_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Mbfereplymsg_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Mbfereplymsg_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,mbfereplymsg.* FROM mbfereplymsg WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mbfereplymsg_sel FROM :comm;
	EXEC SQL DECLARE sel_mbfereplymsg CURSOR FOR mbfereplymsg_sel;

	EXEC SQL OPEN sel_mbfereplymsg;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN mbfereplymsg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mbfereplymsg_Fet_Sel ( struct mbfereplymsg_c *mbfereplymsg_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_mbfereplymsg INTO :mbfereplymsg_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch mbfereplymsg error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch mbfereplymsg finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(mbfereplymsg_c);

	return 0;
}

int Mbfereplymsg_Clo_Sel (){
	EXEC SQL CLOSE sel_mbfereplymsg;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Mbfereplymsg_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,mbfereplymsg.* FROM mbfereplymsg WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mbfereplymsg_upd FROM :comm;

	EXEC SQL DECLARE upd_mbfereplymsg CURSOR FOR mbfereplymsg_upd;

	EXEC SQL OPEN upd_mbfereplymsg;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open mbfereplymsg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mbfereplymsg_Fet_Upd( struct mbfereplymsg_c *mbfereplymsg_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_mbfereplymsg INTO :mbfereplymsg_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd mbfereplymsg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH mbfereplymsg finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(mbfereplymsg_c);

	return 0;
}

int Mbfereplymsg_Upd_Upd( struct mbfereplymsg_c mbfereplymsg_c , char * reply){
	int ret;

	EXEC SQL UPDATE mbfereplymsg SET rplymsgno=:mbfereplymsg_c.rplymsgno,
			rplydate=:mbfereplymsg_c.rplydate,
			origquerymsgno=:mbfereplymsg_c.origquerymsgno,
			odficenter=:mbfereplymsg_c.odficenter,
			isdficode=:mbfereplymsg_c.isdficode,
			rplybkcode=:mbfereplymsg_c.rplybkcode,
			rdficenter=:mbfereplymsg_c.rdficenter,
			origqueryisdficode=:mbfereplymsg_c.origqueryisdficode,
			origquerybkcode=:mbfereplymsg_c.origquerybkcode,
			origquerydate=:mbfereplymsg_c.origquerydate,
			origconsigndate=:mbfereplymsg_c.origconsigndate,
			origodficode=:mbfereplymsg_c.origodficode,
			origrdficode=:mbfereplymsg_c.origrdficode,
			origtxtype=:mbfereplymsg_c.origtxtype,
			origtxssno=:mbfereplymsg_c.origtxssno,
			origamount=:mbfereplymsg_c.origamount,
			rplycontent=:mbfereplymsg_c.rplycontent,
			rplyuser=:mbfereplymsg_c.rplyuser,
			procstate=:mbfereplymsg_c.procstate,
			statetime=:mbfereplymsg_c.statetime,
			errcode=:mbfereplymsg_c.errcode,
			errdesc=:mbfereplymsg_c.errdesc,
			printno=:mbfereplymsg_c.printno,
			rplysource=:mbfereplymsg_c.rplysource
	WHERE rowid=:mbfereplymsg_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE mbfereplymsg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Mbfereplymsg_Del_Upd(struct mbfereplymsg_c mbfereplymsg_c , char * reply  ){

	EXEC SQL DELETE FROM mbfereplymsg WHERE rowid=:mbfereplymsg_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE mbfereplymsg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mbfereplymsg_Clo_Upd( ){
	EXEC SQL CLOSE upd_mbfereplymsg;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Mbfereplymsg_Ins( struct mbfereplymsg_c mbfereplymsg_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO mbfereplymsg VALUES (:mbfereplymsg_c.rplymsgno,
			:mbfereplymsg_c.rplydate,
			:mbfereplymsg_c.origquerymsgno,
			:mbfereplymsg_c.odficenter,
			:mbfereplymsg_c.isdficode,
			:mbfereplymsg_c.rplybkcode,
			:mbfereplymsg_c.rdficenter,
			:mbfereplymsg_c.origqueryisdficode,
			:mbfereplymsg_c.origquerybkcode,
			:mbfereplymsg_c.origquerydate,
			:mbfereplymsg_c.origconsigndate,
			:mbfereplymsg_c.origodficode,
			:mbfereplymsg_c.origrdficode,
			:mbfereplymsg_c.origtxtype,
			:mbfereplymsg_c.origtxssno,
			:mbfereplymsg_c.origamount,
			:mbfereplymsg_c.rplycontent,
			:mbfereplymsg_c.rplyuser,
			:mbfereplymsg_c.procstate,
			:mbfereplymsg_c.statetime,
			:mbfereplymsg_c.errcode,
			:mbfereplymsg_c.errdesc,
			:mbfereplymsg_c.printno,
			:mbfereplymsg_c.rplysource);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT mbfereplymsg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT mbfereplymsg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
