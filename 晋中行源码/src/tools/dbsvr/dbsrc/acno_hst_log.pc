#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"acno_hst_log_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int acno_hst_log_con ( struct acno_hst_log_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct acno_hst_log_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->ac_type);
	zip_tail(ps->br_no);
	zip_tail(ps->note_type);
	zip_tail(ps->note_no);
	zip_tail(ps->tel);
	zip_tail(ps->dc_ind);
	zip_tail(ps->print_flag);
	zip_tail(ps->brf);
	zip_tail(ps->filler);
	zip_tail(ps->filler2);
}
int Acno_hst_log_Debug(struct acno_hst_log_c *ps){
	vtcp_log("acno_hst_log_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("acno_hst_log_c.ac_type=[%s]\n",ps->ac_type);
	vtcp_log("acno_hst_log_c.ac_id=[%ld]\n",ps->ac_id);
	vtcp_log("acno_hst_log_c.ac_seqn=[%ld]\n",ps->ac_seqn);
	vtcp_log("acno_hst_log_c.hst_cnt=[%ld]\n",ps->hst_cnt);
	vtcp_log("acno_hst_log_c.tx_date=[%ld]\n",ps->tx_date);
	vtcp_log("acno_hst_log_c.br_no=[%s]\n",ps->br_no);
	vtcp_log("acno_hst_log_c.note_type=[%s]\n",ps->note_type);
	vtcp_log("acno_hst_log_c.note_no=[%s]\n",ps->note_no);
	vtcp_log("acno_hst_log_c.tel=[%s]\n",ps->tel);
	vtcp_log("acno_hst_log_c.tx_amt=[%f]\n",ps->tx_amt);
	vtcp_log("acno_hst_log_c.bal=[%f]\n",ps->bal);
	vtcp_log("acno_hst_log_c.dc_ind=[%s]\n",ps->dc_ind);
	vtcp_log("acno_hst_log_c.print_flag=[%s]\n",ps->print_flag);
	vtcp_log("acno_hst_log_c.pagecnt=[%ld]\n",ps->pagecnt);
	vtcp_log("acno_hst_log_c.brf=[%s]\n",ps->brf);
	vtcp_log("acno_hst_log_c.filler=[%s]\n",ps->filler);
	vtcp_log("acno_hst_log_c.filler2=[%s]\n",ps->filler2);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Acno_hst_log_Sel(reply,acno_hst_log_c,fmtstr,va_alist)
char    *reply;
struct  acno_hst_log_c *acno_hst_log_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Acno_hst_log_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Acno_hst_log_Fet_Sel( acno_hst_log_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Acno_hst_log_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Acno_hst_log_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,acno_hst_log.* FROM acno_hst_log WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE acno_hst_log_sel FROM :comm;
	EXEC SQL DECLARE sel_acno_hst_log CURSOR FOR acno_hst_log_sel;

	EXEC SQL OPEN sel_acno_hst_log;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN acno_hst_log error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Acno_hst_log_Fet_Sel ( struct acno_hst_log_c *acno_hst_log_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_acno_hst_log INTO :acno_hst_log_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch acno_hst_log error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch acno_hst_log finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(acno_hst_log_c);

	return 0;
}

int Acno_hst_log_Clo_Sel (){
	EXEC SQL CLOSE sel_acno_hst_log;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Acno_hst_log_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,acno_hst_log.* FROM acno_hst_log WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE acno_hst_log_upd FROM :comm;

	EXEC SQL DECLARE upd_acno_hst_log CURSOR FOR acno_hst_log_upd;

	EXEC SQL OPEN upd_acno_hst_log;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open acno_hst_log error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Acno_hst_log_Fet_Upd( struct acno_hst_log_c *acno_hst_log_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_acno_hst_log INTO :acno_hst_log_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd acno_hst_log error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH acno_hst_log finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(acno_hst_log_c);

	return 0;
}

int Acno_hst_log_Upd_Upd( struct acno_hst_log_c acno_hst_log_c , char * reply){
	int ret;

	EXEC SQL UPDATE acno_hst_log SET ac_type=:acno_hst_log_c.ac_type,
			ac_id=:acno_hst_log_c.ac_id,
			ac_seqn=:acno_hst_log_c.ac_seqn,
			hst_cnt=:acno_hst_log_c.hst_cnt,
			tx_date=:acno_hst_log_c.tx_date,
			br_no=:acno_hst_log_c.br_no,
			note_type=:acno_hst_log_c.note_type,
			note_no=:acno_hst_log_c.note_no,
			tel=:acno_hst_log_c.tel,
			tx_amt=:acno_hst_log_c.tx_amt,
			bal=:acno_hst_log_c.bal,
			dc_ind=:acno_hst_log_c.dc_ind,
			print_flag=:acno_hst_log_c.print_flag,
			pagecnt=:acno_hst_log_c.pagecnt,
			brf=:acno_hst_log_c.brf,
			filler=:acno_hst_log_c.filler,
			filler2=:acno_hst_log_c.filler2
	WHERE rowid=:acno_hst_log_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE acno_hst_log error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Acno_hst_log_Del_Upd(struct acno_hst_log_c acno_hst_log_c , char * reply  ){

	EXEC SQL DELETE FROM acno_hst_log WHERE rowid=:acno_hst_log_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE acno_hst_log error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Acno_hst_log_Clo_Upd( ){
	EXEC SQL CLOSE upd_acno_hst_log;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Acno_hst_log_Ins( struct acno_hst_log_c acno_hst_log_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO acno_hst_log VALUES (:acno_hst_log_c.ac_type,
			:acno_hst_log_c.ac_id,
			:acno_hst_log_c.ac_seqn,
			:acno_hst_log_c.hst_cnt,
			:acno_hst_log_c.tx_date,
			:acno_hst_log_c.br_no,
			:acno_hst_log_c.note_type,
			:acno_hst_log_c.note_no,
			:acno_hst_log_c.tel,
			:acno_hst_log_c.tx_amt,
			:acno_hst_log_c.bal,
			:acno_hst_log_c.dc_ind,
			:acno_hst_log_c.print_flag,
			:acno_hst_log_c.pagecnt,
			:acno_hst_log_c.brf,
			:acno_hst_log_c.filler,
			:acno_hst_log_c.filler2);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT acno_hst_log error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT acno_hst_log error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
