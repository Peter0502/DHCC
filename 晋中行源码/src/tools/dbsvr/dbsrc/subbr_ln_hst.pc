#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"subbr_ln_hst_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int subbr_ln_hst_con ( struct subbr_ln_hst_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct subbr_ln_hst_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->up_br_no);
	zip_tail(ps->opn_br_no);
	zip_tail(ps->acc_sts);
	zip_tail(ps->client_mgr);
}
int Subbr_ln_hst_Debug(struct subbr_ln_hst_c *ps){
	vtcp_log("subbr_ln_hst_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("subbr_ln_hst_c.up_br_no=[%s]\n",ps->up_br_no);
	vtcp_log("subbr_ln_hst_c.opn_br_no=[%s]\n",ps->opn_br_no);
	vtcp_log("subbr_ln_hst_c.ex_year=[%ld]\n",ps->ex_year);
	vtcp_log("subbr_ln_hst_c.ex_month=[%ld]\n",ps->ex_month);
	vtcp_log("subbr_ln_hst_c.ac_id=[%ld]\n",ps->ac_id);
	vtcp_log("subbr_ln_hst_c.ac_seqn=[%ld]\n",ps->ac_seqn);
	vtcp_log("subbr_ln_hst_c.acc_sts=[%s]\n",ps->acc_sts);
	vtcp_log("subbr_ln_hst_c.monthb_bal=[%f]\n",ps->monthb_bal);
	vtcp_log("subbr_ln_hst_c.bal=[%f]\n",ps->bal);
	vtcp_log("subbr_ln_hst_c.mon_increment=[%f]\n",ps->mon_increment);
	vtcp_log("subbr_ln_hst_c.month_addbal=[%f]\n",ps->month_addbal);
	vtcp_log("subbr_ln_hst_c.season_addbal=[%f]\n",ps->season_addbal);
	vtcp_log("subbr_ln_hst_c.year_addbal=[%f]\n",ps->year_addbal);
	vtcp_log("subbr_ln_hst_c.true_accrual=[%f]\n",ps->true_accrual);
	vtcp_log("subbr_ln_hst_c.accrual_tadd=[%f]\n",ps->accrual_tadd);
	vtcp_log("subbr_ln_hst_c.jaccrual=[%f]\n",ps->jaccrual);
	vtcp_log("subbr_ln_hst_c.client_mgr=[%s]\n",ps->client_mgr);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Subbr_ln_hst_Sel(reply,subbr_ln_hst_c,fmtstr,va_alist)
char    *reply;
struct  subbr_ln_hst_c *subbr_ln_hst_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Subbr_ln_hst_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Subbr_ln_hst_Fet_Sel( subbr_ln_hst_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Subbr_ln_hst_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Subbr_ln_hst_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,subbr_ln_hst.* FROM subbr_ln_hst WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE subbr_ln_hst_sel FROM :comm;
	EXEC SQL DECLARE sel_subbr_ln_hst CURSOR FOR subbr_ln_hst_sel;

	EXEC SQL OPEN sel_subbr_ln_hst;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN subbr_ln_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Subbr_ln_hst_Fet_Sel ( struct subbr_ln_hst_c *subbr_ln_hst_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_subbr_ln_hst INTO :subbr_ln_hst_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch subbr_ln_hst error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch subbr_ln_hst finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(subbr_ln_hst_c);

	return 0;
}

int Subbr_ln_hst_Clo_Sel (){
	EXEC SQL CLOSE sel_subbr_ln_hst;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Subbr_ln_hst_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,subbr_ln_hst.* FROM subbr_ln_hst WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE subbr_ln_hst_upd FROM :comm;

	EXEC SQL DECLARE upd_subbr_ln_hst CURSOR FOR subbr_ln_hst_upd;

	EXEC SQL OPEN upd_subbr_ln_hst;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open subbr_ln_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Subbr_ln_hst_Fet_Upd( struct subbr_ln_hst_c *subbr_ln_hst_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_subbr_ln_hst INTO :subbr_ln_hst_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd subbr_ln_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH subbr_ln_hst finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(subbr_ln_hst_c);

	return 0;
}

int Subbr_ln_hst_Upd_Upd( struct subbr_ln_hst_c subbr_ln_hst_c , char * reply){
	int ret;

	EXEC SQL UPDATE subbr_ln_hst SET up_br_no=:subbr_ln_hst_c.up_br_no,
			opn_br_no=:subbr_ln_hst_c.opn_br_no,
			ex_year=:subbr_ln_hst_c.ex_year,
			ex_month=:subbr_ln_hst_c.ex_month,
			ac_id=:subbr_ln_hst_c.ac_id,
			ac_seqn=:subbr_ln_hst_c.ac_seqn,
			acc_sts=:subbr_ln_hst_c.acc_sts,
			monthb_bal=:subbr_ln_hst_c.monthb_bal,
			bal=:subbr_ln_hst_c.bal,
			mon_increment=:subbr_ln_hst_c.mon_increment,
			month_addbal=:subbr_ln_hst_c.month_addbal,
			season_addbal=:subbr_ln_hst_c.season_addbal,
			year_addbal=:subbr_ln_hst_c.year_addbal,
			true_accrual=:subbr_ln_hst_c.true_accrual,
			accrual_tadd=:subbr_ln_hst_c.accrual_tadd,
			jaccrual=:subbr_ln_hst_c.jaccrual,
			client_mgr=:subbr_ln_hst_c.client_mgr
	WHERE rowid=:subbr_ln_hst_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE subbr_ln_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Subbr_ln_hst_Del_Upd(struct subbr_ln_hst_c subbr_ln_hst_c , char * reply  ){

	EXEC SQL DELETE FROM subbr_ln_hst WHERE rowid=:subbr_ln_hst_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE subbr_ln_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Subbr_ln_hst_Clo_Upd( ){
	EXEC SQL CLOSE upd_subbr_ln_hst;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Subbr_ln_hst_Ins( struct subbr_ln_hst_c subbr_ln_hst_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO subbr_ln_hst VALUES (:subbr_ln_hst_c.up_br_no,
			:subbr_ln_hst_c.opn_br_no,
			:subbr_ln_hst_c.ex_year,
			:subbr_ln_hst_c.ex_month,
			:subbr_ln_hst_c.ac_id,
			:subbr_ln_hst_c.ac_seqn,
			:subbr_ln_hst_c.acc_sts,
			:subbr_ln_hst_c.monthb_bal,
			:subbr_ln_hst_c.bal,
			:subbr_ln_hst_c.mon_increment,
			:subbr_ln_hst_c.month_addbal,
			:subbr_ln_hst_c.season_addbal,
			:subbr_ln_hst_c.year_addbal,
			:subbr_ln_hst_c.true_accrual,
			:subbr_ln_hst_c.accrual_tadd,
			:subbr_ln_hst_c.jaccrual,
			:subbr_ln_hst_c.client_mgr);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT subbr_ln_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT subbr_ln_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
