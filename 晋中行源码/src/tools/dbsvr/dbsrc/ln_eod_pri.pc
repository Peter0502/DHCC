#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"ln_eod_pri_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int ln_eod_pri_con ( struct ln_eod_pri_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct ln_eod_pri_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->ln_ac_no);
	zip_tail(ps->ln_ac_name);
	zip_tail(ps->ln_pact_no);
	zip_tail(ps->ln_ac_prdt);
	zip_tail(ps->pay_ac_no);
	zip_tail(ps->pay_ac_name);
	zip_tail(ps->tx_code);
	zip_tail(ps->amt_type);
	zip_tail(ps->acm_type);
}
int Ln_eod_pri_Debug(struct ln_eod_pri_c *ps){
	vtcp_log("ln_eod_pri_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("ln_eod_pri_c.ln_ac_no=[%s]\n",ps->ln_ac_no);
	vtcp_log("ln_eod_pri_c.ln_ac_seqn=[%ld]\n",ps->ln_ac_seqn);
	vtcp_log("ln_eod_pri_c.ln_ac_name=[%s]\n",ps->ln_ac_name);
	vtcp_log("ln_eod_pri_c.ln_pact_no=[%s]\n",ps->ln_pact_no);
	vtcp_log("ln_eod_pri_c.ln_ac_prdt=[%s]\n",ps->ln_ac_prdt);
	vtcp_log("ln_eod_pri_c.pay_ac_no=[%s]\n",ps->pay_ac_no);
	vtcp_log("ln_eod_pri_c.pay_ac_seqn=[%ld]\n",ps->pay_ac_seqn);
	vtcp_log("ln_eod_pri_c.pay_ac_name=[%s]\n",ps->pay_ac_name);
	vtcp_log("ln_eod_pri_c.amt=[%f]\n",ps->amt);
	vtcp_log("ln_eod_pri_c.acm=[%f]\n",ps->acm);
	vtcp_log("ln_eod_pri_c.rate=[%f]\n",ps->rate);
	vtcp_log("ln_eod_pri_c.over_rate=[%f]\n",ps->over_rate);
	vtcp_log("ln_eod_pri_c.tx_code=[%s]\n",ps->tx_code);
	vtcp_log("ln_eod_pri_c.amt_type=[%s]\n",ps->amt_type);
	vtcp_log("ln_eod_pri_c.acm_type=[%s]\n",ps->acm_type);
	vtcp_log("ln_eod_pri_c.beg_date=[%ld]\n",ps->beg_date);
	vtcp_log("ln_eod_pri_c.end_date=[%ld]\n",ps->end_date);
	vtcp_log("ln_eod_pri_c.trace_no=[%ld]\n",ps->trace_no);
	vtcp_log("ln_eod_pri_c.tx_date=[%ld]\n",ps->tx_date);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Ln_eod_pri_Sel(reply,ln_eod_pri_c,fmtstr,va_alist)
char    *reply;
struct  ln_eod_pri_c *ln_eod_pri_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Ln_eod_pri_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Ln_eod_pri_Fet_Sel( ln_eod_pri_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Ln_eod_pri_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Ln_eod_pri_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,ln_eod_pri.* FROM ln_eod_pri WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE ln_eod_pri_sel FROM :comm;
	EXEC SQL DECLARE sel_ln_eod_pri CURSOR FOR ln_eod_pri_sel;

	EXEC SQL OPEN sel_ln_eod_pri;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN ln_eod_pri error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Ln_eod_pri_Fet_Sel ( struct ln_eod_pri_c *ln_eod_pri_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_ln_eod_pri INTO :ln_eod_pri_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch ln_eod_pri error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch ln_eod_pri finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(ln_eod_pri_c);

	return 0;
}

int Ln_eod_pri_Clo_Sel (){
	EXEC SQL CLOSE sel_ln_eod_pri;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Ln_eod_pri_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,ln_eod_pri.* FROM ln_eod_pri WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE ln_eod_pri_upd FROM :comm;

	EXEC SQL DECLARE upd_ln_eod_pri CURSOR FOR ln_eod_pri_upd;

	EXEC SQL OPEN upd_ln_eod_pri;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open ln_eod_pri error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Ln_eod_pri_Fet_Upd( struct ln_eod_pri_c *ln_eod_pri_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_ln_eod_pri INTO :ln_eod_pri_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd ln_eod_pri error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH ln_eod_pri finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(ln_eod_pri_c);

	return 0;
}

int Ln_eod_pri_Upd_Upd( struct ln_eod_pri_c ln_eod_pri_c , char * reply){
	int ret;

	EXEC SQL UPDATE ln_eod_pri SET ln_ac_no=:ln_eod_pri_c.ln_ac_no,
			ln_ac_seqn=:ln_eod_pri_c.ln_ac_seqn,
			ln_ac_name=:ln_eod_pri_c.ln_ac_name,
			ln_pact_no=:ln_eod_pri_c.ln_pact_no,
			ln_ac_prdt=:ln_eod_pri_c.ln_ac_prdt,
			pay_ac_no=:ln_eod_pri_c.pay_ac_no,
			pay_ac_seqn=:ln_eod_pri_c.pay_ac_seqn,
			pay_ac_name=:ln_eod_pri_c.pay_ac_name,
			amt=:ln_eod_pri_c.amt,
			acm=:ln_eod_pri_c.acm,
			rate=:ln_eod_pri_c.rate,
			over_rate=:ln_eod_pri_c.over_rate,
			tx_code=:ln_eod_pri_c.tx_code,
			amt_type=:ln_eod_pri_c.amt_type,
			acm_type=:ln_eod_pri_c.acm_type,
			beg_date=:ln_eod_pri_c.beg_date,
			end_date=:ln_eod_pri_c.end_date,
			trace_no=:ln_eod_pri_c.trace_no,
			tx_date=:ln_eod_pri_c.tx_date
	WHERE rowid=:ln_eod_pri_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE ln_eod_pri error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Ln_eod_pri_Del_Upd(struct ln_eod_pri_c ln_eod_pri_c , char * reply  ){

	EXEC SQL DELETE FROM ln_eod_pri WHERE rowid=:ln_eod_pri_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE ln_eod_pri error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Ln_eod_pri_Clo_Upd( ){
	EXEC SQL CLOSE upd_ln_eod_pri;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Ln_eod_pri_Ins( struct ln_eod_pri_c ln_eod_pri_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO ln_eod_pri VALUES (:ln_eod_pri_c.ln_ac_no,
			:ln_eod_pri_c.ln_ac_seqn,
			:ln_eod_pri_c.ln_ac_name,
			:ln_eod_pri_c.ln_pact_no,
			:ln_eod_pri_c.ln_ac_prdt,
			:ln_eod_pri_c.pay_ac_no,
			:ln_eod_pri_c.pay_ac_seqn,
			:ln_eod_pri_c.pay_ac_name,
			:ln_eod_pri_c.amt,
			:ln_eod_pri_c.acm,
			:ln_eod_pri_c.rate,
			:ln_eod_pri_c.over_rate,
			:ln_eod_pri_c.tx_code,
			:ln_eod_pri_c.amt_type,
			:ln_eod_pri_c.acm_type,
			:ln_eod_pri_c.beg_date,
			:ln_eod_pri_c.end_date,
			:ln_eod_pri_c.trace_no,
			:ln_eod_pri_c.tx_date);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT ln_eod_pri error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT ln_eod_pri error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
