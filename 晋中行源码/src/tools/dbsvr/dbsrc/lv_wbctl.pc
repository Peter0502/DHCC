#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"lv_wbctl_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int lv_wbctl_con ( struct lv_wbctl_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct lv_wbctl_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->packid);
	zip_tail(ps->pkgno);
	zip_tail(ps->pay_qs_no);
	zip_tail(ps->cash_qs_no);
	zip_tail(ps->packmy);
	zip_tail(ps->zcnode);
	zip_tail(ps->zcid);
	zip_tail(ps->o_packid);
	zip_tail(ps->o_pkgno);
	zip_tail(ps->ornode);
	zip_tail(ps->acnode);
	zip_tail(ps->ffflag);
	zip_tail(ps->txnum);
	zip_tail(ps->bfflag);
	zip_tail(ps->packstat);
	zip_tail(ps->stat);
	zip_tail(ps->brprtflag);
	zip_tail(ps->qsprtflag);
	zip_tail(ps->content);
	zip_tail(ps->br_no);
	zip_tail(ps->filler);
}
int Lv_wbctl_Debug(struct lv_wbctl_c *ps){
	vtcp_log("lv_wbctl_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("lv_wbctl_c.pack_date=[%ld]\n",ps->pack_date);
	vtcp_log("lv_wbctl_c.packid=[%s]\n",ps->packid);
	vtcp_log("lv_wbctl_c.pkgno=[%s]\n",ps->pkgno);
	vtcp_log("lv_wbctl_c.pay_qs_no=[%s]\n",ps->pay_qs_no);
	vtcp_log("lv_wbctl_c.cash_qs_no=[%s]\n",ps->cash_qs_no);
	vtcp_log("lv_wbctl_c.in_date=[%ld]\n",ps->in_date);
	vtcp_log("lv_wbctl_c.packmy=[%s]\n",ps->packmy);
	vtcp_log("lv_wbctl_c.dtlcnt=[%ld]\n",ps->dtlcnt);
	vtcp_log("lv_wbctl_c.totamt=[%f]\n",ps->totamt);
	vtcp_log("lv_wbctl_c.zcnode=[%s]\n",ps->zcnode);
	vtcp_log("lv_wbctl_c.zc_date=[%ld]\n",ps->zc_date);
	vtcp_log("lv_wbctl_c.zcid=[%s]\n",ps->zcid);
	vtcp_log("lv_wbctl_c.hz_date=[%ld]\n",ps->hz_date);
	vtcp_log("lv_wbctl_c.o_pack_date=[%ld]\n",ps->o_pack_date);
	vtcp_log("lv_wbctl_c.o_packid=[%s]\n",ps->o_packid);
	vtcp_log("lv_wbctl_c.dtlsuccnt=[%ld]\n",ps->dtlsuccnt);
	vtcp_log("lv_wbctl_c.dtlsucamt=[%f]\n",ps->dtlsucamt);
	vtcp_log("lv_wbctl_c.o_pkgno=[%s]\n",ps->o_pkgno);
	vtcp_log("lv_wbctl_c.ornode=[%s]\n",ps->ornode);
	vtcp_log("lv_wbctl_c.acnode=[%s]\n",ps->acnode);
	vtcp_log("lv_wbctl_c.ffflag=[%s]\n",ps->ffflag);
	vtcp_log("lv_wbctl_c.txnum=[%s]\n",ps->txnum);
	vtcp_log("lv_wbctl_c.bfflag=[%s]\n",ps->bfflag);
	vtcp_log("lv_wbctl_c.qs_date=[%ld]\n",ps->qs_date);
	vtcp_log("lv_wbctl_c.packstat=[%s]\n",ps->packstat);
	vtcp_log("lv_wbctl_c.stat=[%s]\n",ps->stat);
	vtcp_log("lv_wbctl_c.brprtflag=[%s]\n",ps->brprtflag);
	vtcp_log("lv_wbctl_c.qsprtflag=[%s]\n",ps->qsprtflag);
	vtcp_log("lv_wbctl_c.content=[%s]\n",ps->content);
	vtcp_log("lv_wbctl_c.br_no=[%s]\n",ps->br_no);
	vtcp_log("lv_wbctl_c.filler=[%s]\n",ps->filler);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Lv_wbctl_Sel(reply,lv_wbctl_c,fmtstr,va_alist)
char    *reply;
struct  lv_wbctl_c *lv_wbctl_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Lv_wbctl_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Lv_wbctl_Fet_Sel( lv_wbctl_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Lv_wbctl_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Lv_wbctl_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,lv_wbctl.* FROM lv_wbctl WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE lv_wbctl_sel FROM :comm;
	EXEC SQL DECLARE sel_lv_wbctl CURSOR FOR lv_wbctl_sel;

	EXEC SQL OPEN sel_lv_wbctl;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN lv_wbctl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Lv_wbctl_Fet_Sel ( struct lv_wbctl_c *lv_wbctl_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_lv_wbctl INTO :lv_wbctl_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch lv_wbctl error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch lv_wbctl finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(lv_wbctl_c);

	return 0;
}

int Lv_wbctl_Clo_Sel (){
	EXEC SQL CLOSE sel_lv_wbctl;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Lv_wbctl_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,lv_wbctl.* FROM lv_wbctl WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE lv_wbctl_upd FROM :comm;

	EXEC SQL DECLARE upd_lv_wbctl CURSOR FOR lv_wbctl_upd;

	EXEC SQL OPEN upd_lv_wbctl;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open lv_wbctl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Lv_wbctl_Fet_Upd( struct lv_wbctl_c *lv_wbctl_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_lv_wbctl INTO :lv_wbctl_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd lv_wbctl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH lv_wbctl finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(lv_wbctl_c);

	return 0;
}

int Lv_wbctl_Upd_Upd( struct lv_wbctl_c lv_wbctl_c , char * reply){
	int ret;

	EXEC SQL UPDATE lv_wbctl SET pack_date=:lv_wbctl_c.pack_date,
			packid=:lv_wbctl_c.packid,
			pkgno=:lv_wbctl_c.pkgno,
			pay_qs_no=:lv_wbctl_c.pay_qs_no,
			cash_qs_no=:lv_wbctl_c.cash_qs_no,
			in_date=:lv_wbctl_c.in_date,
			packmy=:lv_wbctl_c.packmy,
			dtlcnt=:lv_wbctl_c.dtlcnt,
			totamt=:lv_wbctl_c.totamt,
			zcnode=:lv_wbctl_c.zcnode,
			zc_date=:lv_wbctl_c.zc_date,
			zcid=:lv_wbctl_c.zcid,
			hz_date=:lv_wbctl_c.hz_date,
			o_pack_date=:lv_wbctl_c.o_pack_date,
			o_packid=:lv_wbctl_c.o_packid,
			dtlsuccnt=:lv_wbctl_c.dtlsuccnt,
			dtlsucamt=:lv_wbctl_c.dtlsucamt,
			o_pkgno=:lv_wbctl_c.o_pkgno,
			ornode=:lv_wbctl_c.ornode,
			acnode=:lv_wbctl_c.acnode,
			ffflag=:lv_wbctl_c.ffflag,
			txnum=:lv_wbctl_c.txnum,
			bfflag=:lv_wbctl_c.bfflag,
			qs_date=:lv_wbctl_c.qs_date,
			packstat=:lv_wbctl_c.packstat,
			stat=:lv_wbctl_c.stat,
			brprtflag=:lv_wbctl_c.brprtflag,
			qsprtflag=:lv_wbctl_c.qsprtflag,
			content=:lv_wbctl_c.content,
			br_no=:lv_wbctl_c.br_no,
			filler=:lv_wbctl_c.filler
	WHERE rowid=:lv_wbctl_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE lv_wbctl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Lv_wbctl_Del_Upd(struct lv_wbctl_c lv_wbctl_c , char * reply  ){

	EXEC SQL DELETE FROM lv_wbctl WHERE rowid=:lv_wbctl_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE lv_wbctl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Lv_wbctl_Clo_Upd( ){
	EXEC SQL CLOSE upd_lv_wbctl;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Lv_wbctl_Ins( struct lv_wbctl_c lv_wbctl_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO lv_wbctl VALUES (:lv_wbctl_c.pack_date,
			:lv_wbctl_c.packid,
			:lv_wbctl_c.pkgno,
			:lv_wbctl_c.pay_qs_no,
			:lv_wbctl_c.cash_qs_no,
			:lv_wbctl_c.in_date,
			:lv_wbctl_c.packmy,
			:lv_wbctl_c.dtlcnt,
			:lv_wbctl_c.totamt,
			:lv_wbctl_c.zcnode,
			:lv_wbctl_c.zc_date,
			:lv_wbctl_c.zcid,
			:lv_wbctl_c.hz_date,
			:lv_wbctl_c.o_pack_date,
			:lv_wbctl_c.o_packid,
			:lv_wbctl_c.dtlsuccnt,
			:lv_wbctl_c.dtlsucamt,
			:lv_wbctl_c.o_pkgno,
			:lv_wbctl_c.ornode,
			:lv_wbctl_c.acnode,
			:lv_wbctl_c.ffflag,
			:lv_wbctl_c.txnum,
			:lv_wbctl_c.bfflag,
			:lv_wbctl_c.qs_date,
			:lv_wbctl_c.packstat,
			:lv_wbctl_c.stat,
			:lv_wbctl_c.brprtflag,
			:lv_wbctl_c.qsprtflag,
			:lv_wbctl_c.content,
			:lv_wbctl_c.br_no,
			:lv_wbctl_c.filler);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT lv_wbctl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT lv_wbctl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
