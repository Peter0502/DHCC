#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"intst_hst_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int intst_hst_con ( struct intst_hst_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct intst_hst_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->br_no);
	zip_tail(ps->prdt_no);
	zip_tail(ps->cur_no);
	zip_tail(ps->ac_ind);
	zip_tail(ps->pt_ind);
}
int Intst_hst_Debug(struct intst_hst_c *ps){
	vtcp_log("intst_hst_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("intst_hst_c.br_no=[%s]\n",ps->br_no);
	vtcp_log("intst_hst_c.ac_id=[%ld]\n",ps->ac_id);
	vtcp_log("intst_hst_c.ac_seqn=[%ld]\n",ps->ac_seqn);
	vtcp_log("intst_hst_c.prdt_no=[%s]\n",ps->prdt_no);
	vtcp_log("intst_hst_c.cur_no=[%s]\n",ps->cur_no);
	vtcp_log("intst_hst_c.bic_bal=[%f]\n",ps->bic_bal);
	vtcp_log("intst_hst_c.bic_acm=[%f]\n",ps->bic_acm);
	vtcp_log("intst_hst_c.fct_intst=[%f]\n",ps->fct_intst);
	vtcp_log("intst_hst_c.intst_tax=[%f]\n",ps->intst_tax);
	vtcp_log("intst_hst_c.aic_bal=[%f]\n",ps->aic_bal);
	vtcp_log("intst_hst_c.aic_acm=[%f]\n",ps->aic_acm);
	vtcp_log("intst_hst_c.ic_date=[%ld]\n",ps->ic_date);
	vtcp_log("intst_hst_c.intst_date=[%ld]\n",ps->intst_date);
	vtcp_log("intst_hst_c.ac_ind=[%s]\n",ps->ac_ind);
	vtcp_log("intst_hst_c.pt_ind=[%s]\n",ps->pt_ind);
	vtcp_log("intst_hst_c.rate=[%f]\n",ps->rate);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Intst_hst_Sel(reply,intst_hst_c,fmtstr,va_alist)
char    *reply;
struct  intst_hst_c *intst_hst_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Intst_hst_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Intst_hst_Fet_Sel( intst_hst_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Intst_hst_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Intst_hst_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,intst_hst.* FROM intst_hst WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE intst_hst_sel FROM :comm;
	EXEC SQL DECLARE sel_intst_hst CURSOR FOR intst_hst_sel;

	EXEC SQL OPEN sel_intst_hst;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN intst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Intst_hst_Fet_Sel ( struct intst_hst_c *intst_hst_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_intst_hst INTO :intst_hst_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch intst_hst error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch intst_hst finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(intst_hst_c);

	return 0;
}

int Intst_hst_Clo_Sel (){
	EXEC SQL CLOSE sel_intst_hst;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Intst_hst_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,intst_hst.* FROM intst_hst WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE intst_hst_upd FROM :comm;

	EXEC SQL DECLARE upd_intst_hst CURSOR FOR intst_hst_upd;

	EXEC SQL OPEN upd_intst_hst;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open intst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Intst_hst_Fet_Upd( struct intst_hst_c *intst_hst_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_intst_hst INTO :intst_hst_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd intst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH intst_hst finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(intst_hst_c);

	return 0;
}

int Intst_hst_Upd_Upd( struct intst_hst_c intst_hst_c , char * reply){
	int ret;

	EXEC SQL UPDATE intst_hst SET br_no=:intst_hst_c.br_no,
			ac_id=:intst_hst_c.ac_id,
			ac_seqn=:intst_hst_c.ac_seqn,
			prdt_no=:intst_hst_c.prdt_no,
			cur_no=:intst_hst_c.cur_no,
			bic_bal=:intst_hst_c.bic_bal,
			bic_acm=:intst_hst_c.bic_acm,
			fct_intst=:intst_hst_c.fct_intst,
			intst_tax=:intst_hst_c.intst_tax,
			aic_bal=:intst_hst_c.aic_bal,
			aic_acm=:intst_hst_c.aic_acm,
			ic_date=:intst_hst_c.ic_date,
			intst_date=:intst_hst_c.intst_date,
			ac_ind=:intst_hst_c.ac_ind,
			pt_ind=:intst_hst_c.pt_ind,
			rate=:intst_hst_c.rate
	WHERE rowid=:intst_hst_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE intst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Intst_hst_Del_Upd(struct intst_hst_c intst_hst_c , char * reply  ){

	EXEC SQL DELETE FROM intst_hst WHERE rowid=:intst_hst_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE intst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Intst_hst_Clo_Upd( ){
	EXEC SQL CLOSE upd_intst_hst;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Intst_hst_Ins( struct intst_hst_c intst_hst_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO intst_hst VALUES (:intst_hst_c.br_no,
			:intst_hst_c.ac_id,
			:intst_hst_c.ac_seqn,
			:intst_hst_c.prdt_no,
			:intst_hst_c.cur_no,
			:intst_hst_c.bic_bal,
			:intst_hst_c.bic_acm,
			:intst_hst_c.fct_intst,
			:intst_hst_c.intst_tax,
			:intst_hst_c.aic_bal,
			:intst_hst_c.aic_acm,
			:intst_hst_c.ic_date,
			:intst_hst_c.intst_date,
			:intst_hst_c.ac_ind,
			:intst_hst_c.pt_ind,
			:intst_hst_c.rate);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT intst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT intst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
