#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"tmp_gy_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int tmp_gy_con ( struct tmp_gy_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct tmp_gy_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->xm);
	zip_tail(ps->hm);
	zip_tail(ps->yy);
	zip_tail(ps->tel);
	zip_tail(ps->nam);
}
int Tmp_gy_Debug(struct tmp_gy_c *ps){
	vtcp_log("tmp_gy_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("tmp_gy_c.xm=[%s]\n",ps->xm);
	vtcp_log("tmp_gy_c.hm=[%s]\n",ps->hm);
	vtcp_log("tmp_gy_c.yy=[%s]\n",ps->yy);
	vtcp_log("tmp_gy_c.tel=[%s]\n",ps->tel);
	vtcp_log("tmp_gy_c.nam=[%s]\n",ps->nam);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Tmp_gy_Sel(reply,tmp_gy_c,fmtstr,va_alist)
char    *reply;
struct  tmp_gy_c *tmp_gy_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Tmp_gy_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Tmp_gy_Fet_Sel( tmp_gy_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Tmp_gy_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Tmp_gy_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,tmp_gy.* FROM tmp_gy WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE tmp_gy_sel FROM :comm;
	EXEC SQL DECLARE sel_tmp_gy CURSOR FOR tmp_gy_sel;

	EXEC SQL OPEN sel_tmp_gy;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN tmp_gy error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Tmp_gy_Fet_Sel ( struct tmp_gy_c *tmp_gy_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_tmp_gy INTO :tmp_gy_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch tmp_gy error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch tmp_gy finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(tmp_gy_c);

	return 0;
}

int Tmp_gy_Clo_Sel (){
	EXEC SQL CLOSE sel_tmp_gy;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Tmp_gy_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,tmp_gy.* FROM tmp_gy WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE tmp_gy_upd FROM :comm;

	EXEC SQL DECLARE upd_tmp_gy CURSOR FOR tmp_gy_upd;

	EXEC SQL OPEN upd_tmp_gy;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open tmp_gy error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Tmp_gy_Fet_Upd( struct tmp_gy_c *tmp_gy_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_tmp_gy INTO :tmp_gy_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd tmp_gy error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH tmp_gy finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(tmp_gy_c);

	return 0;
}

int Tmp_gy_Upd_Upd( struct tmp_gy_c tmp_gy_c , char * reply){
	int ret;

	EXEC SQL UPDATE tmp_gy SET xm=:tmp_gy_c.xm,
			hm=:tmp_gy_c.hm,
			yy=:tmp_gy_c.yy,
			tel=:tmp_gy_c.tel,
			nam=:tmp_gy_c.nam
	WHERE rowid=:tmp_gy_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE tmp_gy error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Tmp_gy_Del_Upd(struct tmp_gy_c tmp_gy_c , char * reply  ){

	EXEC SQL DELETE FROM tmp_gy WHERE rowid=:tmp_gy_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE tmp_gy error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Tmp_gy_Clo_Upd( ){
	EXEC SQL CLOSE upd_tmp_gy;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Tmp_gy_Ins( struct tmp_gy_c tmp_gy_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO tmp_gy VALUES (:tmp_gy_c.xm,
			:tmp_gy_c.hm,
			:tmp_gy_c.yy,
			:tmp_gy_c.tel,
			:tmp_gy_c.nam);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT tmp_gy error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT tmp_gy error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
