#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"in_mst_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)
static char str[3000];
static char mystery[17];

int in_mst_con ( struct in_mst_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct in_mst_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->opn_br_no);
	zip_tail(ps->prdt_no);
	zip_tail(ps->sts);
	zip_tail(ps->intst_knd);
	zip_tail(ps->od_ind);
	zip_tail(ps->name);
	zip_tail(ps->cal_code);
	zip_tail(ps->mac);
}
int In_mst_Debug(struct in_mst_c *ps){
	vtcp_log("in_mst_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("in_mst_c.opn_br_no=[%s]\n",ps->opn_br_no);
	vtcp_log("in_mst_c.ac_id=[%ld]\n",ps->ac_id);
	vtcp_log("in_mst_c.ac_seqn=[%ld]\n",ps->ac_seqn);
	vtcp_log("in_mst_c.prdt_no=[%s]\n",ps->prdt_no);
	vtcp_log("in_mst_c.bal=[%f]\n",ps->bal);
	vtcp_log("in_mst_c.ys_bal=[%f]\n",ps->ys_bal);
	vtcp_log("in_mst_c.hst_bal=[%f]\n",ps->hst_bal);
	vtcp_log("in_mst_c.sts=[%s]\n",ps->sts);
	vtcp_log("in_mst_c.opn_date=[%ld]\n",ps->opn_date);
	vtcp_log("in_mst_c.ic_date=[%ld]\n",ps->ic_date);
	vtcp_log("in_mst_c.end_date=[%ld]\n",ps->end_date);
	vtcp_log("in_mst_c.cls_date=[%ld]\n",ps->cls_date);
	vtcp_log("in_mst_c.lst_date=[%ld]\n",ps->lst_date);
	vtcp_log("in_mst_c.intst_knd=[%s]\n",ps->intst_knd);
	vtcp_log("in_mst_c.rate=[%f]\n",ps->rate);
	vtcp_log("in_mst_c.over_rate=[%f]\n",ps->over_rate);
	vtcp_log("in_mst_c.intst_acm=[%f]\n",ps->intst_acm);
	vtcp_log("in_mst_c.hst_cnt=[%ld]\n",ps->hst_cnt);
	vtcp_log("in_mst_c.hst_pg=[%ld]\n",ps->hst_pg);
	vtcp_log("in_mst_c.hold_amt=[%f]\n",ps->hold_amt);
	vtcp_log("in_mst_c.od_ind=[%s]\n",ps->od_ind);
	vtcp_log("in_mst_c.name=[%s]\n",ps->name);
	vtcp_log("in_mst_c.cal_code=[%s]\n",ps->cal_code);
	vtcp_log("in_mst_c.mac=[%s]\n",ps->mac);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int In_mst_Sel(reply,in_mst_c,fmtstr,va_alist)
char    *reply;
struct  in_mst_c *in_mst_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = In_mst_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = In_mst_Fet_Sel( in_mst_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	In_mst_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int In_mst_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,in_mst.* FROM in_mst WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE in_mst_sel FROM :comm;
	EXEC SQL DECLARE sel_in_mst CURSOR FOR in_mst_sel;

	EXEC SQL OPEN sel_in_mst;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN in_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int In_mst_Fet_Sel ( struct in_mst_c *in_mst_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_in_mst INTO :in_mst_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch in_mst error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch in_mst finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(in_mst_c);

	return 0;
}

int In_mst_Clo_Sel (){
	EXEC SQL CLOSE sel_in_mst;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int In_mst_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,in_mst.* FROM in_mst WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE in_mst_upd FROM :comm;

	EXEC SQL DECLARE upd_in_mst CURSOR FOR in_mst_upd;

	EXEC SQL OPEN upd_in_mst;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open in_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int In_mst_Fet_Upd( struct in_mst_c *in_mst_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_in_mst INTO :in_mst_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd in_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH in_mst finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(in_mst_c);

	return 0;
}

int In_mst_Upd_Upd( struct in_mst_c in_mst_c , char * reply){
	int ret;

	memset( str, 0x0,sizeof(str) );
	memset( mystery, 0x0, sizeof(mystery) );
	ret = in_mst_con ( in_mst_c, str );
	ret = put_mystery( str, mystery );
	strcpy(  in_mst_c.mac, mystery ); 
	EXEC SQL UPDATE in_mst SET opn_br_no=:in_mst_c.opn_br_no,
			ac_id=:in_mst_c.ac_id,
			ac_seqn=:in_mst_c.ac_seqn,
			prdt_no=:in_mst_c.prdt_no,
			bal=:in_mst_c.bal,
			ys_bal=:in_mst_c.ys_bal,
			hst_bal=:in_mst_c.hst_bal,
			sts=:in_mst_c.sts,
			opn_date=:in_mst_c.opn_date,
			ic_date=:in_mst_c.ic_date,
			end_date=:in_mst_c.end_date,
			cls_date=:in_mst_c.cls_date,
			lst_date=:in_mst_c.lst_date,
			intst_knd=:in_mst_c.intst_knd,
			rate=:in_mst_c.rate,
			over_rate=:in_mst_c.over_rate,
			intst_acm=:in_mst_c.intst_acm,
			hst_cnt=:in_mst_c.hst_cnt,
			hst_pg=:in_mst_c.hst_pg,
			hold_amt=:in_mst_c.hold_amt,
			od_ind=:in_mst_c.od_ind,
			name=:in_mst_c.name,
			cal_code=:in_mst_c.cal_code,
			mac=:in_mst_c.mac
	WHERE rowid=:in_mst_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE in_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int In_mst_Del_Upd(struct in_mst_c in_mst_c , char * reply  ){

	EXEC SQL DELETE FROM in_mst WHERE rowid=:in_mst_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE in_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int In_mst_Clo_Upd( ){
	EXEC SQL CLOSE upd_in_mst;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int In_mst_Ins( struct in_mst_c in_mst_c , char * reply ){
	int ret;

	memset( str, 0x0,sizeof(str) );
	memset( mystery, 0x0, sizeof(mystery) );
	ret = in_mst_con ( in_mst_c, str );
	ret = put_mystery( str, mystery );
	strcpy(  in_mst_c.mac, mystery ); 
	EXEC SQL INSERT INTO in_mst VALUES (:in_mst_c.opn_br_no,
			:in_mst_c.ac_id,
			:in_mst_c.ac_seqn,
			:in_mst_c.prdt_no,
			:in_mst_c.bal,
			:in_mst_c.ys_bal,
			:in_mst_c.hst_bal,
			:in_mst_c.sts,
			:in_mst_c.opn_date,
			:in_mst_c.ic_date,
			:in_mst_c.end_date,
			:in_mst_c.cls_date,
			:in_mst_c.lst_date,
			:in_mst_c.intst_knd,
			:in_mst_c.rate,
			:in_mst_c.over_rate,
			:in_mst_c.intst_acm,
			:in_mst_c.hst_cnt,
			:in_mst_c.hst_pg,
			:in_mst_c.hold_amt,
			:in_mst_c.od_ind,
			:in_mst_c.name,
			:in_mst_c.cal_code,
			:in_mst_c.mac);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT in_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT in_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
/*****************************************************************************/
/****                              查询函数部分[1]                       ****/
/*****************************************************************************/
int In_mst_Sel1(reply,in_mst_c,fmtstr,va_alist)
char    *reply;
struct  in_mst_c *in_mst_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = In_mst_Dec_Sel1( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = In_mst_Fet_Sel1( in_mst_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	In_mst_Clo_Sel1();

	return 0;
}



char *key_strcat(char *,char *);
int In_mst_Dec_Sel1 ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,in_mst.* FROM in_mst WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE in_mst_sel1 FROM :comm;
	EXEC SQL DECLARE sel_in_mst1 CURSOR FOR in_mst_sel1;

	EXEC SQL OPEN sel_in_mst1;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN in_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int In_mst_Fet_Sel1 ( struct in_mst_c *in_mst_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_in_mst1 INTO :in_mst_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch in_mst error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch in_mst finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(in_mst_c);

	return 0;
}

int In_mst_Clo_Sel1 (){
	EXEC SQL CLOSE sel_in_mst1;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int In_mst_Dec_Upd1( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,in_mst.* FROM in_mst WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE in_mst_upd1 FROM :comm;

	EXEC SQL DECLARE upd_in_mst1 CURSOR FOR in_mst_upd1;

	EXEC SQL OPEN upd_in_mst1;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open in_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int In_mst_Fet_Upd1( struct in_mst_c *in_mst_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_in_mst1 INTO :in_mst_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd in_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH in_mst finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(in_mst_c);

	return 0;
}

int In_mst_Upd_Upd1( struct in_mst_c in_mst_c , char * reply){
	int ret;

	memset( str, 0x0,sizeof(str) );
	memset( mystery, 0x0, sizeof(mystery) );
	ret = in_mst_con ( in_mst_c, str );
	ret = put_mystery( str, mystery );
	strcpy(  in_mst_c.mac, mystery ); 
	EXEC SQL UPDATE in_mst SET opn_br_no=:in_mst_c.opn_br_no,
			ac_id=:in_mst_c.ac_id,
			ac_seqn=:in_mst_c.ac_seqn,
			prdt_no=:in_mst_c.prdt_no,
			bal=:in_mst_c.bal,
			ys_bal=:in_mst_c.ys_bal,
			hst_bal=:in_mst_c.hst_bal,
			sts=:in_mst_c.sts,
			opn_date=:in_mst_c.opn_date,
			ic_date=:in_mst_c.ic_date,
			end_date=:in_mst_c.end_date,
			cls_date=:in_mst_c.cls_date,
			lst_date=:in_mst_c.lst_date,
			intst_knd=:in_mst_c.intst_knd,
			rate=:in_mst_c.rate,
			over_rate=:in_mst_c.over_rate,
			intst_acm=:in_mst_c.intst_acm,
			hst_cnt=:in_mst_c.hst_cnt,
			hst_pg=:in_mst_c.hst_pg,
			hold_amt=:in_mst_c.hold_amt,
			od_ind=:in_mst_c.od_ind,
			name=:in_mst_c.name,
			cal_code=:in_mst_c.cal_code,
			mac=:in_mst_c.mac
	WHERE rowid=:in_mst_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE in_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int In_mst_Clo_Upd1( ){
	EXEC SQL CLOSE upd_in_mst1;
	return 0;
}

