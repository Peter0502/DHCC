#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"fn_redempt_hst_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int fn_redempt_hst_con ( struct fn_redempt_hst_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct fn_redempt_hst_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->tx_br_no);
	zip_tail(ps->pact_no);
	zip_tail(ps->prdt_code);
	zip_tail(ps->ac_no);
	zip_tail(ps->chnl_type);
	zip_tail(ps->profit_flag);
	zip_tail(ps->tel);
	zip_tail(ps->sts);
	zip_tail(ps->filler);
}
int Fn_redempt_hst_Debug(struct fn_redempt_hst_c *ps){
	vtcp_log("fn_redempt_hst_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("fn_redempt_hst_c.tx_date=[%ld]\n",ps->tx_date);
	vtcp_log("fn_redempt_hst_c.trace_no=[%ld]\n",ps->trace_no);
	vtcp_log("fn_redempt_hst_c.tx_br_no=[%s]\n",ps->tx_br_no);
	vtcp_log("fn_redempt_hst_c.pact_no=[%s]\n",ps->pact_no);
	vtcp_log("fn_redempt_hst_c.prdt_code=[%s]\n",ps->prdt_code);
	vtcp_log("fn_redempt_hst_c.ac_no=[%s]\n",ps->ac_no);
	vtcp_log("fn_redempt_hst_c.ac_id=[%ld]\n",ps->ac_id);
	vtcp_log("fn_redempt_hst_c.ac_seqn=[%ld]\n",ps->ac_seqn);
	vtcp_log("fn_redempt_hst_c.chnl_type=[%s]\n",ps->chnl_type);
	vtcp_log("fn_redempt_hst_c.redempt_amt=[%f]\n",ps->redempt_amt);
	vtcp_log("fn_redempt_hst_c.redempt_chrg_amt=[%f]\n",ps->redempt_chrg_amt);
	vtcp_log("fn_redempt_hst_c.return_rate=[%f]\n",ps->return_rate);
	vtcp_log("fn_redempt_hst_c.ic_date=[%ld]\n",ps->ic_date);
	vtcp_log("fn_redempt_hst_c.fct_intst=[%f]\n",ps->fct_intst);
	vtcp_log("fn_redempt_hst_c.return_capital=[%f]\n",ps->return_capital);
	vtcp_log("fn_redempt_hst_c.profit_amt=[%f]\n",ps->profit_amt);
	vtcp_log("fn_redempt_hst_c.profit_flag=[%s]\n",ps->profit_flag);
	vtcp_log("fn_redempt_hst_c.tel=[%s]\n",ps->tel);
	vtcp_log("fn_redempt_hst_c.return_date=[%ld]\n",ps->return_date);
	vtcp_log("fn_redempt_hst_c.return_trace_no=[%ld]\n",ps->return_trace_no);
	vtcp_log("fn_redempt_hst_c.sts=[%s]\n",ps->sts);
	vtcp_log("fn_redempt_hst_c.buy_date=[%ld]\n",ps->buy_date);
	vtcp_log("fn_redempt_hst_c.buy_trace_no=[%ld]\n",ps->buy_trace_no);
	vtcp_log("fn_redempt_hst_c.filler=[%s]\n",ps->filler);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Fn_redempt_hst_Sel(reply,fn_redempt_hst_c,fmtstr,va_alist)
char    *reply;
struct  fn_redempt_hst_c *fn_redempt_hst_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Fn_redempt_hst_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Fn_redempt_hst_Fet_Sel( fn_redempt_hst_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Fn_redempt_hst_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Fn_redempt_hst_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,fn_redempt_hst.* FROM fn_redempt_hst WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE fn_redempt_hst_sel FROM :comm;
	EXEC SQL DECLARE sel_fn_redempt_hst CURSOR FOR fn_redempt_hst_sel;

	EXEC SQL OPEN sel_fn_redempt_hst;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN fn_redempt_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Fn_redempt_hst_Fet_Sel ( struct fn_redempt_hst_c *fn_redempt_hst_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_fn_redempt_hst INTO :fn_redempt_hst_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch fn_redempt_hst error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch fn_redempt_hst finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(fn_redempt_hst_c);

	return 0;
}

int Fn_redempt_hst_Clo_Sel (){
	EXEC SQL CLOSE sel_fn_redempt_hst;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Fn_redempt_hst_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,fn_redempt_hst.* FROM fn_redempt_hst WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE fn_redempt_hst_upd FROM :comm;

	EXEC SQL DECLARE upd_fn_redempt_hst CURSOR FOR fn_redempt_hst_upd;

	EXEC SQL OPEN upd_fn_redempt_hst;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open fn_redempt_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Fn_redempt_hst_Fet_Upd( struct fn_redempt_hst_c *fn_redempt_hst_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_fn_redempt_hst INTO :fn_redempt_hst_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd fn_redempt_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH fn_redempt_hst finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(fn_redempt_hst_c);

	return 0;
}

int Fn_redempt_hst_Upd_Upd( struct fn_redempt_hst_c fn_redempt_hst_c , char * reply){
	int ret;

	EXEC SQL UPDATE fn_redempt_hst SET tx_date=:fn_redempt_hst_c.tx_date,
			trace_no=:fn_redempt_hst_c.trace_no,
			tx_br_no=:fn_redempt_hst_c.tx_br_no,
			pact_no=:fn_redempt_hst_c.pact_no,
			prdt_code=:fn_redempt_hst_c.prdt_code,
			ac_no=:fn_redempt_hst_c.ac_no,
			ac_id=:fn_redempt_hst_c.ac_id,
			ac_seqn=:fn_redempt_hst_c.ac_seqn,
			chnl_type=:fn_redempt_hst_c.chnl_type,
			redempt_amt=:fn_redempt_hst_c.redempt_amt,
			redempt_chrg_amt=:fn_redempt_hst_c.redempt_chrg_amt,
			return_rate=:fn_redempt_hst_c.return_rate,
			ic_date=:fn_redempt_hst_c.ic_date,
			fct_intst=:fn_redempt_hst_c.fct_intst,
			return_capital=:fn_redempt_hst_c.return_capital,
			profit_amt=:fn_redempt_hst_c.profit_amt,
			profit_flag=:fn_redempt_hst_c.profit_flag,
			tel=:fn_redempt_hst_c.tel,
			return_date=:fn_redempt_hst_c.return_date,
			return_trace_no=:fn_redempt_hst_c.return_trace_no,
			sts=:fn_redempt_hst_c.sts,
			buy_date=:fn_redempt_hst_c.buy_date,
			buy_trace_no=:fn_redempt_hst_c.buy_trace_no,
			filler=:fn_redempt_hst_c.filler
	WHERE rowid=:fn_redempt_hst_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE fn_redempt_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Fn_redempt_hst_Del_Upd(struct fn_redempt_hst_c fn_redempt_hst_c , char * reply  ){

	EXEC SQL DELETE FROM fn_redempt_hst WHERE rowid=:fn_redempt_hst_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE fn_redempt_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Fn_redempt_hst_Clo_Upd( ){
	EXEC SQL CLOSE upd_fn_redempt_hst;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Fn_redempt_hst_Ins( struct fn_redempt_hst_c fn_redempt_hst_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO fn_redempt_hst VALUES (:fn_redempt_hst_c.tx_date,
			:fn_redempt_hst_c.trace_no,
			:fn_redempt_hst_c.tx_br_no,
			:fn_redempt_hst_c.pact_no,
			:fn_redempt_hst_c.prdt_code,
			:fn_redempt_hst_c.ac_no,
			:fn_redempt_hst_c.ac_id,
			:fn_redempt_hst_c.ac_seqn,
			:fn_redempt_hst_c.chnl_type,
			:fn_redempt_hst_c.redempt_amt,
			:fn_redempt_hst_c.redempt_chrg_amt,
			:fn_redempt_hst_c.return_rate,
			:fn_redempt_hst_c.ic_date,
			:fn_redempt_hst_c.fct_intst,
			:fn_redempt_hst_c.return_capital,
			:fn_redempt_hst_c.profit_amt,
			:fn_redempt_hst_c.profit_flag,
			:fn_redempt_hst_c.tel,
			:fn_redempt_hst_c.return_date,
			:fn_redempt_hst_c.return_trace_no,
			:fn_redempt_hst_c.sts,
			:fn_redempt_hst_c.buy_date,
			:fn_redempt_hst_c.buy_trace_no,
			:fn_redempt_hst_c.filler);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT fn_redempt_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT fn_redempt_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
