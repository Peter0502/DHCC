#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"cashier_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int cashier_con ( struct cashier_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct cashier_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->pono);
	zip_tail(ps->brno);
	zip_tail(ps->orbrno);
	zip_tail(ps->payqsactno);
	zip_tail(ps->obrno);
	zip_tail(ps->voctype);
	zip_tail(ps->vocnum);
	zip_tail(ps->ovoctype);
	zip_tail(ps->ovocnum);
	zip_tail(ps->cour);
	zip_tail(ps->paybrno);
	zip_tail(ps->payactno);
	zip_tail(ps->payname);
	zip_tail(ps->paybrname);
	zip_tail(ps->payaddress);
	zip_tail(ps->cashactno);
	zip_tail(ps->cashbrno);
	zip_tail(ps->cashbrname);
	zip_tail(ps->cashaddress);
	zip_tail(ps->cashname);
	zip_tail(ps->holdbrno);
	zip_tail(ps->holdbrname);
	zip_tail(ps->holdactno);
	zip_tail(ps->holdname);
	zip_tail(ps->lactcls);
	zip_tail(ps->stat);
	zip_tail(ps->cashstat);
	zip_tail(ps->passwd);
	zip_tail(ps->avbaltype);
	zip_tail(ps->bptype);
	zip_tail(ps->ccflag);
	zip_tail(ps->cashflag);
	zip_tail(ps->drsubject);
	zip_tail(ps->crsubject);
	zip_tail(ps->reason);
	zip_tail(ps->feeflag);
	zip_tail(ps->checkflag);
	zip_tail(ps->inflag);
	zip_tail(ps->optlrno);
	zip_tail(ps->chktlrno);
	zip_tail(ps->passtlrno);
	zip_tail(ps->cashtlrno);
	zip_tail(ps->jqtlrno);
	zip_tail(ps->addpassflg);
	zip_tail(ps->filler);
}
int Cashier_Debug(struct cashier_c *ps){
	vtcp_log("cashier_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("cashier_c.pono=[%s]\n",ps->pono);
	vtcp_log("cashier_c.brno=[%s]\n",ps->brno);
	vtcp_log("cashier_c.orbrno=[%s]\n",ps->orbrno);
	vtcp_log("cashier_c.payqsactno=[%s]\n",ps->payqsactno);
	vtcp_log("cashier_c.txday=[%ld]\n",ps->txday);
	vtcp_log("cashier_c.lostcnt=[%ld]\n",ps->lostcnt);
	vtcp_log("cashier_c.obrno=[%s]\n",ps->obrno);
	vtcp_log("cashier_c.voctype=[%s]\n",ps->voctype);
	vtcp_log("cashier_c.vocnum=[%s]\n",ps->vocnum);
	vtcp_log("cashier_c.ovoctype=[%s]\n",ps->ovoctype);
	vtcp_log("cashier_c.ovocnum=[%s]\n",ps->ovocnum);
	vtcp_log("cashier_c.avbal=[%f]\n",ps->avbal);
	vtcp_log("cashier_c.useamt=[%f]\n",ps->useamt);
	vtcp_log("cashier_c.feeamt=[%f]\n",ps->feeamt);
	vtcp_log("cashier_c.leavebal=[%f]\n",ps->leavebal);
	vtcp_log("cashier_c.cour=[%s]\n",ps->cour);
	vtcp_log("cashier_c.paybrno=[%s]\n",ps->paybrno);
	vtcp_log("cashier_c.payactno=[%s]\n",ps->payactno);
	vtcp_log("cashier_c.payname=[%s]\n",ps->payname);
	vtcp_log("cashier_c.paybrname=[%s]\n",ps->paybrname);
	vtcp_log("cashier_c.payaddress=[%s]\n",ps->payaddress);
	vtcp_log("cashier_c.cashactno=[%s]\n",ps->cashactno);
	vtcp_log("cashier_c.cashbrno=[%s]\n",ps->cashbrno);
	vtcp_log("cashier_c.cashbrname=[%s]\n",ps->cashbrname);
	vtcp_log("cashier_c.cashaddress=[%s]\n",ps->cashaddress);
	vtcp_log("cashier_c.cashname=[%s]\n",ps->cashname);
	vtcp_log("cashier_c.holdbrno=[%s]\n",ps->holdbrno);
	vtcp_log("cashier_c.holdbrname=[%s]\n",ps->holdbrname);
	vtcp_log("cashier_c.holdactno=[%s]\n",ps->holdactno);
	vtcp_log("cashier_c.holdname=[%s]\n",ps->holdname);
	vtcp_log("cashier_c.lactcls=[%s]\n",ps->lactcls);
	vtcp_log("cashier_c.stat=[%s]\n",ps->stat);
	vtcp_log("cashier_c.cashstat=[%s]\n",ps->cashstat);
	vtcp_log("cashier_c.signday=[%ld]\n",ps->signday);
	vtcp_log("cashier_c.regday=[%ld]\n",ps->regday);
	vtcp_log("cashier_c.cashday=[%ld]\n",ps->cashday);
	vtcp_log("cashier_c.jqday=[%ld]\n",ps->jqday);
	vtcp_log("cashier_c.endday=[%ld]\n",ps->endday);
	vtcp_log("cashier_c.passwd=[%s]\n",ps->passwd);
	vtcp_log("cashier_c.avbaltype=[%s]\n",ps->avbaltype);
	vtcp_log("cashier_c.bptype=[%s]\n",ps->bptype);
	vtcp_log("cashier_c.ccflag=[%s]\n",ps->ccflag);
	vtcp_log("cashier_c.cashflag=[%s]\n",ps->cashflag);
	vtcp_log("cashier_c.drsubject=[%s]\n",ps->drsubject);
	vtcp_log("cashier_c.crsubject=[%s]\n",ps->crsubject);
	vtcp_log("cashier_c.reason=[%s]\n",ps->reason);
	vtcp_log("cashier_c.feeflag=[%s]\n",ps->feeflag);
	vtcp_log("cashier_c.checkflag=[%s]\n",ps->checkflag);
	vtcp_log("cashier_c.inflag=[%s]\n",ps->inflag);
	vtcp_log("cashier_c.optlrno=[%s]\n",ps->optlrno);
	vtcp_log("cashier_c.chktlrno=[%s]\n",ps->chktlrno);
	vtcp_log("cashier_c.passtlrno=[%s]\n",ps->passtlrno);
	vtcp_log("cashier_c.cashtlrno=[%s]\n",ps->cashtlrno);
	vtcp_log("cashier_c.jqtlrno=[%s]\n",ps->jqtlrno);
	vtcp_log("cashier_c.addpassflg=[%s]\n",ps->addpassflg);
	vtcp_log("cashier_c.filler=[%s]\n",ps->filler);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Cashier_Sel(reply,cashier_c,fmtstr,va_alist)
char    *reply;
struct  cashier_c *cashier_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Cashier_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Cashier_Fet_Sel( cashier_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Cashier_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Cashier_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,cashier.* FROM cashier WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE cashier_sel FROM :comm;
	EXEC SQL DECLARE sel_cashier CURSOR FOR cashier_sel;

	EXEC SQL OPEN sel_cashier;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN cashier error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Cashier_Fet_Sel ( struct cashier_c *cashier_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_cashier INTO :cashier_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch cashier error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch cashier finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(cashier_c);

	return 0;
}

int Cashier_Clo_Sel (){
	EXEC SQL CLOSE sel_cashier;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Cashier_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,cashier.* FROM cashier WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE cashier_upd FROM :comm;

	EXEC SQL DECLARE upd_cashier CURSOR FOR cashier_upd;

	EXEC SQL OPEN upd_cashier;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open cashier error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Cashier_Fet_Upd( struct cashier_c *cashier_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_cashier INTO :cashier_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd cashier error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH cashier finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(cashier_c);

	return 0;
}

int Cashier_Upd_Upd( struct cashier_c cashier_c , char * reply){
	int ret;

	EXEC SQL UPDATE cashier SET pono=:cashier_c.pono,
			brno=:cashier_c.brno,
			orbrno=:cashier_c.orbrno,
			payqsactno=:cashier_c.payqsactno,
			txday=:cashier_c.txday,
			lostcnt=:cashier_c.lostcnt,
			obrno=:cashier_c.obrno,
			voctype=:cashier_c.voctype,
			vocnum=:cashier_c.vocnum,
			ovoctype=:cashier_c.ovoctype,
			ovocnum=:cashier_c.ovocnum,
			avbal=:cashier_c.avbal,
			useamt=:cashier_c.useamt,
			feeamt=:cashier_c.feeamt,
			leavebal=:cashier_c.leavebal,
			cour=:cashier_c.cour,
			paybrno=:cashier_c.paybrno,
			payactno=:cashier_c.payactno,
			payname=:cashier_c.payname,
			paybrname=:cashier_c.paybrname,
			payaddress=:cashier_c.payaddress,
			cashactno=:cashier_c.cashactno,
			cashbrno=:cashier_c.cashbrno,
			cashbrname=:cashier_c.cashbrname,
			cashaddress=:cashier_c.cashaddress,
			cashname=:cashier_c.cashname,
			holdbrno=:cashier_c.holdbrno,
			holdbrname=:cashier_c.holdbrname,
			holdactno=:cashier_c.holdactno,
			holdname=:cashier_c.holdname,
			lactcls=:cashier_c.lactcls,
			stat=:cashier_c.stat,
			cashstat=:cashier_c.cashstat,
			signday=:cashier_c.signday,
			regday=:cashier_c.regday,
			cashday=:cashier_c.cashday,
			jqday=:cashier_c.jqday,
			endday=:cashier_c.endday,
			passwd=:cashier_c.passwd,
			avbaltype=:cashier_c.avbaltype,
			bptype=:cashier_c.bptype,
			ccflag=:cashier_c.ccflag,
			cashflag=:cashier_c.cashflag,
			drsubject=:cashier_c.drsubject,
			crsubject=:cashier_c.crsubject,
			reason=:cashier_c.reason,
			feeflag=:cashier_c.feeflag,
			checkflag=:cashier_c.checkflag,
			inflag=:cashier_c.inflag,
			optlrno=:cashier_c.optlrno,
			chktlrno=:cashier_c.chktlrno,
			passtlrno=:cashier_c.passtlrno,
			cashtlrno=:cashier_c.cashtlrno,
			jqtlrno=:cashier_c.jqtlrno,
			addpassflg=:cashier_c.addpassflg,
			filler=:cashier_c.filler
	WHERE rowid=:cashier_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE cashier error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Cashier_Del_Upd(struct cashier_c cashier_c , char * reply  ){

	EXEC SQL DELETE FROM cashier WHERE rowid=:cashier_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE cashier error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Cashier_Clo_Upd( ){
	EXEC SQL CLOSE upd_cashier;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Cashier_Ins( struct cashier_c cashier_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO cashier VALUES (:cashier_c.pono,
			:cashier_c.brno,
			:cashier_c.orbrno,
			:cashier_c.payqsactno,
			:cashier_c.txday,
			:cashier_c.lostcnt,
			:cashier_c.obrno,
			:cashier_c.voctype,
			:cashier_c.vocnum,
			:cashier_c.ovoctype,
			:cashier_c.ovocnum,
			:cashier_c.avbal,
			:cashier_c.useamt,
			:cashier_c.feeamt,
			:cashier_c.leavebal,
			:cashier_c.cour,
			:cashier_c.paybrno,
			:cashier_c.payactno,
			:cashier_c.payname,
			:cashier_c.paybrname,
			:cashier_c.payaddress,
			:cashier_c.cashactno,
			:cashier_c.cashbrno,
			:cashier_c.cashbrname,
			:cashier_c.cashaddress,
			:cashier_c.cashname,
			:cashier_c.holdbrno,
			:cashier_c.holdbrname,
			:cashier_c.holdactno,
			:cashier_c.holdname,
			:cashier_c.lactcls,
			:cashier_c.stat,
			:cashier_c.cashstat,
			:cashier_c.signday,
			:cashier_c.regday,
			:cashier_c.cashday,
			:cashier_c.jqday,
			:cashier_c.endday,
			:cashier_c.passwd,
			:cashier_c.avbaltype,
			:cashier_c.bptype,
			:cashier_c.ccflag,
			:cashier_c.cashflag,
			:cashier_c.drsubject,
			:cashier_c.crsubject,
			:cashier_c.reason,
			:cashier_c.feeflag,
			:cashier_c.checkflag,
			:cashier_c.inflag,
			:cashier_c.optlrno,
			:cashier_c.chktlrno,
			:cashier_c.passtlrno,
			:cashier_c.cashtlrno,
			:cashier_c.jqtlrno,
			:cashier_c.addpassflg,
			:cashier_c.filler);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT cashier error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT cashier error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
