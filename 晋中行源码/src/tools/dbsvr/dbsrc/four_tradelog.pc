#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"four_tradelog_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int four_tradelog_con ( struct four_tradelog_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct four_tradelog_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->tx_code);
	zip_tail(ps->sl_bank);
	zip_tail(ps->tx_tel);
	zip_tail(ps->city_no);
	zip_tail(ps->cur_no);
	zip_tail(ps->ac_no);
	zip_tail(ps->name);
	zip_tail(ps->cancle_trcode);
	zip_tail(ps->old_tel);
	zip_tail(ps->sl_ckmk);
	zip_tail(ps->fk_ckmk);
	zip_tail(ps->tx_stat);
}
int Four_tradelog_Debug(struct four_tradelog_c *ps){
	vtcp_log("four_tradelog_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("four_tradelog_c.tx_date=[%ld]\n",ps->tx_date);
	vtcp_log("four_tradelog_c.tx_time=[%ld]\n",ps->tx_time);
	vtcp_log("four_tradelog_c.tx_code=[%s]\n",ps->tx_code);
	vtcp_log("four_tradelog_c.sl_bank=[%s]\n",ps->sl_bank);
	vtcp_log("four_tradelog_c.tx_tel=[%s]\n",ps->tx_tel);
	vtcp_log("four_tradelog_c.city_no=[%s]\n",ps->city_no);
	vtcp_log("four_tradelog_c.chang_no=[%ld]\n",ps->chang_no);
	vtcp_log("four_tradelog_c.cur_no=[%s]\n",ps->cur_no);
	vtcp_log("four_tradelog_c.trace_no=[%ld]\n",ps->trace_no);
	vtcp_log("four_tradelog_c.ac_no=[%s]\n",ps->ac_no);
	vtcp_log("four_tradelog_c.name=[%s]\n",ps->name);
	vtcp_log("four_tradelog_c.tx_amt=[%f]\n",ps->tx_amt);
	vtcp_log("four_tradelog_c.bal=[%f]\n",ps->bal);
	vtcp_log("four_tradelog_c.sx_amt=[%f]\n",ps->sx_amt);
	vtcp_log("four_tradelog_c.sx_rate=[%f]\n",ps->sx_rate);
	vtcp_log("four_tradelog_c.cancle_trcode=[%s]\n",ps->cancle_trcode);
	vtcp_log("four_tradelog_c.cancle_trace_no=[%ld]\n",ps->cancle_trace_no);
	vtcp_log("four_tradelog_c.old_tel=[%s]\n",ps->old_tel);
	vtcp_log("four_tradelog_c.sl_ckmk=[%s]\n",ps->sl_ckmk);
	vtcp_log("four_tradelog_c.fk_ckmk=[%s]\n",ps->fk_ckmk);
	vtcp_log("four_tradelog_c.tx_stat=[%s]\n",ps->tx_stat);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Four_tradelog_Sel(reply,four_tradelog_c,fmtstr,va_alist)
char    *reply;
struct  four_tradelog_c *four_tradelog_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Four_tradelog_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Four_tradelog_Fet_Sel( four_tradelog_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Four_tradelog_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Four_tradelog_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,four_tradelog.* FROM four_tradelog WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE four_tradelog_sel FROM :comm;
	EXEC SQL DECLARE sel_four_tradelog CURSOR FOR four_tradelog_sel;

	EXEC SQL OPEN sel_four_tradelog;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN four_tradelog error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Four_tradelog_Fet_Sel ( struct four_tradelog_c *four_tradelog_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_four_tradelog INTO :four_tradelog_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch four_tradelog error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch four_tradelog finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(four_tradelog_c);

	return 0;
}

int Four_tradelog_Clo_Sel (){
	EXEC SQL CLOSE sel_four_tradelog;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Four_tradelog_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,four_tradelog.* FROM four_tradelog WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE four_tradelog_upd FROM :comm;

	EXEC SQL DECLARE upd_four_tradelog CURSOR FOR four_tradelog_upd;

	EXEC SQL OPEN upd_four_tradelog;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open four_tradelog error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Four_tradelog_Fet_Upd( struct four_tradelog_c *four_tradelog_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_four_tradelog INTO :four_tradelog_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd four_tradelog error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH four_tradelog finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(four_tradelog_c);

	return 0;
}

int Four_tradelog_Upd_Upd( struct four_tradelog_c four_tradelog_c , char * reply){
	int ret;

	EXEC SQL UPDATE four_tradelog SET tx_date=:four_tradelog_c.tx_date,
			tx_time=:four_tradelog_c.tx_time,
			tx_code=:four_tradelog_c.tx_code,
			sl_bank=:four_tradelog_c.sl_bank,
			tx_tel=:four_tradelog_c.tx_tel,
			city_no=:four_tradelog_c.city_no,
			chang_no=:four_tradelog_c.chang_no,
			cur_no=:four_tradelog_c.cur_no,
			trace_no=:four_tradelog_c.trace_no,
			ac_no=:four_tradelog_c.ac_no,
			name=:four_tradelog_c.name,
			tx_amt=:four_tradelog_c.tx_amt,
			bal=:four_tradelog_c.bal,
			sx_amt=:four_tradelog_c.sx_amt,
			sx_rate=:four_tradelog_c.sx_rate,
			cancle_trcode=:four_tradelog_c.cancle_trcode,
			cancle_trace_no=:four_tradelog_c.cancle_trace_no,
			old_tel=:four_tradelog_c.old_tel,
			sl_ckmk=:four_tradelog_c.sl_ckmk,
			fk_ckmk=:four_tradelog_c.fk_ckmk,
			tx_stat=:four_tradelog_c.tx_stat
	WHERE rowid=:four_tradelog_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE four_tradelog error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Four_tradelog_Del_Upd(struct four_tradelog_c four_tradelog_c , char * reply  ){

	EXEC SQL DELETE FROM four_tradelog WHERE rowid=:four_tradelog_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE four_tradelog error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Four_tradelog_Clo_Upd( ){
	EXEC SQL CLOSE upd_four_tradelog;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Four_tradelog_Ins( struct four_tradelog_c four_tradelog_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO four_tradelog VALUES (:four_tradelog_c.tx_date,
			:four_tradelog_c.tx_time,
			:four_tradelog_c.tx_code,
			:four_tradelog_c.sl_bank,
			:four_tradelog_c.tx_tel,
			:four_tradelog_c.city_no,
			:four_tradelog_c.chang_no,
			:four_tradelog_c.cur_no,
			:four_tradelog_c.trace_no,
			:four_tradelog_c.ac_no,
			:four_tradelog_c.name,
			:four_tradelog_c.tx_amt,
			:four_tradelog_c.bal,
			:four_tradelog_c.sx_amt,
			:four_tradelog_c.sx_rate,
			:four_tradelog_c.cancle_trcode,
			:four_tradelog_c.cancle_trace_no,
			:four_tradelog_c.old_tel,
			:four_tradelog_c.sl_ckmk,
			:four_tradelog_c.fk_ckmk,
			:four_tradelog_c.tx_stat);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT four_tradelog error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT four_tradelog error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
