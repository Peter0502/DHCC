#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"mbfeghvsendlist_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int mbfeghvsendlist_con ( struct mbfeghvsendlist_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct mbfeghvsendlist_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->txssno);
	zip_tail(ps->cmtno);
	zip_tail(ps->cnapsodfi);
	zip_tail(ps->odficode);
	zip_tail(ps->isdficode);
	zip_tail(ps->odficenter);
	zip_tail(ps->payeropenaccbkcode);
	zip_tail(ps->payeracc);
	zip_tail(ps->payername);
	zip_tail(ps->payeraddr);
	zip_tail(ps->rdficode);
	zip_tail(ps->osdficode);
	zip_tail(ps->rdficenter);
	zip_tail(ps->recipientopenaccbk);
	zip_tail(ps->recipientacc);
	zip_tail(ps->recipientname);
	zip_tail(ps->recipientaddr);
	zip_tail(ps->oprttype);
	zip_tail(ps->warrantno);
	zip_tail(ps->procstate);
	zip_tail(ps->sendtime);
	zip_tail(ps->settime);
	zip_tail(ps->errcode);
	zip_tail(ps->prilevel);
	zip_tail(ps->putuser);
	zip_tail(ps->checkuser);
	zip_tail(ps->grantuser);
	zip_tail(ps->billofxchngseal);
	zip_tail(ps->checkstate);
	zip_tail(ps->incomeacno);
	zip_tail(ps->incometime);
	zip_tail(ps->incometel);
	zip_tail(ps->resendtxssno);
	zip_tail(ps->strinfo);
	zip_tail(ps->content);
}
int Mbfeghvsendlist_Debug(struct mbfeghvsendlist_c *ps){
	vtcp_log("mbfeghvsendlist_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("mbfeghvsendlist_c.txssno=[%s]\n",ps->txssno);
	vtcp_log("mbfeghvsendlist_c.consigndate=[%ld]\n",ps->consigndate);
	vtcp_log("mbfeghvsendlist_c.cmtno=[%s]\n",ps->cmtno);
	vtcp_log("mbfeghvsendlist_c.amount=[%f]\n",ps->amount);
	vtcp_log("mbfeghvsendlist_c.cnapsodfi=[%s]\n",ps->cnapsodfi);
	vtcp_log("mbfeghvsendlist_c.odficode=[%s]\n",ps->odficode);
	vtcp_log("mbfeghvsendlist_c.isdficode=[%s]\n",ps->isdficode);
	vtcp_log("mbfeghvsendlist_c.odficenter=[%s]\n",ps->odficenter);
	vtcp_log("mbfeghvsendlist_c.payeropenaccbkcode=[%s]\n",ps->payeropenaccbkcode);
	vtcp_log("mbfeghvsendlist_c.payeracc=[%s]\n",ps->payeracc);
	vtcp_log("mbfeghvsendlist_c.payername=[%s]\n",ps->payername);
	vtcp_log("mbfeghvsendlist_c.payeraddr=[%s]\n",ps->payeraddr);
	vtcp_log("mbfeghvsendlist_c.rdficode=[%s]\n",ps->rdficode);
	vtcp_log("mbfeghvsendlist_c.osdficode=[%s]\n",ps->osdficode);
	vtcp_log("mbfeghvsendlist_c.rdficenter=[%s]\n",ps->rdficenter);
	vtcp_log("mbfeghvsendlist_c.recipientopenaccbk=[%s]\n",ps->recipientopenaccbk);
	vtcp_log("mbfeghvsendlist_c.recipientacc=[%s]\n",ps->recipientacc);
	vtcp_log("mbfeghvsendlist_c.recipientname=[%s]\n",ps->recipientname);
	vtcp_log("mbfeghvsendlist_c.recipientaddr=[%s]\n",ps->recipientaddr);
	vtcp_log("mbfeghvsendlist_c.oprttype=[%s]\n",ps->oprttype);
	vtcp_log("mbfeghvsendlist_c.warrantdate=[%ld]\n",ps->warrantdate);
	vtcp_log("mbfeghvsendlist_c.warrantno=[%s]\n",ps->warrantno);
	vtcp_log("mbfeghvsendlist_c.compensationamnt=[%f]\n",ps->compensationamnt);
	vtcp_log("mbfeghvsendlist_c.repudiationamnt=[%f]\n",ps->repudiationamnt);
	vtcp_log("mbfeghvsendlist_c.procstate=[%s]\n",ps->procstate);
	vtcp_log("mbfeghvsendlist_c.sendtime=[%s]\n",ps->sendtime);
	vtcp_log("mbfeghvsendlist_c.settime=[%s]\n",ps->settime);
	vtcp_log("mbfeghvsendlist_c.errcode=[%s]\n",ps->errcode);
	vtcp_log("mbfeghvsendlist_c.prilevel=[%s]\n",ps->prilevel);
	vtcp_log("mbfeghvsendlist_c.putuser=[%s]\n",ps->putuser);
	vtcp_log("mbfeghvsendlist_c.checkuser=[%s]\n",ps->checkuser);
	vtcp_log("mbfeghvsendlist_c.grantuser=[%s]\n",ps->grantuser);
	vtcp_log("mbfeghvsendlist_c.billofxchngseal=[%s]\n",ps->billofxchngseal);
	vtcp_log("mbfeghvsendlist_c.checkstate=[%s]\n",ps->checkstate);
	vtcp_log("mbfeghvsendlist_c.flowno=[%ld]\n",ps->flowno);
	vtcp_log("mbfeghvsendlist_c.rtnflowno=[%ld]\n",ps->rtnflowno);
	vtcp_log("mbfeghvsendlist_c.incomeacno=[%s]\n",ps->incomeacno);
	vtcp_log("mbfeghvsendlist_c.incometime=[%s]\n",ps->incometime);
	vtcp_log("mbfeghvsendlist_c.incomeflowno=[%ld]\n",ps->incomeflowno);
	vtcp_log("mbfeghvsendlist_c.incometel=[%s]\n",ps->incometel);
	vtcp_log("mbfeghvsendlist_c.resenddate=[%ld]\n",ps->resenddate);
	vtcp_log("mbfeghvsendlist_c.resendtxssno=[%s]\n",ps->resendtxssno);
	vtcp_log("mbfeghvsendlist_c.strinfo=[%s]\n",ps->strinfo);
	vtcp_log("mbfeghvsendlist_c.content=[%s]\n",ps->content);
	vtcp_log("mbfeghvsendlist_c.printno=[%ld]\n",ps->printno);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Mbfeghvsendlist_Sel(reply,mbfeghvsendlist_c,fmtstr,va_alist)
char    *reply;
struct  mbfeghvsendlist_c *mbfeghvsendlist_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Mbfeghvsendlist_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Mbfeghvsendlist_Fet_Sel( mbfeghvsendlist_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Mbfeghvsendlist_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Mbfeghvsendlist_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,mbfeghvsendlist.* FROM mbfeghvsendlist WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mbfeghvsendlist_sel FROM :comm;
	EXEC SQL DECLARE sel_mbfeghvsendlist CURSOR FOR mbfeghvsendlist_sel;

	EXEC SQL OPEN sel_mbfeghvsendlist;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN mbfeghvsendlist error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mbfeghvsendlist_Fet_Sel ( struct mbfeghvsendlist_c *mbfeghvsendlist_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_mbfeghvsendlist INTO :mbfeghvsendlist_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch mbfeghvsendlist error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch mbfeghvsendlist finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(mbfeghvsendlist_c);

	return 0;
}

int Mbfeghvsendlist_Clo_Sel (){
	EXEC SQL CLOSE sel_mbfeghvsendlist;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Mbfeghvsendlist_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,mbfeghvsendlist.* FROM mbfeghvsendlist WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mbfeghvsendlist_upd FROM :comm;

	EXEC SQL DECLARE upd_mbfeghvsendlist CURSOR FOR mbfeghvsendlist_upd;

	EXEC SQL OPEN upd_mbfeghvsendlist;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open mbfeghvsendlist error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mbfeghvsendlist_Fet_Upd( struct mbfeghvsendlist_c *mbfeghvsendlist_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_mbfeghvsendlist INTO :mbfeghvsendlist_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd mbfeghvsendlist error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH mbfeghvsendlist finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(mbfeghvsendlist_c);

	return 0;
}

int Mbfeghvsendlist_Upd_Upd( struct mbfeghvsendlist_c mbfeghvsendlist_c , char * reply){
	int ret;

	EXEC SQL UPDATE mbfeghvsendlist SET txssno=:mbfeghvsendlist_c.txssno,
			consigndate=:mbfeghvsendlist_c.consigndate,
			cmtno=:mbfeghvsendlist_c.cmtno,
			amount=:mbfeghvsendlist_c.amount,
			cnapsodfi=:mbfeghvsendlist_c.cnapsodfi,
			odficode=:mbfeghvsendlist_c.odficode,
			isdficode=:mbfeghvsendlist_c.isdficode,
			odficenter=:mbfeghvsendlist_c.odficenter,
			payeropenaccbkcode=:mbfeghvsendlist_c.payeropenaccbkcode,
			payeracc=:mbfeghvsendlist_c.payeracc,
			payername=:mbfeghvsendlist_c.payername,
			payeraddr=:mbfeghvsendlist_c.payeraddr,
			rdficode=:mbfeghvsendlist_c.rdficode,
			osdficode=:mbfeghvsendlist_c.osdficode,
			rdficenter=:mbfeghvsendlist_c.rdficenter,
			recipientopenaccbk=:mbfeghvsendlist_c.recipientopenaccbk,
			recipientacc=:mbfeghvsendlist_c.recipientacc,
			recipientname=:mbfeghvsendlist_c.recipientname,
			recipientaddr=:mbfeghvsendlist_c.recipientaddr,
			oprttype=:mbfeghvsendlist_c.oprttype,
			warrantdate=:mbfeghvsendlist_c.warrantdate,
			warrantno=:mbfeghvsendlist_c.warrantno,
			compensationamnt=:mbfeghvsendlist_c.compensationamnt,
			repudiationamnt=:mbfeghvsendlist_c.repudiationamnt,
			procstate=:mbfeghvsendlist_c.procstate,
			sendtime=:mbfeghvsendlist_c.sendtime,
			settime=:mbfeghvsendlist_c.settime,
			errcode=:mbfeghvsendlist_c.errcode,
			prilevel=:mbfeghvsendlist_c.prilevel,
			putuser=:mbfeghvsendlist_c.putuser,
			checkuser=:mbfeghvsendlist_c.checkuser,
			grantuser=:mbfeghvsendlist_c.grantuser,
			billofxchngseal=:mbfeghvsendlist_c.billofxchngseal,
			checkstate=:mbfeghvsendlist_c.checkstate,
			flowno=:mbfeghvsendlist_c.flowno,
			rtnflowno=:mbfeghvsendlist_c.rtnflowno,
			incomeacno=:mbfeghvsendlist_c.incomeacno,
			incometime=:mbfeghvsendlist_c.incometime,
			incomeflowno=:mbfeghvsendlist_c.incomeflowno,
			incometel=:mbfeghvsendlist_c.incometel,
			resenddate=:mbfeghvsendlist_c.resenddate,
			resendtxssno=:mbfeghvsendlist_c.resendtxssno,
			strinfo=:mbfeghvsendlist_c.strinfo,
			content=:mbfeghvsendlist_c.content,
			printno=:mbfeghvsendlist_c.printno
	WHERE rowid=:mbfeghvsendlist_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE mbfeghvsendlist error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Mbfeghvsendlist_Del_Upd(struct mbfeghvsendlist_c mbfeghvsendlist_c , char * reply  ){

	EXEC SQL DELETE FROM mbfeghvsendlist WHERE rowid=:mbfeghvsendlist_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE mbfeghvsendlist error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mbfeghvsendlist_Clo_Upd( ){
	EXEC SQL CLOSE upd_mbfeghvsendlist;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Mbfeghvsendlist_Ins( struct mbfeghvsendlist_c mbfeghvsendlist_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO mbfeghvsendlist VALUES (:mbfeghvsendlist_c.txssno,
			:mbfeghvsendlist_c.consigndate,
			:mbfeghvsendlist_c.cmtno,
			:mbfeghvsendlist_c.amount,
			:mbfeghvsendlist_c.cnapsodfi,
			:mbfeghvsendlist_c.odficode,
			:mbfeghvsendlist_c.isdficode,
			:mbfeghvsendlist_c.odficenter,
			:mbfeghvsendlist_c.payeropenaccbkcode,
			:mbfeghvsendlist_c.payeracc,
			:mbfeghvsendlist_c.payername,
			:mbfeghvsendlist_c.payeraddr,
			:mbfeghvsendlist_c.rdficode,
			:mbfeghvsendlist_c.osdficode,
			:mbfeghvsendlist_c.rdficenter,
			:mbfeghvsendlist_c.recipientopenaccbk,
			:mbfeghvsendlist_c.recipientacc,
			:mbfeghvsendlist_c.recipientname,
			:mbfeghvsendlist_c.recipientaddr,
			:mbfeghvsendlist_c.oprttype,
			:mbfeghvsendlist_c.warrantdate,
			:mbfeghvsendlist_c.warrantno,
			:mbfeghvsendlist_c.compensationamnt,
			:mbfeghvsendlist_c.repudiationamnt,
			:mbfeghvsendlist_c.procstate,
			:mbfeghvsendlist_c.sendtime,
			:mbfeghvsendlist_c.settime,
			:mbfeghvsendlist_c.errcode,
			:mbfeghvsendlist_c.prilevel,
			:mbfeghvsendlist_c.putuser,
			:mbfeghvsendlist_c.checkuser,
			:mbfeghvsendlist_c.grantuser,
			:mbfeghvsendlist_c.billofxchngseal,
			:mbfeghvsendlist_c.checkstate,
			:mbfeghvsendlist_c.flowno,
			:mbfeghvsendlist_c.rtnflowno,
			:mbfeghvsendlist_c.incomeacno,
			:mbfeghvsendlist_c.incometime,
			:mbfeghvsendlist_c.incomeflowno,
			:mbfeghvsendlist_c.incometel,
			:mbfeghvsendlist_c.resenddate,
			:mbfeghvsendlist_c.resendtxssno,
			:mbfeghvsendlist_c.strinfo,
			:mbfeghvsendlist_c.content,
			:mbfeghvsendlist_c.printno);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT mbfeghvsendlist error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT mbfeghvsendlist error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
