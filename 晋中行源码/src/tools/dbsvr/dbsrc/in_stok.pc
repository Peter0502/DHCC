#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"in_stok_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int in_stok_con ( struct in_stok_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct in_stok_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->stokno);
	zip_tail(ps->ostokno);
	zip_tail(ps->name);
	zip_tail(ps->stcktype);
	zip_tail(ps->idtype);
	zip_tail(ps->idno);
	zip_tail(ps->addr);
	zip_tail(ps->stat);
	zip_tail(ps->losssts);
	zip_tail(ps->holdsts);
	zip_tail(ps->txcode);
	zip_tail(ps->txtype);
	zip_tail(ps->pactno);
	zip_tail(ps->tactno);
	zip_tail(ps->opndate);
	zip_tail(ps->txdate);
	zip_tail(ps->drawpwdflag);
	zip_tail(ps->pwd);
	zip_tail(ps->notenum);
	zip_tail(ps->txbrno);
	zip_tail(ps->tel);
	zip_tail(ps->cifno);
}
int In_stok_Debug(struct in_stok_c *ps){
	vtcp_log("in_stok_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("in_stok_c.stokno=[%s]\n",ps->stokno);
	vtcp_log("in_stok_c.ostokno=[%s]\n",ps->ostokno);
	vtcp_log("in_stok_c.name=[%s]\n",ps->name);
	vtcp_log("in_stok_c.stcktype=[%s]\n",ps->stcktype);
	vtcp_log("in_stok_c.idtype=[%s]\n",ps->idtype);
	vtcp_log("in_stok_c.idno=[%s]\n",ps->idno);
	vtcp_log("in_stok_c.addr=[%s]\n",ps->addr);
	vtcp_log("in_stok_c.stokquant=[%f]\n",ps->stokquant);
	vtcp_log("in_stok_c.stokamt=[%f]\n",ps->stokamt);
	vtcp_log("in_stok_c.bal=[%f]\n",ps->bal);
	vtcp_log("in_stok_c.stat=[%s]\n",ps->stat);
	vtcp_log("in_stok_c.losssts=[%s]\n",ps->losssts);
	vtcp_log("in_stok_c.holdsts=[%s]\n",ps->holdsts);
	vtcp_log("in_stok_c.ctlamt=[%f]\n",ps->ctlamt);
	vtcp_log("in_stok_c.txcode=[%s]\n",ps->txcode);
	vtcp_log("in_stok_c.txtype=[%s]\n",ps->txtype);
	vtcp_log("in_stok_c.bookbal=[%f]\n",ps->bookbal);
	vtcp_log("in_stok_c.nowcnt=[%ld]\n",ps->nowcnt);
	vtcp_log("in_stok_c.bookcnt=[%ld]\n",ps->bookcnt);
	vtcp_log("in_stok_c.unprtcnt=[%ld]\n",ps->unprtcnt);
	vtcp_log("in_stok_c.pactno=[%s]\n",ps->pactno);
	vtcp_log("in_stok_c.tactno=[%s]\n",ps->tactno);
	vtcp_log("in_stok_c.opndate=[%s]\n",ps->opndate);
	vtcp_log("in_stok_c.txdate=[%s]\n",ps->txdate);
	vtcp_log("in_stok_c.drawpwdflag=[%s]\n",ps->drawpwdflag);
	vtcp_log("in_stok_c.pwd=[%s]\n",ps->pwd);
	vtcp_log("in_stok_c.notenum=[%s]\n",ps->notenum);
	vtcp_log("in_stok_c.txbrno=[%s]\n",ps->txbrno);
	vtcp_log("in_stok_c.tel=[%s]\n",ps->tel);
	vtcp_log("in_stok_c.cifno=[%s]\n",ps->cifno);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int In_stok_Sel(reply,in_stok_c,fmtstr,va_alist)
char    *reply;
struct  in_stok_c *in_stok_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = In_stok_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = In_stok_Fet_Sel( in_stok_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	In_stok_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int In_stok_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,in_stok.* FROM in_stok WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE in_stok_sel FROM :comm;
	EXEC SQL DECLARE sel_in_stok CURSOR FOR in_stok_sel;

	EXEC SQL OPEN sel_in_stok;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN in_stok error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int In_stok_Fet_Sel ( struct in_stok_c *in_stok_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_in_stok INTO :in_stok_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch in_stok error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch in_stok finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(in_stok_c);

	return 0;
}

int In_stok_Clo_Sel (){
	EXEC SQL CLOSE sel_in_stok;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int In_stok_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,in_stok.* FROM in_stok WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE in_stok_upd FROM :comm;

	EXEC SQL DECLARE upd_in_stok CURSOR FOR in_stok_upd;

	EXEC SQL OPEN upd_in_stok;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open in_stok error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int In_stok_Fet_Upd( struct in_stok_c *in_stok_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_in_stok INTO :in_stok_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd in_stok error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH in_stok finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(in_stok_c);

	return 0;
}

int In_stok_Upd_Upd( struct in_stok_c in_stok_c , char * reply){
	int ret;

	EXEC SQL UPDATE in_stok SET stokno=:in_stok_c.stokno,
			ostokno=:in_stok_c.ostokno,
			name=:in_stok_c.name,
			stcktype=:in_stok_c.stcktype,
			idtype=:in_stok_c.idtype,
			idno=:in_stok_c.idno,
			addr=:in_stok_c.addr,
			stokquant=:in_stok_c.stokquant,
			stokamt=:in_stok_c.stokamt,
			bal=:in_stok_c.bal,
			stat=:in_stok_c.stat,
			losssts=:in_stok_c.losssts,
			holdsts=:in_stok_c.holdsts,
			ctlamt=:in_stok_c.ctlamt,
			txcode=:in_stok_c.txcode,
			txtype=:in_stok_c.txtype,
			bookbal=:in_stok_c.bookbal,
			nowcnt=:in_stok_c.nowcnt,
			bookcnt=:in_stok_c.bookcnt,
			unprtcnt=:in_stok_c.unprtcnt,
			pactno=:in_stok_c.pactno,
			tactno=:in_stok_c.tactno,
			opndate=:in_stok_c.opndate,
			txdate=:in_stok_c.txdate,
			drawpwdflag=:in_stok_c.drawpwdflag,
			pwd=:in_stok_c.pwd,
			notenum=:in_stok_c.notenum,
			txbrno=:in_stok_c.txbrno,
			tel=:in_stok_c.tel,
			cifno=:in_stok_c.cifno
	WHERE rowid=:in_stok_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE in_stok error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int In_stok_Del_Upd(struct in_stok_c in_stok_c , char * reply  ){

	EXEC SQL DELETE FROM in_stok WHERE rowid=:in_stok_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE in_stok error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int In_stok_Clo_Upd( ){
	EXEC SQL CLOSE upd_in_stok;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int In_stok_Ins( struct in_stok_c in_stok_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO in_stok VALUES (:in_stok_c.stokno,
			:in_stok_c.ostokno,
			:in_stok_c.name,
			:in_stok_c.stcktype,
			:in_stok_c.idtype,
			:in_stok_c.idno,
			:in_stok_c.addr,
			:in_stok_c.stokquant,
			:in_stok_c.stokamt,
			:in_stok_c.bal,
			:in_stok_c.stat,
			:in_stok_c.losssts,
			:in_stok_c.holdsts,
			:in_stok_c.ctlamt,
			:in_stok_c.txcode,
			:in_stok_c.txtype,
			:in_stok_c.bookbal,
			:in_stok_c.nowcnt,
			:in_stok_c.bookcnt,
			:in_stok_c.unprtcnt,
			:in_stok_c.pactno,
			:in_stok_c.tactno,
			:in_stok_c.opndate,
			:in_stok_c.txdate,
			:in_stok_c.drawpwdflag,
			:in_stok_c.pwd,
			:in_stok_c.notenum,
			:in_stok_c.txbrno,
			:in_stok_c.tel,
			:in_stok_c.cifno);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT in_stok error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT in_stok error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
