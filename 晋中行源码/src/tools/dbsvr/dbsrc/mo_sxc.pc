#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"mo_sxc_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int mo_sxc_con ( struct mo_sxc_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct mo_sxc_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->tx_br_no);
	zip_tail(ps->tx_tel);
	zip_tail(ps->untx_br_no);
	zip_tail(ps->untx_tel);
	zip_tail(ps->opn_br_no);
	zip_tail(ps->sts);
	zip_tail(ps->flag);
	zip_tail(ps->qy_type);
}
int Mo_sxc_Debug(struct mo_sxc_c *ps){
	vtcp_log("mo_sxc_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("mo_sxc_c.ac_id=[%ld]\n",ps->ac_id);
	vtcp_log("mo_sxc_c.ac_seqn=[%ld]\n",ps->ac_seqn);
	vtcp_log("mo_sxc_c.bal=[%f]\n",ps->bal);
	vtcp_log("mo_sxc_c.intst=[%f]\n",ps->intst);
	vtcp_log("mo_sxc_c.un_intst=[%f]\n",ps->un_intst);
	vtcp_log("mo_sxc_c.tx_date=[%ld]\n",ps->tx_date);
	vtcp_log("mo_sxc_c.trace_no=[%ld]\n",ps->trace_no);
	vtcp_log("mo_sxc_c.untx_date=[%ld]\n",ps->untx_date);
	vtcp_log("mo_sxc_c.untrace_no=[%ld]\n",ps->untrace_no);
	vtcp_log("mo_sxc_c.tx_br_no=[%s]\n",ps->tx_br_no);
	vtcp_log("mo_sxc_c.tx_tel=[%s]\n",ps->tx_tel);
	vtcp_log("mo_sxc_c.untx_br_no=[%s]\n",ps->untx_br_no);
	vtcp_log("mo_sxc_c.untx_tel=[%s]\n",ps->untx_tel);
	vtcp_log("mo_sxc_c.opn_br_no=[%s]\n",ps->opn_br_no);
	vtcp_log("mo_sxc_c.sts=[%s]\n",ps->sts);
	vtcp_log("mo_sxc_c.flag=[%s]\n",ps->flag);
	vtcp_log("mo_sxc_c.qy_type=[%s]\n",ps->qy_type);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Mo_sxc_Sel(reply,mo_sxc_c,fmtstr,va_alist)
char    *reply;
struct  mo_sxc_c *mo_sxc_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Mo_sxc_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Mo_sxc_Fet_Sel( mo_sxc_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Mo_sxc_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Mo_sxc_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,mo_sxc.* FROM mo_sxc WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mo_sxc_sel FROM :comm;
	EXEC SQL DECLARE sel_mo_sxc CURSOR FOR mo_sxc_sel;

	EXEC SQL OPEN sel_mo_sxc;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN mo_sxc error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_sxc_Fet_Sel ( struct mo_sxc_c *mo_sxc_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_mo_sxc INTO :mo_sxc_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch mo_sxc error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch mo_sxc finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(mo_sxc_c);

	return 0;
}

int Mo_sxc_Clo_Sel (){
	EXEC SQL CLOSE sel_mo_sxc;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Mo_sxc_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,mo_sxc.* FROM mo_sxc WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mo_sxc_upd FROM :comm;

	EXEC SQL DECLARE upd_mo_sxc CURSOR FOR mo_sxc_upd;

	EXEC SQL OPEN upd_mo_sxc;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open mo_sxc error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_sxc_Fet_Upd( struct mo_sxc_c *mo_sxc_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_mo_sxc INTO :mo_sxc_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd mo_sxc error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH mo_sxc finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(mo_sxc_c);

	return 0;
}

int Mo_sxc_Upd_Upd( struct mo_sxc_c mo_sxc_c , char * reply){
	int ret;

	EXEC SQL UPDATE mo_sxc SET ac_id=:mo_sxc_c.ac_id,
			ac_seqn=:mo_sxc_c.ac_seqn,
			bal=:mo_sxc_c.bal,
			intst=:mo_sxc_c.intst,
			un_intst=:mo_sxc_c.un_intst,
			tx_date=:mo_sxc_c.tx_date,
			trace_no=:mo_sxc_c.trace_no,
			untx_date=:mo_sxc_c.untx_date,
			untrace_no=:mo_sxc_c.untrace_no,
			tx_br_no=:mo_sxc_c.tx_br_no,
			tx_tel=:mo_sxc_c.tx_tel,
			untx_br_no=:mo_sxc_c.untx_br_no,
			untx_tel=:mo_sxc_c.untx_tel,
			opn_br_no=:mo_sxc_c.opn_br_no,
			sts=:mo_sxc_c.sts,
			flag=:mo_sxc_c.flag,
			qy_type=:mo_sxc_c.qy_type
	WHERE rowid=:mo_sxc_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE mo_sxc error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Mo_sxc_Del_Upd(struct mo_sxc_c mo_sxc_c , char * reply  ){

	EXEC SQL DELETE FROM mo_sxc WHERE rowid=:mo_sxc_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE mo_sxc error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_sxc_Clo_Upd( ){
	EXEC SQL CLOSE upd_mo_sxc;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Mo_sxc_Ins( struct mo_sxc_c mo_sxc_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO mo_sxc VALUES (:mo_sxc_c.ac_id,
			:mo_sxc_c.ac_seqn,
			:mo_sxc_c.bal,
			:mo_sxc_c.intst,
			:mo_sxc_c.un_intst,
			:mo_sxc_c.tx_date,
			:mo_sxc_c.trace_no,
			:mo_sxc_c.untx_date,
			:mo_sxc_c.untrace_no,
			:mo_sxc_c.tx_br_no,
			:mo_sxc_c.tx_tel,
			:mo_sxc_c.untx_br_no,
			:mo_sxc_c.untx_tel,
			:mo_sxc_c.opn_br_no,
			:mo_sxc_c.sts,
			:mo_sxc_c.flag,
			:mo_sxc_c.qy_type);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT mo_sxc error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT mo_sxc error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
