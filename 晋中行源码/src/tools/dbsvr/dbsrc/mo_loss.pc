#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"mo_loss_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int mo_loss_con ( struct mo_loss_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct mo_loss_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->ac_no);
	zip_tail(ps->id_type);
	zip_tail(ps->id_no);
	zip_tail(ps->name);
	zip_tail(ps->loss_ind);
	zip_tail(ps->prop_book_loss);
	zip_tail(ps->unloss_ind);
	zip_tail(ps->opn_br_no);
	zip_tail(ps->loss_br_no);
	zip_tail(ps->loss_tel);
	zip_tail(ps->loss_chk);
	zip_tail(ps->loss_auth);
	zip_tail(ps->unloss_tel);
	zip_tail(ps->unloss_chk);
	zip_tail(ps->unloss_auth);
	zip_tail(ps->new_ac_no);
}
int Mo_loss_Debug(struct mo_loss_c *ps){
	vtcp_log("mo_loss_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("mo_loss_c.ac_no=[%s]\n",ps->ac_no);
	vtcp_log("mo_loss_c.id_type=[%s]\n",ps->id_type);
	vtcp_log("mo_loss_c.id_no=[%s]\n",ps->id_no);
	vtcp_log("mo_loss_c.name=[%s]\n",ps->name);
	vtcp_log("mo_loss_c.loss_ind=[%s]\n",ps->loss_ind);
	vtcp_log("mo_loss_c.prop_book_loss=[%s]\n",ps->prop_book_loss);
	vtcp_log("mo_loss_c.unloss_ind=[%s]\n",ps->unloss_ind);
	vtcp_log("mo_loss_c.opn_br_no=[%s]\n",ps->opn_br_no);
	vtcp_log("mo_loss_c.loss_date=[%ld]\n",ps->loss_date);
	vtcp_log("mo_loss_c.loss_br_no=[%s]\n",ps->loss_br_no);
	vtcp_log("mo_loss_c.loss_tel=[%s]\n",ps->loss_tel);
	vtcp_log("mo_loss_c.loss_chk=[%s]\n",ps->loss_chk);
	vtcp_log("mo_loss_c.loss_auth=[%s]\n",ps->loss_auth);
	vtcp_log("mo_loss_c.unloss_date=[%ld]\n",ps->unloss_date);
	vtcp_log("mo_loss_c.unloss_tel=[%s]\n",ps->unloss_tel);
	vtcp_log("mo_loss_c.unloss_chk=[%s]\n",ps->unloss_chk);
	vtcp_log("mo_loss_c.unloss_auth=[%s]\n",ps->unloss_auth);
	vtcp_log("mo_loss_c.new_ac_no=[%s]\n",ps->new_ac_no);
	vtcp_log("mo_loss_c.wrk_date=[%ld]\n",ps->wrk_date);
	vtcp_log("mo_loss_c.trace_no=[%ld]\n",ps->trace_no);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Mo_loss_Sel(reply,mo_loss_c,fmtstr,va_alist)
char    *reply;
struct  mo_loss_c *mo_loss_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Mo_loss_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Mo_loss_Fet_Sel( mo_loss_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Mo_loss_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Mo_loss_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,mo_loss.* FROM mo_loss WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mo_loss_sel FROM :comm;
	EXEC SQL DECLARE sel_mo_loss CURSOR FOR mo_loss_sel;

	EXEC SQL OPEN sel_mo_loss;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN mo_loss error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_loss_Fet_Sel ( struct mo_loss_c *mo_loss_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_mo_loss INTO :mo_loss_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch mo_loss error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch mo_loss finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(mo_loss_c);

	return 0;
}

int Mo_loss_Clo_Sel (){
	EXEC SQL CLOSE sel_mo_loss;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Mo_loss_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,mo_loss.* FROM mo_loss WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mo_loss_upd FROM :comm;

	EXEC SQL DECLARE upd_mo_loss CURSOR FOR mo_loss_upd;

	EXEC SQL OPEN upd_mo_loss;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open mo_loss error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_loss_Fet_Upd( struct mo_loss_c *mo_loss_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_mo_loss INTO :mo_loss_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd mo_loss error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH mo_loss finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(mo_loss_c);

	return 0;
}

int Mo_loss_Upd_Upd( struct mo_loss_c mo_loss_c , char * reply){
	int ret;

	EXEC SQL UPDATE mo_loss SET ac_no=:mo_loss_c.ac_no,
			id_type=:mo_loss_c.id_type,
			id_no=:mo_loss_c.id_no,
			name=:mo_loss_c.name,
			loss_ind=:mo_loss_c.loss_ind,
			prop_book_loss=:mo_loss_c.prop_book_loss,
			unloss_ind=:mo_loss_c.unloss_ind,
			opn_br_no=:mo_loss_c.opn_br_no,
			loss_date=:mo_loss_c.loss_date,
			loss_br_no=:mo_loss_c.loss_br_no,
			loss_tel=:mo_loss_c.loss_tel,
			loss_chk=:mo_loss_c.loss_chk,
			loss_auth=:mo_loss_c.loss_auth,
			unloss_date=:mo_loss_c.unloss_date,
			unloss_tel=:mo_loss_c.unloss_tel,
			unloss_chk=:mo_loss_c.unloss_chk,
			unloss_auth=:mo_loss_c.unloss_auth,
			new_ac_no=:mo_loss_c.new_ac_no,
			wrk_date=:mo_loss_c.wrk_date,
			trace_no=:mo_loss_c.trace_no
	WHERE rowid=:mo_loss_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE mo_loss error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Mo_loss_Del_Upd(struct mo_loss_c mo_loss_c , char * reply  ){

	EXEC SQL DELETE FROM mo_loss WHERE rowid=:mo_loss_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE mo_loss error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_loss_Clo_Upd( ){
	EXEC SQL CLOSE upd_mo_loss;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Mo_loss_Ins( struct mo_loss_c mo_loss_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO mo_loss VALUES (:mo_loss_c.ac_no,
			:mo_loss_c.id_type,
			:mo_loss_c.id_no,
			:mo_loss_c.name,
			:mo_loss_c.loss_ind,
			:mo_loss_c.prop_book_loss,
			:mo_loss_c.unloss_ind,
			:mo_loss_c.opn_br_no,
			:mo_loss_c.loss_date,
			:mo_loss_c.loss_br_no,
			:mo_loss_c.loss_tel,
			:mo_loss_c.loss_chk,
			:mo_loss_c.loss_auth,
			:mo_loss_c.unloss_date,
			:mo_loss_c.unloss_tel,
			:mo_loss_c.unloss_chk,
			:mo_loss_c.unloss_auth,
			:mo_loss_c.new_ac_no,
			:mo_loss_c.wrk_date,
			:mo_loss_c.trace_no);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT mo_loss error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT mo_loss error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
