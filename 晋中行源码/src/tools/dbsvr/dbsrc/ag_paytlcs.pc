#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"ag_paytlcs_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int ag_paytlcs_con ( struct ag_paytlcs_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct ag_paytlcs_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->unit_no);
	zip_tail(ps->bank_tlcs);
	zip_tail(ps->batch_no);
	zip_tail(ps->unit_tlcs);
	zip_tail(ps->pre_no);
	zip_tail(ps->bank_acct_no);
	zip_tail(ps->trn_date);
	zip_tail(ps->trn_time);
	zip_tail(ps->br_no);
	zip_tail(ps->tel_no);
	zip_tail(ps->trcode);
	zip_tail(ps->item_no);
	zip_tail(ps->pay_month);
	zip_tail(ps->pay_way);
	zip_tail(ps->ckmk_flag);
	zip_tail(ps->bill_flag);
	zip_tail(ps->bill_no);
	zip_tail(ps->stat);
}
int Ag_paytlcs_Debug(struct ag_paytlcs_c *ps){
	vtcp_log("ag_paytlcs_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("ag_paytlcs_c.unit_no=[%s]\n",ps->unit_no);
	vtcp_log("ag_paytlcs_c.bank_tlcs=[%s]\n",ps->bank_tlcs);
	vtcp_log("ag_paytlcs_c.batch_no=[%s]\n",ps->batch_no);
	vtcp_log("ag_paytlcs_c.unit_tlcs=[%s]\n",ps->unit_tlcs);
	vtcp_log("ag_paytlcs_c.pre_no=[%s]\n",ps->pre_no);
	vtcp_log("ag_paytlcs_c.bank_acct_no=[%s]\n",ps->bank_acct_no);
	vtcp_log("ag_paytlcs_c.trn_date=[%s]\n",ps->trn_date);
	vtcp_log("ag_paytlcs_c.trn_time=[%s]\n",ps->trn_time);
	vtcp_log("ag_paytlcs_c.br_no=[%s]\n",ps->br_no);
	vtcp_log("ag_paytlcs_c.tel_no=[%s]\n",ps->tel_no);
	vtcp_log("ag_paytlcs_c.trn_amt=[%f]\n",ps->trn_amt);
	vtcp_log("ag_paytlcs_c.trcode=[%s]\n",ps->trcode);
	vtcp_log("ag_paytlcs_c.item_no=[%s]\n",ps->item_no);
	vtcp_log("ag_paytlcs_c.pay_month=[%s]\n",ps->pay_month);
	vtcp_log("ag_paytlcs_c.pay_way=[%s]\n",ps->pay_way);
	vtcp_log("ag_paytlcs_c.ckmk_flag=[%s]\n",ps->ckmk_flag);
	vtcp_log("ag_paytlcs_c.bill_flag=[%s]\n",ps->bill_flag);
	vtcp_log("ag_paytlcs_c.bill_no=[%s]\n",ps->bill_no);
	vtcp_log("ag_paytlcs_c.stat=[%s]\n",ps->stat);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Ag_paytlcs_Sel(reply,ag_paytlcs_c,fmtstr,va_alist)
char    *reply;
struct  ag_paytlcs_c *ag_paytlcs_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Ag_paytlcs_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Ag_paytlcs_Fet_Sel( ag_paytlcs_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Ag_paytlcs_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Ag_paytlcs_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,ag_paytlcs.* FROM ag_paytlcs WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE ag_paytlcs_sel FROM :comm;
	EXEC SQL DECLARE sel_ag_paytlcs CURSOR FOR ag_paytlcs_sel;

	EXEC SQL OPEN sel_ag_paytlcs;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN ag_paytlcs error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Ag_paytlcs_Fet_Sel ( struct ag_paytlcs_c *ag_paytlcs_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_ag_paytlcs INTO :ag_paytlcs_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch ag_paytlcs error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch ag_paytlcs finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(ag_paytlcs_c);

	return 0;
}

int Ag_paytlcs_Clo_Sel (){
	EXEC SQL CLOSE sel_ag_paytlcs;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Ag_paytlcs_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,ag_paytlcs.* FROM ag_paytlcs WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE ag_paytlcs_upd FROM :comm;

	EXEC SQL DECLARE upd_ag_paytlcs CURSOR FOR ag_paytlcs_upd;

	EXEC SQL OPEN upd_ag_paytlcs;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open ag_paytlcs error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Ag_paytlcs_Fet_Upd( struct ag_paytlcs_c *ag_paytlcs_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_ag_paytlcs INTO :ag_paytlcs_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd ag_paytlcs error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH ag_paytlcs finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(ag_paytlcs_c);

	return 0;
}

int Ag_paytlcs_Upd_Upd( struct ag_paytlcs_c ag_paytlcs_c , char * reply){
	int ret;

	EXEC SQL UPDATE ag_paytlcs SET unit_no=:ag_paytlcs_c.unit_no,
			bank_tlcs=:ag_paytlcs_c.bank_tlcs,
			batch_no=:ag_paytlcs_c.batch_no,
			unit_tlcs=:ag_paytlcs_c.unit_tlcs,
			pre_no=:ag_paytlcs_c.pre_no,
			bank_acct_no=:ag_paytlcs_c.bank_acct_no,
			trn_date=:ag_paytlcs_c.trn_date,
			trn_time=:ag_paytlcs_c.trn_time,
			br_no=:ag_paytlcs_c.br_no,
			tel_no=:ag_paytlcs_c.tel_no,
			trn_amt=:ag_paytlcs_c.trn_amt,
			trcode=:ag_paytlcs_c.trcode,
			item_no=:ag_paytlcs_c.item_no,
			pay_month=:ag_paytlcs_c.pay_month,
			pay_way=:ag_paytlcs_c.pay_way,
			ckmk_flag=:ag_paytlcs_c.ckmk_flag,
			bill_flag=:ag_paytlcs_c.bill_flag,
			bill_no=:ag_paytlcs_c.bill_no,
			stat=:ag_paytlcs_c.stat
	WHERE rowid=:ag_paytlcs_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE ag_paytlcs error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Ag_paytlcs_Del_Upd(struct ag_paytlcs_c ag_paytlcs_c , char * reply  ){

	EXEC SQL DELETE FROM ag_paytlcs WHERE rowid=:ag_paytlcs_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE ag_paytlcs error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Ag_paytlcs_Clo_Upd( ){
	EXEC SQL CLOSE upd_ag_paytlcs;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Ag_paytlcs_Ins( struct ag_paytlcs_c ag_paytlcs_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO ag_paytlcs VALUES (:ag_paytlcs_c.unit_no,
			:ag_paytlcs_c.bank_tlcs,
			:ag_paytlcs_c.batch_no,
			:ag_paytlcs_c.unit_tlcs,
			:ag_paytlcs_c.pre_no,
			:ag_paytlcs_c.bank_acct_no,
			:ag_paytlcs_c.trn_date,
			:ag_paytlcs_c.trn_time,
			:ag_paytlcs_c.br_no,
			:ag_paytlcs_c.tel_no,
			:ag_paytlcs_c.trn_amt,
			:ag_paytlcs_c.trcode,
			:ag_paytlcs_c.item_no,
			:ag_paytlcs_c.pay_month,
			:ag_paytlcs_c.pay_way,
			:ag_paytlcs_c.ckmk_flag,
			:ag_paytlcs_c.bill_flag,
			:ag_paytlcs_c.bill_no,
			:ag_paytlcs_c.stat);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT ag_paytlcs error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT ag_paytlcs error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
