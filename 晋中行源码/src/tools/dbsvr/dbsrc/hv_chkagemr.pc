#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"hv_chkagemr_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int hv_chkagemr_con ( struct hv_chkagemr_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct hv_chkagemr_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->orderno);
	zip_tail(ps->pay_qs_no);
	zip_tail(ps->br_no);
	zip_tail(ps->cmtno);
	zip_tail(ps->o_cmtno);
	zip_tail(ps->cur_no);
	zip_tail(ps->or_br_no);
	zip_tail(ps->pay_no);
	zip_tail(ps->pay_ac_no);
	zip_tail(ps->payname);
	zip_tail(ps->payaddress);
	zip_tail(ps->cashqsactno);
	zip_tail(ps->acbrno);
	zip_tail(ps->cashno);
	zip_tail(ps->cash_ac_no);
	zip_tail(ps->cash_name);
	zip_tail(ps->cash_addr);
	zip_tail(ps->yw_type);
	zip_tail(ps->sendco);
	zip_tail(ps->receco);
	zip_tail(ps->operlevel);
	zip_tail(ps->obrno);
	zip_tail(ps->voctype);
	zip_tail(ps->vocnum);
	zip_tail(ps->p_num);
	zip_tail(ps->hp_type);
	zip_tail(ps->pass_wd);
	zip_tail(ps->o_tx_date);
	zip_tail(ps->ou_tx_date);
	zip_tail(ps->o_orderno_hv);
	zip_tail(ps->o_tx_type);
	zip_tail(ps->p_orderno_hv);
	zip_tail(ps->dc);
	zip_tail(ps->reason);
	zip_tail(ps->repson);
	zip_tail(ps->chk_flg);
	zip_tail(ps->brf1);
	zip_tail(ps->brf2);
}
int Hv_chkagemr_Debug(struct hv_chkagemr_c *ps){
	vtcp_log("hv_chkagemr_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("hv_chkagemr_c.orderno=[%s]\n",ps->orderno);
	vtcp_log("hv_chkagemr_c.pay_qs_no=[%s]\n",ps->pay_qs_no);
	vtcp_log("hv_chkagemr_c.br_no=[%s]\n",ps->br_no);
	vtcp_log("hv_chkagemr_c.tx_date=[%ld]\n",ps->tx_date);
	vtcp_log("hv_chkagemr_c.cmtno=[%s]\n",ps->cmtno);
	vtcp_log("hv_chkagemr_c.o_cmtno=[%s]\n",ps->o_cmtno);
	vtcp_log("hv_chkagemr_c.tx_time=[%ld]\n",ps->tx_time);
	vtcp_log("hv_chkagemr_c.cur_no=[%s]\n",ps->cur_no);
	vtcp_log("hv_chkagemr_c.tx_amt=[%f]\n",ps->tx_amt);
	vtcp_log("hv_chkagemr_c.other_amt=[%f]\n",ps->other_amt);
	vtcp_log("hv_chkagemr_c.jf_amt=[%f]\n",ps->jf_amt);
	vtcp_log("hv_chkagemr_c.or_br_no=[%s]\n",ps->or_br_no);
	vtcp_log("hv_chkagemr_c.pay_no=[%s]\n",ps->pay_no);
	vtcp_log("hv_chkagemr_c.pay_ac_no=[%s]\n",ps->pay_ac_no);
	vtcp_log("hv_chkagemr_c.payname=[%s]\n",ps->payname);
	vtcp_log("hv_chkagemr_c.payaddress=[%s]\n",ps->payaddress);
	vtcp_log("hv_chkagemr_c.cashqsactno=[%s]\n",ps->cashqsactno);
	vtcp_log("hv_chkagemr_c.acbrno=[%s]\n",ps->acbrno);
	vtcp_log("hv_chkagemr_c.cashno=[%s]\n",ps->cashno);
	vtcp_log("hv_chkagemr_c.cash_ac_no=[%s]\n",ps->cash_ac_no);
	vtcp_log("hv_chkagemr_c.cash_name=[%s]\n",ps->cash_name);
	vtcp_log("hv_chkagemr_c.cash_addr=[%s]\n",ps->cash_addr);
	vtcp_log("hv_chkagemr_c.yw_type=[%s]\n",ps->yw_type);
	vtcp_log("hv_chkagemr_c.sendco=[%s]\n",ps->sendco);
	vtcp_log("hv_chkagemr_c.receco=[%s]\n",ps->receco);
	vtcp_log("hv_chkagemr_c.operlevel=[%s]\n",ps->operlevel);
	vtcp_log("hv_chkagemr_c.obrno=[%s]\n",ps->obrno);
	vtcp_log("hv_chkagemr_c.voctype=[%s]\n",ps->voctype);
	vtcp_log("hv_chkagemr_c.vocnum=[%s]\n",ps->vocnum);
	vtcp_log("hv_chkagemr_c.p_date=[%ld]\n",ps->p_date);
	vtcp_log("hv_chkagemr_c.p_num=[%s]\n",ps->p_num);
	vtcp_log("hv_chkagemr_c.hp_type=[%s]\n",ps->hp_type);
	vtcp_log("hv_chkagemr_c.pass_wd=[%s]\n",ps->pass_wd);
	vtcp_log("hv_chkagemr_c.inst_rate=[%f]\n",ps->inst_rate);
	vtcp_log("hv_chkagemr_c.term=[%ld]\n",ps->term);
	vtcp_log("hv_chkagemr_c.o_tx_date=[%s]\n",ps->o_tx_date);
	vtcp_log("hv_chkagemr_c.ou_tx_date=[%s]\n",ps->ou_tx_date);
	vtcp_log("hv_chkagemr_c.o_orderno_hv=[%s]\n",ps->o_orderno_hv);
	vtcp_log("hv_chkagemr_c.o_tx_type=[%s]\n",ps->o_tx_type);
	vtcp_log("hv_chkagemr_c.p_orderno_hv=[%s]\n",ps->p_orderno_hv);
	vtcp_log("hv_chkagemr_c.dc=[%s]\n",ps->dc);
	vtcp_log("hv_chkagemr_c.pay_date=[%ld]\n",ps->pay_date);
	vtcp_log("hv_chkagemr_c.intst=[%f]\n",ps->intst);
	vtcp_log("hv_chkagemr_c.reason=[%s]\n",ps->reason);
	vtcp_log("hv_chkagemr_c.repson=[%s]\n",ps->repson);
	vtcp_log("hv_chkagemr_c.chk_flg=[%s]\n",ps->chk_flg);
	vtcp_log("hv_chkagemr_c.brf1=[%s]\n",ps->brf1);
	vtcp_log("hv_chkagemr_c.brf2=[%s]\n",ps->brf2);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Hv_chkagemr_Sel(reply,hv_chkagemr_c,fmtstr,va_alist)
char    *reply;
struct  hv_chkagemr_c *hv_chkagemr_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Hv_chkagemr_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Hv_chkagemr_Fet_Sel( hv_chkagemr_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Hv_chkagemr_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Hv_chkagemr_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,hv_chkagemr.* FROM hv_chkagemr WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE hv_chkagemr_sel FROM :comm;
	EXEC SQL DECLARE sel_hv_chkagemr CURSOR FOR hv_chkagemr_sel;

	EXEC SQL OPEN sel_hv_chkagemr;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN hv_chkagemr error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Hv_chkagemr_Fet_Sel ( struct hv_chkagemr_c *hv_chkagemr_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_hv_chkagemr INTO :hv_chkagemr_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch hv_chkagemr error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch hv_chkagemr finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(hv_chkagemr_c);

	return 0;
}

int Hv_chkagemr_Clo_Sel (){
	EXEC SQL CLOSE sel_hv_chkagemr;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Hv_chkagemr_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,hv_chkagemr.* FROM hv_chkagemr WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE hv_chkagemr_upd FROM :comm;

	EXEC SQL DECLARE upd_hv_chkagemr CURSOR FOR hv_chkagemr_upd;

	EXEC SQL OPEN upd_hv_chkagemr;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open hv_chkagemr error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Hv_chkagemr_Fet_Upd( struct hv_chkagemr_c *hv_chkagemr_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_hv_chkagemr INTO :hv_chkagemr_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd hv_chkagemr error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH hv_chkagemr finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(hv_chkagemr_c);

	return 0;
}

int Hv_chkagemr_Upd_Upd( struct hv_chkagemr_c hv_chkagemr_c , char * reply){
	int ret;

	EXEC SQL UPDATE hv_chkagemr SET orderno=:hv_chkagemr_c.orderno,
			pay_qs_no=:hv_chkagemr_c.pay_qs_no,
			br_no=:hv_chkagemr_c.br_no,
			tx_date=:hv_chkagemr_c.tx_date,
			cmtno=:hv_chkagemr_c.cmtno,
			o_cmtno=:hv_chkagemr_c.o_cmtno,
			tx_time=:hv_chkagemr_c.tx_time,
			cur_no=:hv_chkagemr_c.cur_no,
			tx_amt=:hv_chkagemr_c.tx_amt,
			other_amt=:hv_chkagemr_c.other_amt,
			jf_amt=:hv_chkagemr_c.jf_amt,
			or_br_no=:hv_chkagemr_c.or_br_no,
			pay_no=:hv_chkagemr_c.pay_no,
			pay_ac_no=:hv_chkagemr_c.pay_ac_no,
			payname=:hv_chkagemr_c.payname,
			payaddress=:hv_chkagemr_c.payaddress,
			cashqsactno=:hv_chkagemr_c.cashqsactno,
			acbrno=:hv_chkagemr_c.acbrno,
			cashno=:hv_chkagemr_c.cashno,
			cash_ac_no=:hv_chkagemr_c.cash_ac_no,
			cash_name=:hv_chkagemr_c.cash_name,
			cash_addr=:hv_chkagemr_c.cash_addr,
			yw_type=:hv_chkagemr_c.yw_type,
			sendco=:hv_chkagemr_c.sendco,
			receco=:hv_chkagemr_c.receco,
			operlevel=:hv_chkagemr_c.operlevel,
			obrno=:hv_chkagemr_c.obrno,
			voctype=:hv_chkagemr_c.voctype,
			vocnum=:hv_chkagemr_c.vocnum,
			p_date=:hv_chkagemr_c.p_date,
			p_num=:hv_chkagemr_c.p_num,
			hp_type=:hv_chkagemr_c.hp_type,
			pass_wd=:hv_chkagemr_c.pass_wd,
			inst_rate=:hv_chkagemr_c.inst_rate,
			term=:hv_chkagemr_c.term,
			o_tx_date=:hv_chkagemr_c.o_tx_date,
			ou_tx_date=:hv_chkagemr_c.ou_tx_date,
			o_orderno_hv=:hv_chkagemr_c.o_orderno_hv,
			o_tx_type=:hv_chkagemr_c.o_tx_type,
			p_orderno_hv=:hv_chkagemr_c.p_orderno_hv,
			dc=:hv_chkagemr_c.dc,
			pay_date=:hv_chkagemr_c.pay_date,
			intst=:hv_chkagemr_c.intst,
			reason=:hv_chkagemr_c.reason,
			repson=:hv_chkagemr_c.repson,
			chk_flg=:hv_chkagemr_c.chk_flg,
			brf1=:hv_chkagemr_c.brf1,
			brf2=:hv_chkagemr_c.brf2
	WHERE rowid=:hv_chkagemr_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE hv_chkagemr error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Hv_chkagemr_Del_Upd(struct hv_chkagemr_c hv_chkagemr_c , char * reply  ){

	EXEC SQL DELETE FROM hv_chkagemr WHERE rowid=:hv_chkagemr_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE hv_chkagemr error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Hv_chkagemr_Clo_Upd( ){
	EXEC SQL CLOSE upd_hv_chkagemr;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Hv_chkagemr_Ins( struct hv_chkagemr_c hv_chkagemr_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO hv_chkagemr VALUES (:hv_chkagemr_c.orderno,
			:hv_chkagemr_c.pay_qs_no,
			:hv_chkagemr_c.br_no,
			:hv_chkagemr_c.tx_date,
			:hv_chkagemr_c.cmtno,
			:hv_chkagemr_c.o_cmtno,
			:hv_chkagemr_c.tx_time,
			:hv_chkagemr_c.cur_no,
			:hv_chkagemr_c.tx_amt,
			:hv_chkagemr_c.other_amt,
			:hv_chkagemr_c.jf_amt,
			:hv_chkagemr_c.or_br_no,
			:hv_chkagemr_c.pay_no,
			:hv_chkagemr_c.pay_ac_no,
			:hv_chkagemr_c.payname,
			:hv_chkagemr_c.payaddress,
			:hv_chkagemr_c.cashqsactno,
			:hv_chkagemr_c.acbrno,
			:hv_chkagemr_c.cashno,
			:hv_chkagemr_c.cash_ac_no,
			:hv_chkagemr_c.cash_name,
			:hv_chkagemr_c.cash_addr,
			:hv_chkagemr_c.yw_type,
			:hv_chkagemr_c.sendco,
			:hv_chkagemr_c.receco,
			:hv_chkagemr_c.operlevel,
			:hv_chkagemr_c.obrno,
			:hv_chkagemr_c.voctype,
			:hv_chkagemr_c.vocnum,
			:hv_chkagemr_c.p_date,
			:hv_chkagemr_c.p_num,
			:hv_chkagemr_c.hp_type,
			:hv_chkagemr_c.pass_wd,
			:hv_chkagemr_c.inst_rate,
			:hv_chkagemr_c.term,
			:hv_chkagemr_c.o_tx_date,
			:hv_chkagemr_c.ou_tx_date,
			:hv_chkagemr_c.o_orderno_hv,
			:hv_chkagemr_c.o_tx_type,
			:hv_chkagemr_c.p_orderno_hv,
			:hv_chkagemr_c.dc,
			:hv_chkagemr_c.pay_date,
			:hv_chkagemr_c.intst,
			:hv_chkagemr_c.reason,
			:hv_chkagemr_c.repson,
			:hv_chkagemr_c.chk_flg,
			:hv_chkagemr_c.brf1,
			:hv_chkagemr_c.brf2);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT hv_chkagemr error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT hv_chkagemr error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
