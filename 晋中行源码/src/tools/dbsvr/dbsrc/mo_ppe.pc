#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"mo_ppe_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int mo_ppe_con ( struct mo_ppe_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct mo_ppe_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->ppeno);
	zip_tail(ps->ppename);
	zip_tail(ps->opdate);
	zip_tail(ps->type);
	zip_tail(ps->spemodel);
	zip_tail(ps->chgactno);
	zip_tail(ps->depractno);
	zip_tail(ps->deprstat);
	zip_tail(ps->stat);
	zip_tail(ps->moden);
	zip_tail(ps->period);
	zip_tail(ps->asstype);
	zip_tail(ps->deprtype);
	zip_tail(ps->placebrno);
	zip_tail(ps->addr);
	zip_tail(ps->ppestat);
	zip_tail(ps->chkdate);
	zip_tail(ps->brf);
}
int Mo_ppe_Debug(struct mo_ppe_c *ps){
	vtcp_log("mo_ppe_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("mo_ppe_c.ppeno=[%s]\n",ps->ppeno);
	vtcp_log("mo_ppe_c.ppename=[%s]\n",ps->ppename);
	vtcp_log("mo_ppe_c.opdate=[%s]\n",ps->opdate);
	vtcp_log("mo_ppe_c.type=[%s]\n",ps->type);
	vtcp_log("mo_ppe_c.spemodel=[%s]\n",ps->spemodel);
	vtcp_log("mo_ppe_c.quant=[%f]\n",ps->quant);
	vtcp_log("mo_ppe_c.oriamt=[%f]\n",ps->oriamt);
	vtcp_log("mo_ppe_c.chgactno=[%s]\n",ps->chgactno);
	vtcp_log("mo_ppe_c.chgamt=[%f]\n",ps->chgamt);
	vtcp_log("mo_ppe_c.depramtyear=[%f]\n",ps->depramtyear);
	vtcp_log("mo_ppe_c.depractno=[%s]\n",ps->depractno);
	vtcp_log("mo_ppe_c.depramtttl=[%f]\n",ps->depramtttl);
	vtcp_log("mo_ppe_c.remamt=[%f]\n",ps->remamt);
	vtcp_log("mo_ppe_c.deprstat=[%s]\n",ps->deprstat);
	vtcp_log("mo_ppe_c.stat=[%s]\n",ps->stat);
	vtcp_log("mo_ppe_c.moden=[%s]\n",ps->moden);
	vtcp_log("mo_ppe_c.remainratio=[%f]\n",ps->remainratio);
	vtcp_log("mo_ppe_c.period=[%s]\n",ps->period);
	vtcp_log("mo_ppe_c.term=[%f]\n",ps->term);
	vtcp_log("mo_ppe_c.usedterm=[%f]\n",ps->usedterm);
	vtcp_log("mo_ppe_c.usedquant=[%f]\n",ps->usedquant);
	vtcp_log("mo_ppe_c.ttlquant=[%f]\n",ps->ttlquant);
	vtcp_log("mo_ppe_c.ttlcnt=[%ld]\n",ps->ttlcnt);
	vtcp_log("mo_ppe_c.deprradio=[%f]\n",ps->deprradio);
	vtcp_log("mo_ppe_c.asstype=[%s]\n",ps->asstype);
	vtcp_log("mo_ppe_c.deprtype=[%s]\n",ps->deprtype);
	vtcp_log("mo_ppe_c.placebrno=[%s]\n",ps->placebrno);
	vtcp_log("mo_ppe_c.addr=[%s]\n",ps->addr);
	vtcp_log("mo_ppe_c.ppestat=[%s]\n",ps->ppestat);
	vtcp_log("mo_ppe_c.chkdate=[%s]\n",ps->chkdate);
	vtcp_log("mo_ppe_c.brf=[%s]\n",ps->brf);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Mo_ppe_Sel(reply,mo_ppe_c,fmtstr,va_alist)
char    *reply;
struct  mo_ppe_c *mo_ppe_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Mo_ppe_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Mo_ppe_Fet_Sel( mo_ppe_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Mo_ppe_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Mo_ppe_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,mo_ppe.* FROM mo_ppe WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mo_ppe_sel FROM :comm;
	EXEC SQL DECLARE sel_mo_ppe CURSOR FOR mo_ppe_sel;

	EXEC SQL OPEN sel_mo_ppe;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN mo_ppe error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_ppe_Fet_Sel ( struct mo_ppe_c *mo_ppe_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_mo_ppe INTO :mo_ppe_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch mo_ppe error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch mo_ppe finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(mo_ppe_c);

	return 0;
}

int Mo_ppe_Clo_Sel (){
	EXEC SQL CLOSE sel_mo_ppe;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Mo_ppe_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,mo_ppe.* FROM mo_ppe WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mo_ppe_upd FROM :comm;

	EXEC SQL DECLARE upd_mo_ppe CURSOR FOR mo_ppe_upd;

	EXEC SQL OPEN upd_mo_ppe;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open mo_ppe error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_ppe_Fet_Upd( struct mo_ppe_c *mo_ppe_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_mo_ppe INTO :mo_ppe_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd mo_ppe error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH mo_ppe finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(mo_ppe_c);

	return 0;
}

int Mo_ppe_Upd_Upd( struct mo_ppe_c mo_ppe_c , char * reply){
	int ret;

	EXEC SQL UPDATE mo_ppe SET ppeno=:mo_ppe_c.ppeno,
			ppename=:mo_ppe_c.ppename,
			opdate=:mo_ppe_c.opdate,
			type=:mo_ppe_c.type,
			spemodel=:mo_ppe_c.spemodel,
			quant=:mo_ppe_c.quant,
			oriamt=:mo_ppe_c.oriamt,
			chgactno=:mo_ppe_c.chgactno,
			chgamt=:mo_ppe_c.chgamt,
			depramtyear=:mo_ppe_c.depramtyear,
			depractno=:mo_ppe_c.depractno,
			depramtttl=:mo_ppe_c.depramtttl,
			remamt=:mo_ppe_c.remamt,
			deprstat=:mo_ppe_c.deprstat,
			stat=:mo_ppe_c.stat,
			moden=:mo_ppe_c.moden,
			remainratio=:mo_ppe_c.remainratio,
			period=:mo_ppe_c.period,
			term=:mo_ppe_c.term,
			usedterm=:mo_ppe_c.usedterm,
			usedquant=:mo_ppe_c.usedquant,
			ttlquant=:mo_ppe_c.ttlquant,
			ttlcnt=:mo_ppe_c.ttlcnt,
			deprradio=:mo_ppe_c.deprradio,
			asstype=:mo_ppe_c.asstype,
			deprtype=:mo_ppe_c.deprtype,
			placebrno=:mo_ppe_c.placebrno,
			addr=:mo_ppe_c.addr,
			ppestat=:mo_ppe_c.ppestat,
			chkdate=:mo_ppe_c.chkdate,
			brf=:mo_ppe_c.brf
	WHERE rowid=:mo_ppe_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE mo_ppe error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Mo_ppe_Del_Upd(struct mo_ppe_c mo_ppe_c , char * reply  ){

	EXEC SQL DELETE FROM mo_ppe WHERE rowid=:mo_ppe_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE mo_ppe error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_ppe_Clo_Upd( ){
	EXEC SQL CLOSE upd_mo_ppe;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Mo_ppe_Ins( struct mo_ppe_c mo_ppe_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO mo_ppe VALUES (:mo_ppe_c.ppeno,
			:mo_ppe_c.ppename,
			:mo_ppe_c.opdate,
			:mo_ppe_c.type,
			:mo_ppe_c.spemodel,
			:mo_ppe_c.quant,
			:mo_ppe_c.oriamt,
			:mo_ppe_c.chgactno,
			:mo_ppe_c.chgamt,
			:mo_ppe_c.depramtyear,
			:mo_ppe_c.depractno,
			:mo_ppe_c.depramtttl,
			:mo_ppe_c.remamt,
			:mo_ppe_c.deprstat,
			:mo_ppe_c.stat,
			:mo_ppe_c.moden,
			:mo_ppe_c.remainratio,
			:mo_ppe_c.period,
			:mo_ppe_c.term,
			:mo_ppe_c.usedterm,
			:mo_ppe_c.usedquant,
			:mo_ppe_c.ttlquant,
			:mo_ppe_c.ttlcnt,
			:mo_ppe_c.deprradio,
			:mo_ppe_c.asstype,
			:mo_ppe_c.deprtype,
			:mo_ppe_c.placebrno,
			:mo_ppe_c.addr,
			:mo_ppe_c.ppestat,
			:mo_ppe_c.chkdate,
			:mo_ppe_c.brf);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT mo_ppe error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT mo_ppe error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
