#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"ln_lo_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)
static char str[3000];
static char mystery[17];

int ln_lo_con ( struct ln_lo_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct ln_lo_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->pay_type);
	zip_tail(ps->mac);
	zip_tail(ps->old_ac_ind);
}
int Ln_lo_Debug(struct ln_lo_c *ps){
	vtcp_log("ln_lo_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("ln_lo_c.ac_id=[%ld]\n",ps->ac_id);
	vtcp_log("ln_lo_c.ac_seqn=[%ld]\n",ps->ac_seqn);
	vtcp_log("ln_lo_c.lo_term=[%ld]\n",ps->lo_term);
	vtcp_log("ln_lo_c.lo_amt=[%f]\n",ps->lo_amt);
	vtcp_log("ln_lo_c.lo_intst=[%f]\n",ps->lo_intst);
	vtcp_log("ln_lo_c.pun_intst=[%f]\n",ps->pun_intst);
	vtcp_log("ln_lo_c.pay_type=[%s]\n",ps->pay_type);
	vtcp_log("ln_lo_c.over_date=[%ld]\n",ps->over_date);
	vtcp_log("ln_lo_c.shld_pay_date=[%ld]\n",ps->shld_pay_date);
	vtcp_log("ln_lo_c.pay_lo_amt=[%f]\n",ps->pay_lo_amt);
	vtcp_log("ln_lo_c.pay_lo_intst=[%f]\n",ps->pay_lo_intst);
	vtcp_log("ln_lo_c.pay_pun_intst=[%f]\n",ps->pay_pun_intst);
	vtcp_log("ln_lo_c.mac=[%s]\n",ps->mac);
	vtcp_log("ln_lo_c.old_ac_ind=[%s]\n",ps->old_ac_ind);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Ln_lo_Sel(reply,ln_lo_c,fmtstr,va_alist)
char    *reply;
struct  ln_lo_c *ln_lo_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Ln_lo_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Ln_lo_Fet_Sel( ln_lo_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Ln_lo_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Ln_lo_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,ln_lo.* FROM ln_lo WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE ln_lo_sel FROM :comm;
	EXEC SQL DECLARE sel_ln_lo CURSOR FOR ln_lo_sel;

	EXEC SQL OPEN sel_ln_lo;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN ln_lo error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Ln_lo_Fet_Sel ( struct ln_lo_c *ln_lo_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_ln_lo INTO :ln_lo_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch ln_lo error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch ln_lo finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(ln_lo_c);

	return 0;
}

int Ln_lo_Clo_Sel (){
	EXEC SQL CLOSE sel_ln_lo;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Ln_lo_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,ln_lo.* FROM ln_lo WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE ln_lo_upd FROM :comm;

	EXEC SQL DECLARE upd_ln_lo CURSOR FOR ln_lo_upd;

	EXEC SQL OPEN upd_ln_lo;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open ln_lo error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Ln_lo_Fet_Upd( struct ln_lo_c *ln_lo_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_ln_lo INTO :ln_lo_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd ln_lo error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH ln_lo finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(ln_lo_c);

	return 0;
}

int Ln_lo_Upd_Upd( struct ln_lo_c ln_lo_c , char * reply){
	int ret;

	memset( str, 0x0,sizeof(str) );
	memset( mystery, 0x0, sizeof(mystery) );
	ret = ln_lo_con ( ln_lo_c, str );
	ret = put_mystery( str, mystery );
	strcpy(  ln_lo_c.mac, mystery ); 
	EXEC SQL UPDATE ln_lo SET ac_id=:ln_lo_c.ac_id,
			ac_seqn=:ln_lo_c.ac_seqn,
			lo_term=:ln_lo_c.lo_term,
			lo_amt=:ln_lo_c.lo_amt,
			lo_intst=:ln_lo_c.lo_intst,
			pun_intst=:ln_lo_c.pun_intst,
			pay_type=:ln_lo_c.pay_type,
			over_date=:ln_lo_c.over_date,
			shld_pay_date=:ln_lo_c.shld_pay_date,
			pay_lo_amt=:ln_lo_c.pay_lo_amt,
			pay_lo_intst=:ln_lo_c.pay_lo_intst,
			pay_pun_intst=:ln_lo_c.pay_pun_intst,
			mac=:ln_lo_c.mac,
			old_ac_ind=:ln_lo_c.old_ac_ind
	WHERE rowid=:ln_lo_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE ln_lo error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Ln_lo_Del_Upd(struct ln_lo_c ln_lo_c , char * reply  ){

	EXEC SQL DELETE FROM ln_lo WHERE rowid=:ln_lo_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE ln_lo error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Ln_lo_Clo_Upd( ){
	EXEC SQL CLOSE upd_ln_lo;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Ln_lo_Ins( struct ln_lo_c ln_lo_c , char * reply ){
	int ret;

	memset( str, 0x0,sizeof(str) );
	memset( mystery, 0x0, sizeof(mystery) );
	ret = ln_lo_con ( ln_lo_c, str );
	ret = put_mystery( str, mystery );
	strcpy(  ln_lo_c.mac, mystery ); 
	EXEC SQL INSERT INTO ln_lo VALUES (:ln_lo_c.ac_id,
			:ln_lo_c.ac_seqn,
			:ln_lo_c.lo_term,
			:ln_lo_c.lo_amt,
			:ln_lo_c.lo_intst,
			:ln_lo_c.pun_intst,
			:ln_lo_c.pay_type,
			:ln_lo_c.over_date,
			:ln_lo_c.shld_pay_date,
			:ln_lo_c.pay_lo_amt,
			:ln_lo_c.pay_lo_intst,
			:ln_lo_c.pay_pun_intst,
			:ln_lo_c.mac,
			:ln_lo_c.old_ac_ind);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT ln_lo error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT ln_lo error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
/*****************************************************************************/
/****                              查询函数部分[1]                       ****/
/*****************************************************************************/
int Ln_lo_Sel1(reply,ln_lo_c,fmtstr,va_alist)
char    *reply;
struct  ln_lo_c *ln_lo_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Ln_lo_Dec_Sel1( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Ln_lo_Fet_Sel1( ln_lo_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Ln_lo_Clo_Sel1();

	return 0;
}



char *key_strcat(char *,char *);
int Ln_lo_Dec_Sel1 ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,ln_lo.* FROM ln_lo WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE ln_lo_sel1 FROM :comm;
	EXEC SQL DECLARE sel_ln_lo1 CURSOR FOR ln_lo_sel1;

	EXEC SQL OPEN sel_ln_lo1;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN ln_lo error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Ln_lo_Fet_Sel1 ( struct ln_lo_c *ln_lo_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_ln_lo1 INTO :ln_lo_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch ln_lo error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch ln_lo finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(ln_lo_c);

	return 0;
}

int Ln_lo_Clo_Sel1 (){
	EXEC SQL CLOSE sel_ln_lo1;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Ln_lo_Dec_Upd1( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,ln_lo.* FROM ln_lo WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE ln_lo_upd1 FROM :comm;

	EXEC SQL DECLARE upd_ln_lo1 CURSOR FOR ln_lo_upd1;

	EXEC SQL OPEN upd_ln_lo1;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open ln_lo error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Ln_lo_Fet_Upd1( struct ln_lo_c *ln_lo_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_ln_lo1 INTO :ln_lo_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd ln_lo error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH ln_lo finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(ln_lo_c);

	return 0;
}

int Ln_lo_Clo_Upd1( ){
	EXEC SQL CLOSE upd_ln_lo1;
	return 0;
}

/*****************************************************************************/
/****                              查询函数部分[2]                       ****/
/*****************************************************************************/
int Ln_lo_Sel2(reply,ln_lo_c,fmtstr,va_alist)
char    *reply;
struct  ln_lo_c *ln_lo_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Ln_lo_Dec_Sel2( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Ln_lo_Fet_Sel2( ln_lo_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Ln_lo_Clo_Sel2();

	return 0;
}



char *key_strcat(char *,char *);
int Ln_lo_Dec_Sel2 ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,ln_lo.* FROM ln_lo WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE ln_lo_sel2 FROM :comm;
	EXEC SQL DECLARE sel_ln_lo2 CURSOR FOR ln_lo_sel2;

	EXEC SQL OPEN sel_ln_lo2;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN ln_lo error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Ln_lo_Fet_Sel2 ( struct ln_lo_c *ln_lo_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_ln_lo2 INTO :ln_lo_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch ln_lo error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch ln_lo finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(ln_lo_c);

	return 0;
}

int Ln_lo_Clo_Sel2 (){
	EXEC SQL CLOSE sel_ln_lo2;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Ln_lo_Dec_Upd2( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,ln_lo.* FROM ln_lo WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE ln_lo_upd2 FROM :comm;

	EXEC SQL DECLARE upd_ln_lo2 CURSOR FOR ln_lo_upd2;

	EXEC SQL OPEN upd_ln_lo2;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open ln_lo error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Ln_lo_Fet_Upd2( struct ln_lo_c *ln_lo_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_ln_lo2 INTO :ln_lo_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd ln_lo error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH ln_lo finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(ln_lo_c);

	return 0;
}

int Ln_lo_Clo_Upd2( ){
	EXEC SQL CLOSE upd_ln_lo2;
	return 0;
}

