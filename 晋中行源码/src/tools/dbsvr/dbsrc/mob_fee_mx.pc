#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"mob_fee_mx_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int mob_fee_mx_con ( struct mob_fee_mx_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct mob_fee_mx_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->tel);
	zip_tail(ps->tx_code);
	zip_tail(ps->ct_ind);
	zip_tail(ps->br_no);
	zip_tail(ps->ac_no);
	zip_tail(ps->name);
	zip_tail(ps->sign_ac_no);
	zip_tail(ps->server_type);
	zip_tail(ps->memo);
	zip_tail(ps->sts);
	zip_tail(ps->filler1);
	zip_tail(ps->filler2);
	zip_tail(ps->filler3);
	zip_tail(ps->filler4);
}
int Mob_fee_mx_Debug(struct mob_fee_mx_c *ps){
	vtcp_log("mob_fee_mx_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("mob_fee_mx_c.tx_date=[%f]\n",ps->tx_date);
	vtcp_log("mob_fee_mx_c.tel=[%s]\n",ps->tel);
	vtcp_log("mob_fee_mx_c.trace_no=[%f]\n",ps->trace_no);
	vtcp_log("mob_fee_mx_c.tx_code=[%s]\n",ps->tx_code);
	vtcp_log("mob_fee_mx_c.ct_ind=[%s]\n",ps->ct_ind);
	vtcp_log("mob_fee_mx_c.br_no=[%s]\n",ps->br_no);
	vtcp_log("mob_fee_mx_c.ac_no=[%s]\n",ps->ac_no);
	vtcp_log("mob_fee_mx_c.name=[%s]\n",ps->name);
	vtcp_log("mob_fee_mx_c.sign_ac_no=[%s]\n",ps->sign_ac_no);
	vtcp_log("mob_fee_mx_c.server_type=[%s]\n",ps->server_type);
	vtcp_log("mob_fee_mx_c.amt_should=[%f]\n",ps->amt_should);
	vtcp_log("mob_fee_mx_c.amt_fact=[%f]\n",ps->amt_fact);
	vtcp_log("mob_fee_mx_c.cnt=[%f]\n",ps->cnt);
	vtcp_log("mob_fee_mx_c.lst_fee_date=[%f]\n",ps->lst_fee_date);
	vtcp_log("mob_fee_mx_c.print_cnt=[%f]\n",ps->print_cnt);
	vtcp_log("mob_fee_mx_c.memo=[%s]\n",ps->memo);
	vtcp_log("mob_fee_mx_c.sts=[%s]\n",ps->sts);
	vtcp_log("mob_fee_mx_c.filler1=[%s]\n",ps->filler1);
	vtcp_log("mob_fee_mx_c.filler2=[%s]\n",ps->filler2);
	vtcp_log("mob_fee_mx_c.filler3=[%s]\n",ps->filler3);
	vtcp_log("mob_fee_mx_c.filler4=[%s]\n",ps->filler4);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Mob_fee_mx_Sel(reply,mob_fee_mx_c,fmtstr,va_alist)
char    *reply;
struct  mob_fee_mx_c *mob_fee_mx_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Mob_fee_mx_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Mob_fee_mx_Fet_Sel( mob_fee_mx_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Mob_fee_mx_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Mob_fee_mx_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,mob_fee_mx.* FROM mob_fee_mx WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mob_fee_mx_sel FROM :comm;
	EXEC SQL DECLARE sel_mob_fee_mx CURSOR FOR mob_fee_mx_sel;

	EXEC SQL OPEN sel_mob_fee_mx;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN mob_fee_mx error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mob_fee_mx_Fet_Sel ( struct mob_fee_mx_c *mob_fee_mx_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_mob_fee_mx INTO :mob_fee_mx_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch mob_fee_mx error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch mob_fee_mx finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(mob_fee_mx_c);

	return 0;
}

int Mob_fee_mx_Clo_Sel (){
	EXEC SQL CLOSE sel_mob_fee_mx;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Mob_fee_mx_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,mob_fee_mx.* FROM mob_fee_mx WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mob_fee_mx_upd FROM :comm;

	EXEC SQL DECLARE upd_mob_fee_mx CURSOR FOR mob_fee_mx_upd;

	EXEC SQL OPEN upd_mob_fee_mx;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open mob_fee_mx error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mob_fee_mx_Fet_Upd( struct mob_fee_mx_c *mob_fee_mx_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_mob_fee_mx INTO :mob_fee_mx_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd mob_fee_mx error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH mob_fee_mx finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(mob_fee_mx_c);

	return 0;
}

int Mob_fee_mx_Upd_Upd( struct mob_fee_mx_c mob_fee_mx_c , char * reply){
	int ret;

	EXEC SQL UPDATE mob_fee_mx SET tx_date=:mob_fee_mx_c.tx_date,
			tel=:mob_fee_mx_c.tel,
			trace_no=:mob_fee_mx_c.trace_no,
			tx_code=:mob_fee_mx_c.tx_code,
			ct_ind=:mob_fee_mx_c.ct_ind,
			br_no=:mob_fee_mx_c.br_no,
			ac_no=:mob_fee_mx_c.ac_no,
			name=:mob_fee_mx_c.name,
			sign_ac_no=:mob_fee_mx_c.sign_ac_no,
			server_type=:mob_fee_mx_c.server_type,
			amt_should=:mob_fee_mx_c.amt_should,
			amt_fact=:mob_fee_mx_c.amt_fact,
			cnt=:mob_fee_mx_c.cnt,
			lst_fee_date=:mob_fee_mx_c.lst_fee_date,
			print_cnt=:mob_fee_mx_c.print_cnt,
			memo=:mob_fee_mx_c.memo,
			sts=:mob_fee_mx_c.sts,
			filler1=:mob_fee_mx_c.filler1,
			filler2=:mob_fee_mx_c.filler2,
			filler3=:mob_fee_mx_c.filler3,
			filler4=:mob_fee_mx_c.filler4
	WHERE rowid=:mob_fee_mx_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE mob_fee_mx error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Mob_fee_mx_Del_Upd(struct mob_fee_mx_c mob_fee_mx_c , char * reply  ){

	EXEC SQL DELETE FROM mob_fee_mx WHERE rowid=:mob_fee_mx_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE mob_fee_mx error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mob_fee_mx_Clo_Upd( ){
	EXEC SQL CLOSE upd_mob_fee_mx;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Mob_fee_mx_Ins( struct mob_fee_mx_c mob_fee_mx_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO mob_fee_mx VALUES (:mob_fee_mx_c.tx_date,
			:mob_fee_mx_c.tel,
			:mob_fee_mx_c.trace_no,
			:mob_fee_mx_c.tx_code,
			:mob_fee_mx_c.ct_ind,
			:mob_fee_mx_c.br_no,
			:mob_fee_mx_c.ac_no,
			:mob_fee_mx_c.name,
			:mob_fee_mx_c.sign_ac_no,
			:mob_fee_mx_c.server_type,
			:mob_fee_mx_c.amt_should,
			:mob_fee_mx_c.amt_fact,
			:mob_fee_mx_c.cnt,
			:mob_fee_mx_c.lst_fee_date,
			:mob_fee_mx_c.print_cnt,
			:mob_fee_mx_c.memo,
			:mob_fee_mx_c.sts,
			:mob_fee_mx_c.filler1,
			:mob_fee_mx_c.filler2,
			:mob_fee_mx_c.filler3,
			:mob_fee_mx_c.filler4);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT mob_fee_mx error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT mob_fee_mx error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
