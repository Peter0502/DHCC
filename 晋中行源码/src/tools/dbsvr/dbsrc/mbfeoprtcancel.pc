#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"mbfeoprtcancel_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int mbfeoprtcancel_con ( struct mbfeoprtcancel_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct mbfeoprtcancel_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->cancelno);
	zip_tail(ps->applyuser);
	zip_tail(ps->grantuser);
	zip_tail(ps->origodficode);
	zip_tail(ps->cnapsodfi);
	zip_tail(ps->origtxtype);
	zip_tail(ps->origtxssno);
	zip_tail(ps->cancelstrinfo);
	zip_tail(ps->cancelresult);
	zip_tail(ps->resultstrinfo);
	zip_tail(ps->procstate);
	zip_tail(ps->statetime);
}
int Mbfeoprtcancel_Debug(struct mbfeoprtcancel_c *ps){
	vtcp_log("mbfeoprtcancel_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("mbfeoprtcancel_c.cancelno=[%s]\n",ps->cancelno);
	vtcp_log("mbfeoprtcancel_c.consigndate=[%ld]\n",ps->consigndate);
	vtcp_log("mbfeoprtcancel_c.applyuser=[%s]\n",ps->applyuser);
	vtcp_log("mbfeoprtcancel_c.grantuser=[%s]\n",ps->grantuser);
	vtcp_log("mbfeoprtcancel_c.origconsigndate=[%ld]\n",ps->origconsigndate);
	vtcp_log("mbfeoprtcancel_c.origodficode=[%s]\n",ps->origodficode);
	vtcp_log("mbfeoprtcancel_c.cnapsodfi=[%s]\n",ps->cnapsodfi);
	vtcp_log("mbfeoprtcancel_c.origtxtype=[%s]\n",ps->origtxtype);
	vtcp_log("mbfeoprtcancel_c.origtxssno=[%s]\n",ps->origtxssno);
	vtcp_log("mbfeoprtcancel_c.cancelstrinfo=[%s]\n",ps->cancelstrinfo);
	vtcp_log("mbfeoprtcancel_c.cancelresult=[%s]\n",ps->cancelresult);
	vtcp_log("mbfeoprtcancel_c.resultstrinfo=[%s]\n",ps->resultstrinfo);
	vtcp_log("mbfeoprtcancel_c.procstate=[%s]\n",ps->procstate);
	vtcp_log("mbfeoprtcancel_c.statetime=[%s]\n",ps->statetime);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Mbfeoprtcancel_Sel(reply,mbfeoprtcancel_c,fmtstr,va_alist)
char    *reply;
struct  mbfeoprtcancel_c *mbfeoprtcancel_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Mbfeoprtcancel_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Mbfeoprtcancel_Fet_Sel( mbfeoprtcancel_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Mbfeoprtcancel_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Mbfeoprtcancel_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,mbfeoprtcancel.* FROM mbfeoprtcancel WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mbfeoprtcancel_sel FROM :comm;
	EXEC SQL DECLARE sel_mbfeoprtcancel CURSOR FOR mbfeoprtcancel_sel;

	EXEC SQL OPEN sel_mbfeoprtcancel;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN mbfeoprtcancel error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mbfeoprtcancel_Fet_Sel ( struct mbfeoprtcancel_c *mbfeoprtcancel_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_mbfeoprtcancel INTO :mbfeoprtcancel_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch mbfeoprtcancel error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch mbfeoprtcancel finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(mbfeoprtcancel_c);

	return 0;
}

int Mbfeoprtcancel_Clo_Sel (){
	EXEC SQL CLOSE sel_mbfeoprtcancel;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Mbfeoprtcancel_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,mbfeoprtcancel.* FROM mbfeoprtcancel WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mbfeoprtcancel_upd FROM :comm;

	EXEC SQL DECLARE upd_mbfeoprtcancel CURSOR FOR mbfeoprtcancel_upd;

	EXEC SQL OPEN upd_mbfeoprtcancel;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open mbfeoprtcancel error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mbfeoprtcancel_Fet_Upd( struct mbfeoprtcancel_c *mbfeoprtcancel_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_mbfeoprtcancel INTO :mbfeoprtcancel_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd mbfeoprtcancel error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH mbfeoprtcancel finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(mbfeoprtcancel_c);

	return 0;
}

int Mbfeoprtcancel_Upd_Upd( struct mbfeoprtcancel_c mbfeoprtcancel_c , char * reply){
	int ret;

	EXEC SQL UPDATE mbfeoprtcancel SET cancelno=:mbfeoprtcancel_c.cancelno,
			consigndate=:mbfeoprtcancel_c.consigndate,
			applyuser=:mbfeoprtcancel_c.applyuser,
			grantuser=:mbfeoprtcancel_c.grantuser,
			origconsigndate=:mbfeoprtcancel_c.origconsigndate,
			origodficode=:mbfeoprtcancel_c.origodficode,
			cnapsodfi=:mbfeoprtcancel_c.cnapsodfi,
			origtxtype=:mbfeoprtcancel_c.origtxtype,
			origtxssno=:mbfeoprtcancel_c.origtxssno,
			cancelstrinfo=:mbfeoprtcancel_c.cancelstrinfo,
			cancelresult=:mbfeoprtcancel_c.cancelresult,
			resultstrinfo=:mbfeoprtcancel_c.resultstrinfo,
			procstate=:mbfeoprtcancel_c.procstate,
			statetime=:mbfeoprtcancel_c.statetime
	WHERE rowid=:mbfeoprtcancel_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE mbfeoprtcancel error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Mbfeoprtcancel_Del_Upd(struct mbfeoprtcancel_c mbfeoprtcancel_c , char * reply  ){

	EXEC SQL DELETE FROM mbfeoprtcancel WHERE rowid=:mbfeoprtcancel_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE mbfeoprtcancel error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mbfeoprtcancel_Clo_Upd( ){
	EXEC SQL CLOSE upd_mbfeoprtcancel;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Mbfeoprtcancel_Ins( struct mbfeoprtcancel_c mbfeoprtcancel_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO mbfeoprtcancel VALUES (:mbfeoprtcancel_c.cancelno,
			:mbfeoprtcancel_c.consigndate,
			:mbfeoprtcancel_c.applyuser,
			:mbfeoprtcancel_c.grantuser,
			:mbfeoprtcancel_c.origconsigndate,
			:mbfeoprtcancel_c.origodficode,
			:mbfeoprtcancel_c.cnapsodfi,
			:mbfeoprtcancel_c.origtxtype,
			:mbfeoprtcancel_c.origtxssno,
			:mbfeoprtcancel_c.cancelstrinfo,
			:mbfeoprtcancel_c.cancelresult,
			:mbfeoprtcancel_c.resultstrinfo,
			:mbfeoprtcancel_c.procstate,
			:mbfeoprtcancel_c.statetime);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT mbfeoprtcancel error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT mbfeoprtcancel error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
