#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"atmrecord_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int atmrecord_con ( struct atmrecord_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct atmrecord_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->atmno);
	zip_tail(ps->atmid);
	zip_tail(ps->atmmode);
	zip_tail(ps->opnbr);
	zip_tail(ps->depflag);
	zip_tail(ps->chaflag);
	zip_tail(ps->userflag);
	zip_tail(ps->atmstat);
	zip_tail(ps->opndate);
	zip_tail(ps->startdte);
	zip_tail(ps->enddate);
	zip_tail(ps->place);
	zip_tail(ps->tlrno);
	zip_tail(ps->filler);
}
int Atmrecord_Debug(struct atmrecord_c *ps){
	vtcp_log("atmrecord_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("atmrecord_c.atmno=[%s]\n",ps->atmno);
	vtcp_log("atmrecord_c.atmid=[%s]\n",ps->atmid);
	vtcp_log("atmrecord_c.atmmode=[%s]\n",ps->atmmode);
	vtcp_log("atmrecord_c.opnbr=[%s]\n",ps->opnbr);
	vtcp_log("atmrecord_c.depflag=[%s]\n",ps->depflag);
	vtcp_log("atmrecord_c.chaflag=[%s]\n",ps->chaflag);
	vtcp_log("atmrecord_c.userflag=[%s]\n",ps->userflag);
	vtcp_log("atmrecord_c.atmstat=[%s]\n",ps->atmstat);
	vtcp_log("atmrecord_c.paycnt=[%ld]\n",ps->paycnt);
	vtcp_log("atmrecord_c.payamt=[%f]\n",ps->payamt);
	vtcp_log("atmrecord_c.paymamt=[%f]\n",ps->paymamt);
	vtcp_log("atmrecord_c.feerate=[%f]\n",ps->feerate);
	vtcp_log("atmrecord_c.opndate=[%s]\n",ps->opndate);
	vtcp_log("atmrecord_c.startdte=[%s]\n",ps->startdte);
	vtcp_log("atmrecord_c.enddate=[%s]\n",ps->enddate);
	vtcp_log("atmrecord_c.place=[%s]\n",ps->place);
	vtcp_log("atmrecord_c.tlrno=[%s]\n",ps->tlrno);
	vtcp_log("atmrecord_c.filler=[%s]\n",ps->filler);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Atmrecord_Sel(reply,atmrecord_c,fmtstr,va_alist)
char    *reply;
struct  atmrecord_c *atmrecord_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Atmrecord_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Atmrecord_Fet_Sel( atmrecord_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Atmrecord_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Atmrecord_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,atmrecord.* FROM atmrecord WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE atmrecord_sel FROM :comm;
	EXEC SQL DECLARE sel_atmrecord CURSOR FOR atmrecord_sel;

	EXEC SQL OPEN sel_atmrecord;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN atmrecord error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Atmrecord_Fet_Sel ( struct atmrecord_c *atmrecord_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_atmrecord INTO :atmrecord_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch atmrecord error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch atmrecord finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(atmrecord_c);

	return 0;
}

int Atmrecord_Clo_Sel (){
	EXEC SQL CLOSE sel_atmrecord;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Atmrecord_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,atmrecord.* FROM atmrecord WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE atmrecord_upd FROM :comm;

	EXEC SQL DECLARE upd_atmrecord CURSOR FOR atmrecord_upd;

	EXEC SQL OPEN upd_atmrecord;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open atmrecord error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Atmrecord_Fet_Upd( struct atmrecord_c *atmrecord_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_atmrecord INTO :atmrecord_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd atmrecord error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH atmrecord finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(atmrecord_c);

	return 0;
}

int Atmrecord_Upd_Upd( struct atmrecord_c atmrecord_c , char * reply){
	int ret;

	EXEC SQL UPDATE atmrecord SET atmno=:atmrecord_c.atmno,
			atmid=:atmrecord_c.atmid,
			atmmode=:atmrecord_c.atmmode,
			opnbr=:atmrecord_c.opnbr,
			depflag=:atmrecord_c.depflag,
			chaflag=:atmrecord_c.chaflag,
			userflag=:atmrecord_c.userflag,
			atmstat=:atmrecord_c.atmstat,
			paycnt=:atmrecord_c.paycnt,
			payamt=:atmrecord_c.payamt,
			paymamt=:atmrecord_c.paymamt,
			feerate=:atmrecord_c.feerate,
			opndate=:atmrecord_c.opndate,
			startdte=:atmrecord_c.startdte,
			enddate=:atmrecord_c.enddate,
			place=:atmrecord_c.place,
			tlrno=:atmrecord_c.tlrno,
			filler=:atmrecord_c.filler
	WHERE rowid=:atmrecord_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE atmrecord error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Atmrecord_Del_Upd(struct atmrecord_c atmrecord_c , char * reply  ){

	EXEC SQL DELETE FROM atmrecord WHERE rowid=:atmrecord_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE atmrecord error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Atmrecord_Clo_Upd( ){
	EXEC SQL CLOSE upd_atmrecord;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Atmrecord_Ins( struct atmrecord_c atmrecord_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO atmrecord VALUES (:atmrecord_c.atmno,
			:atmrecord_c.atmid,
			:atmrecord_c.atmmode,
			:atmrecord_c.opnbr,
			:atmrecord_c.depflag,
			:atmrecord_c.chaflag,
			:atmrecord_c.userflag,
			:atmrecord_c.atmstat,
			:atmrecord_c.paycnt,
			:atmrecord_c.payamt,
			:atmrecord_c.paymamt,
			:atmrecord_c.feerate,
			:atmrecord_c.opndate,
			:atmrecord_c.startdte,
			:atmrecord_c.enddate,
			:atmrecord_c.place,
			:atmrecord_c.tlrno,
			:atmrecord_c.filler);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT atmrecord error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT atmrecord error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
