#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"chnl_single_hold_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int chnl_single_hold_con ( struct chnl_single_hold_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct chnl_single_hold_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->tx_time);
	zip_tail(ps->cur_no);
	zip_tail(ps->ac_no);
	zip_tail(ps->tx_code);
	zip_tail(ps->tx_br_no);
	zip_tail(ps->opn_br_no);
	zip_tail(ps->tel);
	zip_tail(ps->bbmk);
	zip_tail(ps->ttyn);
	zip_tail(ps->pt_time);
	zip_tail(ps->pt_trace_no);
	zip_tail(ps->premise_no);
	zip_tail(ps->brf);
	zip_tail(ps->sts);
	zip_tail(ps->o_trace_no);
	zip_tail(ps->o_pt_trace_no);
	zip_tail(ps->dz_ind);
	zip_tail(ps->dz_ref);
}
int Chnl_single_hold_Debug(struct chnl_single_hold_c *ps){
	vtcp_log("chnl_single_hold_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("chnl_single_hold_c.tx_date=[%ld]\n",ps->tx_date);
	vtcp_log("chnl_single_hold_c.tx_time=[%s]\n",ps->tx_time);
	vtcp_log("chnl_single_hold_c.trace_no=[%ld]\n",ps->trace_no);
	vtcp_log("chnl_single_hold_c.cur_no=[%s]\n",ps->cur_no);
	vtcp_log("chnl_single_hold_c.ac_no=[%s]\n",ps->ac_no);
	vtcp_log("chnl_single_hold_c.tx_code=[%s]\n",ps->tx_code);
	vtcp_log("chnl_single_hold_c.tx_br_no=[%s]\n",ps->tx_br_no);
	vtcp_log("chnl_single_hold_c.opn_br_no=[%s]\n",ps->opn_br_no);
	vtcp_log("chnl_single_hold_c.tel=[%s]\n",ps->tel);
	vtcp_log("chnl_single_hold_c.bbmk=[%s]\n",ps->bbmk);
	vtcp_log("chnl_single_hold_c.ttyn=[%s]\n",ps->ttyn);
	vtcp_log("chnl_single_hold_c.pt_date=[%ld]\n",ps->pt_date);
	vtcp_log("chnl_single_hold_c.pt_time=[%s]\n",ps->pt_time);
	vtcp_log("chnl_single_hold_c.pt_trace_no=[%s]\n",ps->pt_trace_no);
	vtcp_log("chnl_single_hold_c.premise_no=[%s]\n",ps->premise_no);
	vtcp_log("chnl_single_hold_c.hold_amt=[%f]\n",ps->hold_amt);
	vtcp_log("chnl_single_hold_c.tx_amt=[%f]\n",ps->tx_amt);
	vtcp_log("chnl_single_hold_c.brf=[%s]\n",ps->brf);
	vtcp_log("chnl_single_hold_c.sts=[%s]\n",ps->sts);
	vtcp_log("chnl_single_hold_c.o_tx_date=[%ld]\n",ps->o_tx_date);
	vtcp_log("chnl_single_hold_c.o_trace_no=[%s]\n",ps->o_trace_no);
	vtcp_log("chnl_single_hold_c.o_pt_date=[%ld]\n",ps->o_pt_date);
	vtcp_log("chnl_single_hold_c.o_pt_trace_no=[%s]\n",ps->o_pt_trace_no);
	vtcp_log("chnl_single_hold_c.dz_ind=[%s]\n",ps->dz_ind);
	vtcp_log("chnl_single_hold_c.dz_ref=[%s]\n",ps->dz_ref);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Chnl_single_hold_Sel(reply,chnl_single_hold_c,fmtstr,va_alist)
char    *reply;
struct  chnl_single_hold_c *chnl_single_hold_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Chnl_single_hold_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Chnl_single_hold_Fet_Sel( chnl_single_hold_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Chnl_single_hold_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Chnl_single_hold_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,chnl_single_hold.* FROM chnl_single_hold WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE chnl_single_hold_sel FROM :comm;
	EXEC SQL DECLARE sel_chnl_single_hold CURSOR FOR chnl_single_hold_sel;

	EXEC SQL OPEN sel_chnl_single_hold;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN chnl_single_hold error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Chnl_single_hold_Fet_Sel ( struct chnl_single_hold_c *chnl_single_hold_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_chnl_single_hold INTO :chnl_single_hold_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch chnl_single_hold error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch chnl_single_hold finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(chnl_single_hold_c);

	return 0;
}

int Chnl_single_hold_Clo_Sel (){
	EXEC SQL CLOSE sel_chnl_single_hold;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Chnl_single_hold_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,chnl_single_hold.* FROM chnl_single_hold WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE chnl_single_hold_upd FROM :comm;

	EXEC SQL DECLARE upd_chnl_single_hold CURSOR FOR chnl_single_hold_upd;

	EXEC SQL OPEN upd_chnl_single_hold;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open chnl_single_hold error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Chnl_single_hold_Fet_Upd( struct chnl_single_hold_c *chnl_single_hold_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_chnl_single_hold INTO :chnl_single_hold_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd chnl_single_hold error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH chnl_single_hold finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(chnl_single_hold_c);

	return 0;
}

int Chnl_single_hold_Upd_Upd( struct chnl_single_hold_c chnl_single_hold_c , char * reply){
	int ret;

	EXEC SQL UPDATE chnl_single_hold SET tx_date=:chnl_single_hold_c.tx_date,
			tx_time=:chnl_single_hold_c.tx_time,
			trace_no=:chnl_single_hold_c.trace_no,
			cur_no=:chnl_single_hold_c.cur_no,
			ac_no=:chnl_single_hold_c.ac_no,
			tx_code=:chnl_single_hold_c.tx_code,
			tx_br_no=:chnl_single_hold_c.tx_br_no,
			opn_br_no=:chnl_single_hold_c.opn_br_no,
			tel=:chnl_single_hold_c.tel,
			bbmk=:chnl_single_hold_c.bbmk,
			ttyn=:chnl_single_hold_c.ttyn,
			pt_date=:chnl_single_hold_c.pt_date,
			pt_time=:chnl_single_hold_c.pt_time,
			pt_trace_no=:chnl_single_hold_c.pt_trace_no,
			premise_no=:chnl_single_hold_c.premise_no,
			hold_amt=:chnl_single_hold_c.hold_amt,
			tx_amt=:chnl_single_hold_c.tx_amt,
			brf=:chnl_single_hold_c.brf,
			sts=:chnl_single_hold_c.sts,
			o_tx_date=:chnl_single_hold_c.o_tx_date,
			o_trace_no=:chnl_single_hold_c.o_trace_no,
			o_pt_date=:chnl_single_hold_c.o_pt_date,
			o_pt_trace_no=:chnl_single_hold_c.o_pt_trace_no,
			dz_ind=:chnl_single_hold_c.dz_ind,
			dz_ref=:chnl_single_hold_c.dz_ref
	WHERE rowid=:chnl_single_hold_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE chnl_single_hold error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Chnl_single_hold_Del_Upd(struct chnl_single_hold_c chnl_single_hold_c , char * reply  ){

	EXEC SQL DELETE FROM chnl_single_hold WHERE rowid=:chnl_single_hold_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE chnl_single_hold error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Chnl_single_hold_Clo_Upd( ){
	EXEC SQL CLOSE upd_chnl_single_hold;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Chnl_single_hold_Ins( struct chnl_single_hold_c chnl_single_hold_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO chnl_single_hold VALUES (:chnl_single_hold_c.tx_date,
			:chnl_single_hold_c.tx_time,
			:chnl_single_hold_c.trace_no,
			:chnl_single_hold_c.cur_no,
			:chnl_single_hold_c.ac_no,
			:chnl_single_hold_c.tx_code,
			:chnl_single_hold_c.tx_br_no,
			:chnl_single_hold_c.opn_br_no,
			:chnl_single_hold_c.tel,
			:chnl_single_hold_c.bbmk,
			:chnl_single_hold_c.ttyn,
			:chnl_single_hold_c.pt_date,
			:chnl_single_hold_c.pt_time,
			:chnl_single_hold_c.pt_trace_no,
			:chnl_single_hold_c.premise_no,
			:chnl_single_hold_c.hold_amt,
			:chnl_single_hold_c.tx_amt,
			:chnl_single_hold_c.brf,
			:chnl_single_hold_c.sts,
			:chnl_single_hold_c.o_tx_date,
			:chnl_single_hold_c.o_trace_no,
			:chnl_single_hold_c.o_pt_date,
			:chnl_single_hold_c.o_pt_trace_no,
			:chnl_single_hold_c.dz_ind,
			:chnl_single_hold_c.dz_ref);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT chnl_single_hold error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT chnl_single_hold error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
