#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"cupserr_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int cupserr_con ( struct cupserr_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct cupserr_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->brtype);
	zip_tail(ps->errflg);
	zip_tail(ps->filename);
	zip_tail(ps->txday);
	zip_tail(ps->brno);
	zip_tail(ps->dlbrno);
	zip_tail(ps->fsbrno);
	zip_tail(ps->trseq);
	zip_tail(ps->txtime);
	zip_tail(ps->cardno);
	zip_tail(ps->msgtype);
	zip_tail(ps->txcode);
	zip_tail(ps->mertype);
	zip_tail(ps->atmno);
	zip_tail(ps->wssrno);
	zip_tail(ps->inputcd);
	zip_tail(ps->authcd);
	zip_tail(ps->isbkno);
	zip_tail(ps->opnbrno);
	zip_tail(ps->otrseq);
	zip_tail(ps->respcd);
	zip_tail(ps->inputmd);
	zip_tail(ps->errreasn);
	zip_tail(ps->cardseq);
	zip_tail(ps->tmreadfg);
	zip_tail(ps->iccardfg);
	zip_tail(ps->otxtime);
	zip_tail(ps->oqstime);
	zip_tail(ps->otxday);
	zip_tail(ps->eciflag);
	zip_tail(ps->outbrno);
	zip_tail(ps->outcardno);
	zip_tail(ps->inbrno);
	zip_tail(ps->incardno);
	zip_tail(ps->areaflg);
	zip_tail(ps->tmp);
}
int Cupserr_Debug(struct cupserr_c *ps){
	vtcp_log("cupserr_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("cupserr_c.brtype=[%s]\n",ps->brtype);
	vtcp_log("cupserr_c.errflg=[%s]\n",ps->errflg);
	vtcp_log("cupserr_c.filename=[%s]\n",ps->filename);
	vtcp_log("cupserr_c.txday=[%s]\n",ps->txday);
	vtcp_log("cupserr_c.brno=[%s]\n",ps->brno);
	vtcp_log("cupserr_c.dlbrno=[%s]\n",ps->dlbrno);
	vtcp_log("cupserr_c.fsbrno=[%s]\n",ps->fsbrno);
	vtcp_log("cupserr_c.trseq=[%s]\n",ps->trseq);
	vtcp_log("cupserr_c.txtime=[%s]\n",ps->txtime);
	vtcp_log("cupserr_c.cardno=[%s]\n",ps->cardno);
	vtcp_log("cupserr_c.txamt=[%f]\n",ps->txamt);
	vtcp_log("cupserr_c.fee=[%f]\n",ps->fee);
	vtcp_log("cupserr_c.msgtype=[%s]\n",ps->msgtype);
	vtcp_log("cupserr_c.txcode=[%s]\n",ps->txcode);
	vtcp_log("cupserr_c.mertype=[%s]\n",ps->mertype);
	vtcp_log("cupserr_c.atmno=[%s]\n",ps->atmno);
	vtcp_log("cupserr_c.wssrno=[%s]\n",ps->wssrno);
	vtcp_log("cupserr_c.inputcd=[%s]\n",ps->inputcd);
	vtcp_log("cupserr_c.authcd=[%s]\n",ps->authcd);
	vtcp_log("cupserr_c.isbkno=[%s]\n",ps->isbkno);
	vtcp_log("cupserr_c.opnbrno=[%s]\n",ps->opnbrno);
	vtcp_log("cupserr_c.otrseq=[%s]\n",ps->otrseq);
	vtcp_log("cupserr_c.respcd=[%s]\n",ps->respcd);
	vtcp_log("cupserr_c.inputmd=[%s]\n",ps->inputmd);
	vtcp_log("cupserr_c.insxfee=[%f]\n",ps->insxfee);
	vtcp_log("cupserr_c.outsxfee=[%f]\n",ps->outsxfee);
	vtcp_log("cupserr_c.zjfee=[%f]\n",ps->zjfee);
	vtcp_log("cupserr_c.infee=[%f]\n",ps->infee);
	vtcp_log("cupserr_c.outfee=[%f]\n",ps->outfee);
	vtcp_log("cupserr_c.errreasn=[%s]\n",ps->errreasn);
	vtcp_log("cupserr_c.cardseq=[%s]\n",ps->cardseq);
	vtcp_log("cupserr_c.tmreadfg=[%s]\n",ps->tmreadfg);
	vtcp_log("cupserr_c.iccardfg=[%s]\n",ps->iccardfg);
	vtcp_log("cupserr_c.otxtime=[%s]\n",ps->otxtime);
	vtcp_log("cupserr_c.oqstime=[%s]\n",ps->oqstime);
	vtcp_log("cupserr_c.otxday=[%s]\n",ps->otxday);
	vtcp_log("cupserr_c.otxamt=[%f]\n",ps->otxamt);
	vtcp_log("cupserr_c.eciflag=[%s]\n",ps->eciflag);
	vtcp_log("cupserr_c.outbrno=[%s]\n",ps->outbrno);
	vtcp_log("cupserr_c.outcardno=[%s]\n",ps->outcardno);
	vtcp_log("cupserr_c.inbrno=[%s]\n",ps->inbrno);
	vtcp_log("cupserr_c.incardno=[%s]\n",ps->incardno);
	vtcp_log("cupserr_c.areaflg=[%s]\n",ps->areaflg);
	vtcp_log("cupserr_c.tmp=[%s]\n",ps->tmp);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Cupserr_Sel(reply,cupserr_c,fmtstr,va_alist)
char    *reply;
struct  cupserr_c *cupserr_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Cupserr_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Cupserr_Fet_Sel( cupserr_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Cupserr_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Cupserr_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,cupserr.* FROM cupserr WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE cupserr_sel FROM :comm;
	EXEC SQL DECLARE sel_cupserr CURSOR FOR cupserr_sel;

	EXEC SQL OPEN sel_cupserr;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN cupserr error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Cupserr_Fet_Sel ( struct cupserr_c *cupserr_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_cupserr INTO :cupserr_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch cupserr error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch cupserr finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(cupserr_c);

	return 0;
}

int Cupserr_Clo_Sel (){
	EXEC SQL CLOSE sel_cupserr;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Cupserr_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,cupserr.* FROM cupserr WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE cupserr_upd FROM :comm;

	EXEC SQL DECLARE upd_cupserr CURSOR FOR cupserr_upd;

	EXEC SQL OPEN upd_cupserr;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open cupserr error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Cupserr_Fet_Upd( struct cupserr_c *cupserr_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_cupserr INTO :cupserr_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd cupserr error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH cupserr finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(cupserr_c);

	return 0;
}

int Cupserr_Upd_Upd( struct cupserr_c cupserr_c , char * reply){
	int ret;

	EXEC SQL UPDATE cupserr SET brtype=:cupserr_c.brtype,
			errflg=:cupserr_c.errflg,
			filename=:cupserr_c.filename,
			txday=:cupserr_c.txday,
			brno=:cupserr_c.brno,
			dlbrno=:cupserr_c.dlbrno,
			fsbrno=:cupserr_c.fsbrno,
			trseq=:cupserr_c.trseq,
			txtime=:cupserr_c.txtime,
			cardno=:cupserr_c.cardno,
			txamt=:cupserr_c.txamt,
			fee=:cupserr_c.fee,
			msgtype=:cupserr_c.msgtype,
			txcode=:cupserr_c.txcode,
			mertype=:cupserr_c.mertype,
			atmno=:cupserr_c.atmno,
			wssrno=:cupserr_c.wssrno,
			inputcd=:cupserr_c.inputcd,
			authcd=:cupserr_c.authcd,
			isbkno=:cupserr_c.isbkno,
			opnbrno=:cupserr_c.opnbrno,
			otrseq=:cupserr_c.otrseq,
			respcd=:cupserr_c.respcd,
			inputmd=:cupserr_c.inputmd,
			insxfee=:cupserr_c.insxfee,
			outsxfee=:cupserr_c.outsxfee,
			zjfee=:cupserr_c.zjfee,
			infee=:cupserr_c.infee,
			outfee=:cupserr_c.outfee,
			errreasn=:cupserr_c.errreasn,
			cardseq=:cupserr_c.cardseq,
			tmreadfg=:cupserr_c.tmreadfg,
			iccardfg=:cupserr_c.iccardfg,
			otxtime=:cupserr_c.otxtime,
			oqstime=:cupserr_c.oqstime,
			otxday=:cupserr_c.otxday,
			otxamt=:cupserr_c.otxamt,
			eciflag=:cupserr_c.eciflag,
			outbrno=:cupserr_c.outbrno,
			outcardno=:cupserr_c.outcardno,
			inbrno=:cupserr_c.inbrno,
			incardno=:cupserr_c.incardno,
			areaflg=:cupserr_c.areaflg,
			tmp=:cupserr_c.tmp
	WHERE rowid=:cupserr_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE cupserr error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Cupserr_Del_Upd(struct cupserr_c cupserr_c , char * reply  ){

	EXEC SQL DELETE FROM cupserr WHERE rowid=:cupserr_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE cupserr error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Cupserr_Clo_Upd( ){
	EXEC SQL CLOSE upd_cupserr;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Cupserr_Ins( struct cupserr_c cupserr_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO cupserr VALUES (:cupserr_c.brtype,
			:cupserr_c.errflg,
			:cupserr_c.filename,
			:cupserr_c.txday,
			:cupserr_c.brno,
			:cupserr_c.dlbrno,
			:cupserr_c.fsbrno,
			:cupserr_c.trseq,
			:cupserr_c.txtime,
			:cupserr_c.cardno,
			:cupserr_c.txamt,
			:cupserr_c.fee,
			:cupserr_c.msgtype,
			:cupserr_c.txcode,
			:cupserr_c.mertype,
			:cupserr_c.atmno,
			:cupserr_c.wssrno,
			:cupserr_c.inputcd,
			:cupserr_c.authcd,
			:cupserr_c.isbkno,
			:cupserr_c.opnbrno,
			:cupserr_c.otrseq,
			:cupserr_c.respcd,
			:cupserr_c.inputmd,
			:cupserr_c.insxfee,
			:cupserr_c.outsxfee,
			:cupserr_c.zjfee,
			:cupserr_c.infee,
			:cupserr_c.outfee,
			:cupserr_c.errreasn,
			:cupserr_c.cardseq,
			:cupserr_c.tmreadfg,
			:cupserr_c.iccardfg,
			:cupserr_c.otxtime,
			:cupserr_c.oqstime,
			:cupserr_c.otxday,
			:cupserr_c.otxamt,
			:cupserr_c.eciflag,
			:cupserr_c.outbrno,
			:cupserr_c.outcardno,
			:cupserr_c.inbrno,
			:cupserr_c.incardno,
			:cupserr_c.areaflg,
			:cupserr_c.tmp);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT cupserr error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT cupserr error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
