#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"remark_ctl_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int remark_ctl_con ( struct remark_ctl_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct remark_ctl_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->br_no);
	zip_tail(ps->ac_no);
	zip_tail(ps->rem_code);
	zip_tail(ps->rem);
	zip_tail(ps->tx_tel);
	zip_tail(ps->lst_tel);
	zip_tail(ps->rem_sts);
}
int Remark_ctl_Debug(struct remark_ctl_c *ps){
	vtcp_log("remark_ctl_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("remark_ctl_c.br_no=[%s]\n",ps->br_no);
	vtcp_log("remark_ctl_c.ac_no=[%s]\n",ps->ac_no);
	vtcp_log("remark_ctl_c.ac_id=[%ld]\n",ps->ac_id);
	vtcp_log("remark_ctl_c.ac_seqn=[%ld]\n",ps->ac_seqn);
	vtcp_log("remark_ctl_c.rem_code=[%s]\n",ps->rem_code);
	vtcp_log("remark_ctl_c.amt=[%f]\n",ps->amt);
	vtcp_log("remark_ctl_c.rem=[%s]\n",ps->rem);
	vtcp_log("remark_ctl_c.tx_date=[%ld]\n",ps->tx_date);
	vtcp_log("remark_ctl_c.tx_tel=[%s]\n",ps->tx_tel);
	vtcp_log("remark_ctl_c.lst_date=[%ld]\n",ps->lst_date);
	vtcp_log("remark_ctl_c.lst_tel=[%s]\n",ps->lst_tel);
	vtcp_log("remark_ctl_c.rem_sts=[%s]\n",ps->rem_sts);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Remark_ctl_Sel(reply,remark_ctl_c,fmtstr,va_alist)
char    *reply;
struct  remark_ctl_c *remark_ctl_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Remark_ctl_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Remark_ctl_Fet_Sel( remark_ctl_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Remark_ctl_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Remark_ctl_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,remark_ctl.* FROM remark_ctl WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE remark_ctl_sel FROM :comm;
	EXEC SQL DECLARE sel_remark_ctl CURSOR FOR remark_ctl_sel;

	EXEC SQL OPEN sel_remark_ctl;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN remark_ctl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Remark_ctl_Fet_Sel ( struct remark_ctl_c *remark_ctl_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_remark_ctl INTO :remark_ctl_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch remark_ctl error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch remark_ctl finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(remark_ctl_c);

	return 0;
}

int Remark_ctl_Clo_Sel (){
	EXEC SQL CLOSE sel_remark_ctl;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Remark_ctl_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,remark_ctl.* FROM remark_ctl WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE remark_ctl_upd FROM :comm;

	EXEC SQL DECLARE upd_remark_ctl CURSOR FOR remark_ctl_upd;

	EXEC SQL OPEN upd_remark_ctl;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open remark_ctl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Remark_ctl_Fet_Upd( struct remark_ctl_c *remark_ctl_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_remark_ctl INTO :remark_ctl_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd remark_ctl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH remark_ctl finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(remark_ctl_c);

	return 0;
}

int Remark_ctl_Upd_Upd( struct remark_ctl_c remark_ctl_c , char * reply){
	int ret;

	EXEC SQL UPDATE remark_ctl SET br_no=:remark_ctl_c.br_no,
			ac_no=:remark_ctl_c.ac_no,
			ac_id=:remark_ctl_c.ac_id,
			ac_seqn=:remark_ctl_c.ac_seqn,
			rem_code=:remark_ctl_c.rem_code,
			amt=:remark_ctl_c.amt,
			rem=:remark_ctl_c.rem,
			tx_date=:remark_ctl_c.tx_date,
			tx_tel=:remark_ctl_c.tx_tel,
			lst_date=:remark_ctl_c.lst_date,
			lst_tel=:remark_ctl_c.lst_tel,
			rem_sts=:remark_ctl_c.rem_sts
	WHERE rowid=:remark_ctl_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE remark_ctl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Remark_ctl_Del_Upd(struct remark_ctl_c remark_ctl_c , char * reply  ){

	EXEC SQL DELETE FROM remark_ctl WHERE rowid=:remark_ctl_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE remark_ctl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Remark_ctl_Clo_Upd( ){
	EXEC SQL CLOSE upd_remark_ctl;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Remark_ctl_Ins( struct remark_ctl_c remark_ctl_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO remark_ctl VALUES (:remark_ctl_c.br_no,
			:remark_ctl_c.ac_no,
			:remark_ctl_c.ac_id,
			:remark_ctl_c.ac_seqn,
			:remark_ctl_c.rem_code,
			:remark_ctl_c.amt,
			:remark_ctl_c.rem,
			:remark_ctl_c.tx_date,
			:remark_ctl_c.tx_tel,
			:remark_ctl_c.lst_date,
			:remark_ctl_c.lst_tel,
			:remark_ctl_c.rem_sts);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT remark_ctl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT remark_ctl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
