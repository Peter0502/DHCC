#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"mbfe_cmt_tag_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int mbfe_cmt_tag_con ( struct mbfe_cmt_tag_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct mbfe_cmt_tag_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->cmtno);
	zip_tail(ps->tag);
	zip_tail(ps->tag_name);
	zip_tail(ps->tag_data_type);
	zip_tail(ps->null_flag);
	zip_tail(ps->field1);
	zip_tail(ps->tag_data_code1);
	zip_tail(ps->field2);
	zip_tail(ps->tag_data_code2);
}
int Mbfe_cmt_tag_Debug(struct mbfe_cmt_tag_c *ps){
	vtcp_log("mbfe_cmt_tag_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("mbfe_cmt_tag_c.cmtno=[%s]\n",ps->cmtno);
	vtcp_log("mbfe_cmt_tag_c.tag_seqn=[%ld]\n",ps->tag_seqn);
	vtcp_log("mbfe_cmt_tag_c.tag=[%s]\n",ps->tag);
	vtcp_log("mbfe_cmt_tag_c.tag_maxlen=[%ld]\n",ps->tag_maxlen);
	vtcp_log("mbfe_cmt_tag_c.tag_name=[%s]\n",ps->tag_name);
	vtcp_log("mbfe_cmt_tag_c.tag_data_type=[%s]\n",ps->tag_data_type);
	vtcp_log("mbfe_cmt_tag_c.null_flag=[%s]\n",ps->null_flag);
	vtcp_log("mbfe_cmt_tag_c.len1=[%ld]\n",ps->len1);
	vtcp_log("mbfe_cmt_tag_c.field1=[%s]\n",ps->field1);
	vtcp_log("mbfe_cmt_tag_c.tag_data_code1=[%s]\n",ps->tag_data_code1);
	vtcp_log("mbfe_cmt_tag_c.len2=[%ld]\n",ps->len2);
	vtcp_log("mbfe_cmt_tag_c.field2=[%s]\n",ps->field2);
	vtcp_log("mbfe_cmt_tag_c.tag_data_code2=[%s]\n",ps->tag_data_code2);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Mbfe_cmt_tag_Sel(reply,mbfe_cmt_tag_c,fmtstr,va_alist)
char    *reply;
struct  mbfe_cmt_tag_c *mbfe_cmt_tag_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Mbfe_cmt_tag_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Mbfe_cmt_tag_Fet_Sel( mbfe_cmt_tag_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Mbfe_cmt_tag_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Mbfe_cmt_tag_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,mbfe_cmt_tag.* FROM mbfe_cmt_tag WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mbfe_cmt_tag_sel FROM :comm;
	EXEC SQL DECLARE sel_mbfe_cmt_tag CURSOR FOR mbfe_cmt_tag_sel;

	EXEC SQL OPEN sel_mbfe_cmt_tag;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN mbfe_cmt_tag error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mbfe_cmt_tag_Fet_Sel ( struct mbfe_cmt_tag_c *mbfe_cmt_tag_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_mbfe_cmt_tag INTO :mbfe_cmt_tag_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch mbfe_cmt_tag error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch mbfe_cmt_tag finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(mbfe_cmt_tag_c);

	return 0;
}

int Mbfe_cmt_tag_Clo_Sel (){
	EXEC SQL CLOSE sel_mbfe_cmt_tag;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Mbfe_cmt_tag_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,mbfe_cmt_tag.* FROM mbfe_cmt_tag WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mbfe_cmt_tag_upd FROM :comm;

	EXEC SQL DECLARE upd_mbfe_cmt_tag CURSOR FOR mbfe_cmt_tag_upd;

	EXEC SQL OPEN upd_mbfe_cmt_tag;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open mbfe_cmt_tag error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mbfe_cmt_tag_Fet_Upd( struct mbfe_cmt_tag_c *mbfe_cmt_tag_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_mbfe_cmt_tag INTO :mbfe_cmt_tag_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd mbfe_cmt_tag error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH mbfe_cmt_tag finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(mbfe_cmt_tag_c);

	return 0;
}

int Mbfe_cmt_tag_Upd_Upd( struct mbfe_cmt_tag_c mbfe_cmt_tag_c , char * reply){
	int ret;

	EXEC SQL UPDATE mbfe_cmt_tag SET cmtno=:mbfe_cmt_tag_c.cmtno,
			tag_seqn=:mbfe_cmt_tag_c.tag_seqn,
			tag=:mbfe_cmt_tag_c.tag,
			tag_maxlen=:mbfe_cmt_tag_c.tag_maxlen,
			tag_name=:mbfe_cmt_tag_c.tag_name,
			tag_data_type=:mbfe_cmt_tag_c.tag_data_type,
			null_flag=:mbfe_cmt_tag_c.null_flag,
			len1=:mbfe_cmt_tag_c.len1,
			field1=:mbfe_cmt_tag_c.field1,
			tag_data_code1=:mbfe_cmt_tag_c.tag_data_code1,
			len2=:mbfe_cmt_tag_c.len2,
			field2=:mbfe_cmt_tag_c.field2,
			tag_data_code2=:mbfe_cmt_tag_c.tag_data_code2
	WHERE rowid=:mbfe_cmt_tag_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE mbfe_cmt_tag error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Mbfe_cmt_tag_Del_Upd(struct mbfe_cmt_tag_c mbfe_cmt_tag_c , char * reply  ){

	EXEC SQL DELETE FROM mbfe_cmt_tag WHERE rowid=:mbfe_cmt_tag_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE mbfe_cmt_tag error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mbfe_cmt_tag_Clo_Upd( ){
	EXEC SQL CLOSE upd_mbfe_cmt_tag;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Mbfe_cmt_tag_Ins( struct mbfe_cmt_tag_c mbfe_cmt_tag_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO mbfe_cmt_tag VALUES (:mbfe_cmt_tag_c.cmtno,
			:mbfe_cmt_tag_c.tag_seqn,
			:mbfe_cmt_tag_c.tag,
			:mbfe_cmt_tag_c.tag_maxlen,
			:mbfe_cmt_tag_c.tag_name,
			:mbfe_cmt_tag_c.tag_data_type,
			:mbfe_cmt_tag_c.null_flag,
			:mbfe_cmt_tag_c.len1,
			:mbfe_cmt_tag_c.field1,
			:mbfe_cmt_tag_c.tag_data_code1,
			:mbfe_cmt_tag_c.len2,
			:mbfe_cmt_tag_c.field2,
			:mbfe_cmt_tag_c.tag_data_code2);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT mbfe_cmt_tag error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT mbfe_cmt_tag error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
