#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"lv_sysctl_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int lv_sysctl_con ( struct lv_sysctl_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct lv_sysctl_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->stat);
	zip_tail(ps->chgnode);
	zip_tail(ps->curstat);
	zip_tail(ps->chgtime);
	zip_tail(ps->message);
	zip_tail(ps->checkstat);
	zip_tail(ps->filler);
}
int Lv_sysctl_Debug(struct lv_sysctl_c *ps){
	vtcp_log("lv_sysctl_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("lv_sysctl_c.tx_date=[%ld]\n",ps->tx_date);
	vtcp_log("lv_sysctl_c.stat=[%s]\n",ps->stat);
	vtcp_log("lv_sysctl_c.next_date=[%ld]\n",ps->next_date);
	vtcp_log("lv_sysctl_c.chgnode=[%s]\n",ps->chgnode);
	vtcp_log("lv_sysctl_c.curstat=[%s]\n",ps->curstat);
	vtcp_log("lv_sysctl_c.chgtime=[%s]\n",ps->chgtime);
	vtcp_log("lv_sysctl_c.message=[%s]\n",ps->message);
	vtcp_log("lv_sysctl_c.checkstat=[%s]\n",ps->checkstat);
	vtcp_log("lv_sysctl_c.filler=[%s]\n",ps->filler);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Lv_sysctl_Sel(reply,lv_sysctl_c,fmtstr,va_alist)
char    *reply;
struct  lv_sysctl_c *lv_sysctl_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Lv_sysctl_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Lv_sysctl_Fet_Sel( lv_sysctl_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Lv_sysctl_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Lv_sysctl_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,lv_sysctl.* FROM lv_sysctl WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE lv_sysctl_sel FROM :comm;
	EXEC SQL DECLARE sel_lv_sysctl CURSOR FOR lv_sysctl_sel;

	EXEC SQL OPEN sel_lv_sysctl;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN lv_sysctl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Lv_sysctl_Fet_Sel ( struct lv_sysctl_c *lv_sysctl_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_lv_sysctl INTO :lv_sysctl_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch lv_sysctl error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch lv_sysctl finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(lv_sysctl_c);

	return 0;
}

int Lv_sysctl_Clo_Sel (){
	EXEC SQL CLOSE sel_lv_sysctl;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Lv_sysctl_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,lv_sysctl.* FROM lv_sysctl WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE lv_sysctl_upd FROM :comm;

	EXEC SQL DECLARE upd_lv_sysctl CURSOR FOR lv_sysctl_upd;

	EXEC SQL OPEN upd_lv_sysctl;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open lv_sysctl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Lv_sysctl_Fet_Upd( struct lv_sysctl_c *lv_sysctl_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_lv_sysctl INTO :lv_sysctl_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd lv_sysctl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH lv_sysctl finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(lv_sysctl_c);

	return 0;
}

int Lv_sysctl_Upd_Upd( struct lv_sysctl_c lv_sysctl_c , char * reply){
	int ret;

	EXEC SQL UPDATE lv_sysctl SET tx_date=:lv_sysctl_c.tx_date,
			stat=:lv_sysctl_c.stat,
			next_date=:lv_sysctl_c.next_date,
			chgnode=:lv_sysctl_c.chgnode,
			curstat=:lv_sysctl_c.curstat,
			chgtime=:lv_sysctl_c.chgtime,
			message=:lv_sysctl_c.message,
			checkstat=:lv_sysctl_c.checkstat,
			filler=:lv_sysctl_c.filler
	WHERE rowid=:lv_sysctl_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE lv_sysctl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Lv_sysctl_Del_Upd(struct lv_sysctl_c lv_sysctl_c , char * reply  ){

	EXEC SQL DELETE FROM lv_sysctl WHERE rowid=:lv_sysctl_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE lv_sysctl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Lv_sysctl_Clo_Upd( ){
	EXEC SQL CLOSE upd_lv_sysctl;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Lv_sysctl_Ins( struct lv_sysctl_c lv_sysctl_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO lv_sysctl VALUES (:lv_sysctl_c.tx_date,
			:lv_sysctl_c.stat,
			:lv_sysctl_c.next_date,
			:lv_sysctl_c.chgnode,
			:lv_sysctl_c.curstat,
			:lv_sysctl_c.chgtime,
			:lv_sysctl_c.message,
			:lv_sysctl_c.checkstat,
			:lv_sysctl_c.filler);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT lv_sysctl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT lv_sysctl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
