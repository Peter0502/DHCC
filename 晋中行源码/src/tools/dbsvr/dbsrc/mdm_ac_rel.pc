#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"mdm_ac_rel_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)
static char str[3000];
static char mystery[17];

int mdm_ac_rel_con ( struct mdm_ac_rel_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct mdm_ac_rel_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->opn_br_no);
	zip_tail(ps->ac_no);
	zip_tail(ps->mdm_code);
	zip_tail(ps->note_no);
	zip_tail(ps->note_sts);
	zip_tail(ps->coll_sts);
	zip_tail(ps->draw_uncon_yn);
	zip_tail(ps->draw_pwd_chg);
	zip_tail(ps->draw_pwd_yn);
	zip_tail(ps->qry_pwd);
	zip_tail(ps->draw_pwd);
	zip_tail(ps->draw_id_yn);
	zip_tail(ps->id_type);
	zip_tail(ps->id_no);
	zip_tail(ps->draw_seal_yn);
	zip_tail(ps->pwd_mach_yn);
	zip_tail(ps->main_ind);
	zip_tail(ps->mac);
}
int Mdm_ac_rel_Debug(struct mdm_ac_rel_c *ps){
	vtcp_log("mdm_ac_rel_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("mdm_ac_rel_c.opn_br_no=[%s]\n",ps->opn_br_no);
	vtcp_log("mdm_ac_rel_c.ac_no=[%s]\n",ps->ac_no);
	vtcp_log("mdm_ac_rel_c.ac_id=[%ld]\n",ps->ac_id);
	vtcp_log("mdm_ac_rel_c.ac_seqn=[%ld]\n",ps->ac_seqn);
	vtcp_log("mdm_ac_rel_c.mdm_code=[%s]\n",ps->mdm_code);
	vtcp_log("mdm_ac_rel_c.note_no=[%s]\n",ps->note_no);
	vtcp_log("mdm_ac_rel_c.note_sts=[%s]\n",ps->note_sts);
	vtcp_log("mdm_ac_rel_c.coll_sts=[%s]\n",ps->coll_sts);
	vtcp_log("mdm_ac_rel_c.beg_date=[%ld]\n",ps->beg_date);
	vtcp_log("mdm_ac_rel_c.end_date=[%ld]\n",ps->end_date);
	vtcp_log("mdm_ac_rel_c.draw_uncon_yn=[%s]\n",ps->draw_uncon_yn);
	vtcp_log("mdm_ac_rel_c.draw_pwd_chg=[%s]\n",ps->draw_pwd_chg);
	vtcp_log("mdm_ac_rel_c.draw_pwd_yn=[%s]\n",ps->draw_pwd_yn);
	vtcp_log("mdm_ac_rel_c.qry_pwd=[%s]\n",ps->qry_pwd);
	vtcp_log("mdm_ac_rel_c.draw_pwd=[%s]\n",ps->draw_pwd);
	vtcp_log("mdm_ac_rel_c.draw_id_yn=[%s]\n",ps->draw_id_yn);
	vtcp_log("mdm_ac_rel_c.id_type=[%s]\n",ps->id_type);
	vtcp_log("mdm_ac_rel_c.id_no=[%s]\n",ps->id_no);
	vtcp_log("mdm_ac_rel_c.draw_seal_yn=[%s]\n",ps->draw_seal_yn);
	vtcp_log("mdm_ac_rel_c.pwd_mach_yn=[%s]\n",ps->pwd_mach_yn);
	vtcp_log("mdm_ac_rel_c.book_bal=[%f]\n",ps->book_bal);
	vtcp_log("mdm_ac_rel_c.prt_line=[%ld]\n",ps->prt_line);
	vtcp_log("mdm_ac_rel_c.main_ind=[%s]\n",ps->main_ind);
	vtcp_log("mdm_ac_rel_c.mac=[%s]\n",ps->mac);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Mdm_ac_rel_Sel(reply,mdm_ac_rel_c,fmtstr,va_alist)
char    *reply;
struct  mdm_ac_rel_c *mdm_ac_rel_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Mdm_ac_rel_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Mdm_ac_rel_Fet_Sel( mdm_ac_rel_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Mdm_ac_rel_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Mdm_ac_rel_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,mdm_ac_rel.* FROM mdm_ac_rel WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mdm_ac_rel_sel FROM :comm;
	EXEC SQL DECLARE sel_mdm_ac_rel CURSOR FOR mdm_ac_rel_sel;

	EXEC SQL OPEN sel_mdm_ac_rel;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN mdm_ac_rel error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mdm_ac_rel_Fet_Sel ( struct mdm_ac_rel_c *mdm_ac_rel_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_mdm_ac_rel INTO :mdm_ac_rel_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch mdm_ac_rel error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch mdm_ac_rel finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(mdm_ac_rel_c);

	return 0;
}

int Mdm_ac_rel_Clo_Sel (){
	EXEC SQL CLOSE sel_mdm_ac_rel;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Mdm_ac_rel_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,mdm_ac_rel.* FROM mdm_ac_rel WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mdm_ac_rel_upd FROM :comm;

	EXEC SQL DECLARE upd_mdm_ac_rel CURSOR FOR mdm_ac_rel_upd;

	EXEC SQL OPEN upd_mdm_ac_rel;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open mdm_ac_rel error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mdm_ac_rel_Fet_Upd( struct mdm_ac_rel_c *mdm_ac_rel_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_mdm_ac_rel INTO :mdm_ac_rel_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd mdm_ac_rel error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH mdm_ac_rel finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(mdm_ac_rel_c);

	return 0;
}

int Mdm_ac_rel_Upd_Upd( struct mdm_ac_rel_c mdm_ac_rel_c , char * reply){
	int ret;

	memset( str, 0x0,sizeof(str) );
	memset( mystery, 0x0, sizeof(mystery) );
	ret = mdm_ac_rel_con ( mdm_ac_rel_c, str );
	ret = put_mystery( str, mystery );
	strcpy(  mdm_ac_rel_c.mac, mystery ); 
	EXEC SQL UPDATE mdm_ac_rel SET opn_br_no=:mdm_ac_rel_c.opn_br_no,
			ac_no=:mdm_ac_rel_c.ac_no,
			ac_id=:mdm_ac_rel_c.ac_id,
			ac_seqn=:mdm_ac_rel_c.ac_seqn,
			mdm_code=:mdm_ac_rel_c.mdm_code,
			note_no=:mdm_ac_rel_c.note_no,
			note_sts=:mdm_ac_rel_c.note_sts,
			coll_sts=:mdm_ac_rel_c.coll_sts,
			beg_date=:mdm_ac_rel_c.beg_date,
			end_date=:mdm_ac_rel_c.end_date,
			draw_uncon_yn=:mdm_ac_rel_c.draw_uncon_yn,
			draw_pwd_chg=:mdm_ac_rel_c.draw_pwd_chg,
			draw_pwd_yn=:mdm_ac_rel_c.draw_pwd_yn,
			qry_pwd=:mdm_ac_rel_c.qry_pwd,
			draw_pwd=:mdm_ac_rel_c.draw_pwd,
			draw_id_yn=:mdm_ac_rel_c.draw_id_yn,
			id_type=:mdm_ac_rel_c.id_type,
			id_no=:mdm_ac_rel_c.id_no,
			draw_seal_yn=:mdm_ac_rel_c.draw_seal_yn,
			pwd_mach_yn=:mdm_ac_rel_c.pwd_mach_yn,
			book_bal=:mdm_ac_rel_c.book_bal,
			prt_line=:mdm_ac_rel_c.prt_line,
			main_ind=:mdm_ac_rel_c.main_ind,
			mac=:mdm_ac_rel_c.mac
	WHERE rowid=:mdm_ac_rel_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE mdm_ac_rel error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Mdm_ac_rel_Del_Upd(struct mdm_ac_rel_c mdm_ac_rel_c , char * reply  ){

	EXEC SQL DELETE FROM mdm_ac_rel WHERE rowid=:mdm_ac_rel_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE mdm_ac_rel error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mdm_ac_rel_Clo_Upd( ){
	EXEC SQL CLOSE upd_mdm_ac_rel;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Mdm_ac_rel_Ins( struct mdm_ac_rel_c mdm_ac_rel_c , char * reply ){
	int ret;

	memset( str, 0x0,sizeof(str) );
	memset( mystery, 0x0, sizeof(mystery) );
	ret = mdm_ac_rel_con ( mdm_ac_rel_c, str );
	ret = put_mystery( str, mystery );
	strcpy(  mdm_ac_rel_c.mac, mystery ); 
	EXEC SQL INSERT INTO mdm_ac_rel VALUES (:mdm_ac_rel_c.opn_br_no,
			:mdm_ac_rel_c.ac_no,
			:mdm_ac_rel_c.ac_id,
			:mdm_ac_rel_c.ac_seqn,
			:mdm_ac_rel_c.mdm_code,
			:mdm_ac_rel_c.note_no,
			:mdm_ac_rel_c.note_sts,
			:mdm_ac_rel_c.coll_sts,
			:mdm_ac_rel_c.beg_date,
			:mdm_ac_rel_c.end_date,
			:mdm_ac_rel_c.draw_uncon_yn,
			:mdm_ac_rel_c.draw_pwd_chg,
			:mdm_ac_rel_c.draw_pwd_yn,
			:mdm_ac_rel_c.qry_pwd,
			:mdm_ac_rel_c.draw_pwd,
			:mdm_ac_rel_c.draw_id_yn,
			:mdm_ac_rel_c.id_type,
			:mdm_ac_rel_c.id_no,
			:mdm_ac_rel_c.draw_seal_yn,
			:mdm_ac_rel_c.pwd_mach_yn,
			:mdm_ac_rel_c.book_bal,
			:mdm_ac_rel_c.prt_line,
			:mdm_ac_rel_c.main_ind,
			:mdm_ac_rel_c.mac);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT mdm_ac_rel error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT mdm_ac_rel error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
/*****************************************************************************/
/****                              查询函数部分[1]                       ****/
/*****************************************************************************/
int Mdm_ac_rel_Sel1(reply,mdm_ac_rel_c,fmtstr,va_alist)
char    *reply;
struct  mdm_ac_rel_c *mdm_ac_rel_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Mdm_ac_rel_Dec_Sel1( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Mdm_ac_rel_Fet_Sel1( mdm_ac_rel_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Mdm_ac_rel_Clo_Sel1();

	return 0;
}



char *key_strcat(char *,char *);
int Mdm_ac_rel_Dec_Sel1 ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,mdm_ac_rel.* FROM mdm_ac_rel WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mdm_ac_rel_sel1 FROM :comm;
	EXEC SQL DECLARE sel_mdm_ac_rel1 CURSOR FOR mdm_ac_rel_sel1;

	EXEC SQL OPEN sel_mdm_ac_rel1;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN mdm_ac_rel error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mdm_ac_rel_Fet_Sel1 ( struct mdm_ac_rel_c *mdm_ac_rel_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_mdm_ac_rel1 INTO :mdm_ac_rel_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch mdm_ac_rel error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch mdm_ac_rel finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(mdm_ac_rel_c);

	return 0;
}

int Mdm_ac_rel_Clo_Sel1 (){
	EXEC SQL CLOSE sel_mdm_ac_rel1;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Mdm_ac_rel_Dec_Upd1( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,mdm_ac_rel.* FROM mdm_ac_rel WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mdm_ac_rel_upd1 FROM :comm;

	EXEC SQL DECLARE upd_mdm_ac_rel1 CURSOR FOR mdm_ac_rel_upd1;

	EXEC SQL OPEN upd_mdm_ac_rel1;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open mdm_ac_rel error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mdm_ac_rel_Fet_Upd1( struct mdm_ac_rel_c *mdm_ac_rel_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_mdm_ac_rel1 INTO :mdm_ac_rel_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd mdm_ac_rel error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH mdm_ac_rel finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(mdm_ac_rel_c);

	return 0;
}

int Mdm_ac_rel_Upd_Upd1( struct mdm_ac_rel_c mdm_ac_rel_c , char * reply){
	int ret;

	memset( str, 0x0,sizeof(str) );
	memset( mystery, 0x0, sizeof(mystery) );
	ret = mdm_ac_rel_con ( mdm_ac_rel_c, str );
	ret = put_mystery( str, mystery );
	strcpy(  mdm_ac_rel_c.mac, mystery ); 
	EXEC SQL UPDATE mdm_ac_rel SET opn_br_no=:mdm_ac_rel_c.opn_br_no,
			ac_no=:mdm_ac_rel_c.ac_no,
			ac_id=:mdm_ac_rel_c.ac_id,
			ac_seqn=:mdm_ac_rel_c.ac_seqn,
			mdm_code=:mdm_ac_rel_c.mdm_code,
			note_no=:mdm_ac_rel_c.note_no,
			note_sts=:mdm_ac_rel_c.note_sts,
			coll_sts=:mdm_ac_rel_c.coll_sts,
			beg_date=:mdm_ac_rel_c.beg_date,
			end_date=:mdm_ac_rel_c.end_date,
			draw_uncon_yn=:mdm_ac_rel_c.draw_uncon_yn,
			draw_pwd_chg=:mdm_ac_rel_c.draw_pwd_chg,
			draw_pwd_yn=:mdm_ac_rel_c.draw_pwd_yn,
			qry_pwd=:mdm_ac_rel_c.qry_pwd,
			draw_pwd=:mdm_ac_rel_c.draw_pwd,
			draw_id_yn=:mdm_ac_rel_c.draw_id_yn,
			id_type=:mdm_ac_rel_c.id_type,
			id_no=:mdm_ac_rel_c.id_no,
			draw_seal_yn=:mdm_ac_rel_c.draw_seal_yn,
			pwd_mach_yn=:mdm_ac_rel_c.pwd_mach_yn,
			book_bal=:mdm_ac_rel_c.book_bal,
			prt_line=:mdm_ac_rel_c.prt_line,
			main_ind=:mdm_ac_rel_c.main_ind,
			mac=:mdm_ac_rel_c.mac
	WHERE rowid=:mdm_ac_rel_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE mdm_ac_rel error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Mdm_ac_rel_Clo_Upd1( ){
	EXEC SQL CLOSE upd_mdm_ac_rel1;
	return 0;
}

