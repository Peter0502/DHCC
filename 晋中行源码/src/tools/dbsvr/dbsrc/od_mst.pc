#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"od_mst_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)
static char str[3000];
static char mystery[17];

int od_mst_con ( struct od_mst_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct od_mst_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->opn_br_no);
	zip_tail(ps->prdt_no);
	zip_tail(ps->ac_sts);
	zip_tail(ps->mac);
}
int Od_mst_Debug(struct od_mst_c *ps){
	vtcp_log("od_mst_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("od_mst_c.ac_id=[%ld]\n",ps->ac_id);
	vtcp_log("od_mst_c.ac_seqn=[%ld]\n",ps->ac_seqn);
	vtcp_log("od_mst_c.opn_br_no=[%s]\n",ps->opn_br_no);
	vtcp_log("od_mst_c.prdt_no=[%s]\n",ps->prdt_no);
	vtcp_log("od_mst_c.bal=[%f]\n",ps->bal);
	vtcp_log("od_mst_c.drt_bal=[%f]\n",ps->drt_bal);
	vtcp_log("od_mst_c.cur_bal=[%f]\n",ps->cur_bal);
	vtcp_log("od_mst_c.intst_amt=[%f]\n",ps->intst_amt);
	vtcp_log("od_mst_c.intst_bal=[%f]\n",ps->intst_bal);
	vtcp_log("od_mst_c.drt_intst_bal=[%f]\n",ps->drt_intst_bal);
	vtcp_log("od_mst_c.cash_bal=[%f]\n",ps->cash_bal);
	vtcp_log("od_mst_c.ys_bal=[%f]\n",ps->ys_bal);
	vtcp_log("od_mst_c.hst_bal=[%f]\n",ps->hst_bal);
	vtcp_log("od_mst_c.intst_acm=[%f]\n",ps->intst_acm);
	vtcp_log("od_mst_c.drt_intst_acm=[%f]\n",ps->drt_intst_acm);
	vtcp_log("od_mst_c.max_bal=[%f]\n",ps->max_bal);
	vtcp_log("od_mst_c.cash_max_bal=[%f]\n",ps->cash_max_bal);
	vtcp_log("od_mst_c.min_pay_amt=[%f]\n",ps->min_pay_amt);
	vtcp_log("od_mst_c.min_pay_ratio=[%f]\n",ps->min_pay_ratio);
	vtcp_log("od_mst_c.lst_date=[%ld]\n",ps->lst_date);
	vtcp_log("od_mst_c.hst_cnt=[%ld]\n",ps->hst_cnt);
	vtcp_log("od_mst_c.hst_pg=[%ld]\n",ps->hst_pg);
	vtcp_log("od_mst_c.ac_sts=[%s]\n",ps->ac_sts);
	vtcp_log("od_mst_c.pay_ac_id=[%ld]\n",ps->pay_ac_id);
	vtcp_log("od_mst_c.pay_ac_seqn=[%ld]\n",ps->pay_ac_seqn);
	vtcp_log("od_mst_c.mac=[%s]\n",ps->mac);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Od_mst_Sel(reply,od_mst_c,fmtstr,va_alist)
char    *reply;
struct  od_mst_c *od_mst_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Od_mst_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Od_mst_Fet_Sel( od_mst_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Od_mst_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Od_mst_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,od_mst.* FROM od_mst WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE od_mst_sel FROM :comm;
	EXEC SQL DECLARE sel_od_mst CURSOR FOR od_mst_sel;

	EXEC SQL OPEN sel_od_mst;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN od_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Od_mst_Fet_Sel ( struct od_mst_c *od_mst_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_od_mst INTO :od_mst_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch od_mst error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch od_mst finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(od_mst_c);

	memset( str, 0x0,sizeof(str) );
	memset( mystery, 0x0, sizeof(mystery) );
	ret = od_mst_con ( *od_mst_c, str );
	ret = put_mystery( str, mystery );
	if (strcmp(mystery,od_mst_c->mac )!=0){
		sprintf(acErrMsg,"od_mst密押错!! " );
		WRITEMSG
		strcpy (reply,"A035");
		return 1;
	}
	return 0;
}

int Od_mst_Clo_Sel (){
	EXEC SQL CLOSE sel_od_mst;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Od_mst_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,od_mst.* FROM od_mst WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE od_mst_upd FROM :comm;

	EXEC SQL DECLARE upd_od_mst CURSOR FOR od_mst_upd;

	EXEC SQL OPEN upd_od_mst;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open od_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Od_mst_Fet_Upd( struct od_mst_c *od_mst_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_od_mst INTO :od_mst_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd od_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH od_mst finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(od_mst_c);
	memset( str, 0x0,sizeof(str) );
	memset( mystery, 0x0, sizeof(mystery) );
	ret = od_mst_con ( *od_mst_c, str );
	ret = put_mystery( str, mystery );
	if(strcmp(mystery, od_mst_c->mac )!=0){
		sprintf(acErrMsg,"透支密押错!!! " );
		WRITEMSG
		strcpy (reply,"A035");
		return 1;
	}

	return 0;
}

int Od_mst_Upd_Upd( struct od_mst_c od_mst_c , char * reply){
	int ret;

	memset( str, 0x0,sizeof(str) );
	memset( mystery, 0x0, sizeof(mystery) );
	ret = od_mst_con ( od_mst_c, str );
	ret = put_mystery( str, mystery );
	strcpy(  od_mst_c.mac, mystery ); 
	EXEC SQL UPDATE od_mst SET ac_id=:od_mst_c.ac_id,
			ac_seqn=:od_mst_c.ac_seqn,
			opn_br_no=:od_mst_c.opn_br_no,
			prdt_no=:od_mst_c.prdt_no,
			bal=:od_mst_c.bal,
			drt_bal=:od_mst_c.drt_bal,
			cur_bal=:od_mst_c.cur_bal,
			intst_amt=:od_mst_c.intst_amt,
			intst_bal=:od_mst_c.intst_bal,
			drt_intst_bal=:od_mst_c.drt_intst_bal,
			cash_bal=:od_mst_c.cash_bal,
			ys_bal=:od_mst_c.ys_bal,
			hst_bal=:od_mst_c.hst_bal,
			intst_acm=:od_mst_c.intst_acm,
			drt_intst_acm=:od_mst_c.drt_intst_acm,
			max_bal=:od_mst_c.max_bal,
			cash_max_bal=:od_mst_c.cash_max_bal,
			min_pay_amt=:od_mst_c.min_pay_amt,
			min_pay_ratio=:od_mst_c.min_pay_ratio,
			lst_date=:od_mst_c.lst_date,
			hst_cnt=:od_mst_c.hst_cnt,
			hst_pg=:od_mst_c.hst_pg,
			ac_sts=:od_mst_c.ac_sts,
			pay_ac_id=:od_mst_c.pay_ac_id,
			pay_ac_seqn=:od_mst_c.pay_ac_seqn,
			mac=:od_mst_c.mac
	WHERE rowid=:od_mst_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE od_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Od_mst_Del_Upd(struct od_mst_c od_mst_c , char * reply  ){

	EXEC SQL DELETE FROM od_mst WHERE rowid=:od_mst_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE od_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Od_mst_Clo_Upd( ){
	EXEC SQL CLOSE upd_od_mst;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Od_mst_Ins( struct od_mst_c od_mst_c , char * reply ){
	int ret;

	memset( str, 0x0,sizeof(str) );
	memset( mystery, 0x0, sizeof(mystery) );
	ret = od_mst_con ( od_mst_c, str );
	ret = put_mystery( str, mystery );
	strcpy(  od_mst_c.mac, mystery ); 
	EXEC SQL INSERT INTO od_mst VALUES (:od_mst_c.ac_id,
			:od_mst_c.ac_seqn,
			:od_mst_c.opn_br_no,
			:od_mst_c.prdt_no,
			:od_mst_c.bal,
			:od_mst_c.drt_bal,
			:od_mst_c.cur_bal,
			:od_mst_c.intst_amt,
			:od_mst_c.intst_bal,
			:od_mst_c.drt_intst_bal,
			:od_mst_c.cash_bal,
			:od_mst_c.ys_bal,
			:od_mst_c.hst_bal,
			:od_mst_c.intst_acm,
			:od_mst_c.drt_intst_acm,
			:od_mst_c.max_bal,
			:od_mst_c.cash_max_bal,
			:od_mst_c.min_pay_amt,
			:od_mst_c.min_pay_ratio,
			:od_mst_c.lst_date,
			:od_mst_c.hst_cnt,
			:od_mst_c.hst_pg,
			:od_mst_c.ac_sts,
			:od_mst_c.pay_ac_id,
			:od_mst_c.pay_ac_seqn,
			:od_mst_c.mac);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT od_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT od_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
/*****************************************************************************/
/****                              查询函数部分[1]                       ****/
/*****************************************************************************/
int Od_mst_Sel1(reply,od_mst_c,fmtstr,va_alist)
char    *reply;
struct  od_mst_c *od_mst_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Od_mst_Dec_Sel1( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Od_mst_Fet_Sel1( od_mst_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Od_mst_Clo_Sel1();

	return 0;
}



char *key_strcat(char *,char *);
int Od_mst_Dec_Sel1 ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,od_mst.* FROM od_mst WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE od_mst_sel1 FROM :comm;
	EXEC SQL DECLARE sel_od_mst1 CURSOR FOR od_mst_sel1;

	EXEC SQL OPEN sel_od_mst1;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN od_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Od_mst_Fet_Sel1 ( struct od_mst_c *od_mst_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_od_mst1 INTO :od_mst_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch od_mst error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch od_mst finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(od_mst_c);

	memset( str, 0x0,sizeof(str) );
	memset( mystery, 0x0, sizeof(mystery) );
	ret = od_mst_con ( *od_mst_c, str );
	ret = put_mystery( str, mystery );
	if (strcmp(mystery,od_mst_c->mac )!=0){
		sprintf(acErrMsg,"od_mst密押错!! " );
		WRITEMSG
		strcpy (reply,"A035");
		return 1;
	}
	return 0;
}

int Od_mst_Clo_Sel1 (){
	EXEC SQL CLOSE sel_od_mst1;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Od_mst_Dec_Upd1( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,od_mst.* FROM od_mst WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE od_mst_upd1 FROM :comm;

	EXEC SQL DECLARE upd_od_mst1 CURSOR FOR od_mst_upd1;

	EXEC SQL OPEN upd_od_mst1;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open od_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Od_mst_Fet_Upd1( struct od_mst_c *od_mst_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_od_mst1 INTO :od_mst_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd od_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH od_mst finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(od_mst_c);
	memset( str, 0x0,sizeof(str) );
	memset( mystery, 0x0, sizeof(mystery) );
	ret = od_mst_con ( *od_mst_c, str );
	ret = put_mystery( str, mystery );
	if(strcmp(mystery, od_mst_c->mac )!=0){
		sprintf(acErrMsg,"透支密押错!!! " );
		WRITEMSG
		strcpy (reply,"A035");
		return 1;
	}

	return 0;
}

int Od_mst_Clo_Upd1( ){
	EXEC SQL CLOSE upd_od_mst1;
	return 0;
}

/*****************************************************************************/
/****                              查询函数部分[2]                       ****/
/*****************************************************************************/
int Od_mst_Sel2(reply,od_mst_c,fmtstr,va_alist)
char    *reply;
struct  od_mst_c *od_mst_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Od_mst_Dec_Sel2( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Od_mst_Fet_Sel2( od_mst_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Od_mst_Clo_Sel2();

	return 0;
}



char *key_strcat(char *,char *);
int Od_mst_Dec_Sel2 ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,od_mst.* FROM od_mst WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE od_mst_sel2 FROM :comm;
	EXEC SQL DECLARE sel_od_mst2 CURSOR FOR od_mst_sel2;

	EXEC SQL OPEN sel_od_mst2;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN od_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Od_mst_Fet_Sel2 ( struct od_mst_c *od_mst_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_od_mst2 INTO :od_mst_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch od_mst error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch od_mst finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(od_mst_c);

	memset( str, 0x0,sizeof(str) );
	memset( mystery, 0x0, sizeof(mystery) );
	ret = od_mst_con ( *od_mst_c, str );
	ret = put_mystery( str, mystery );
	if (strcmp(mystery,od_mst_c->mac )!=0){
		sprintf(acErrMsg,"od_mst密押错!! " );
		WRITEMSG
		strcpy (reply,"A035");
		return 1;
	}
	return 0;
}

int Od_mst_Clo_Sel2 (){
	EXEC SQL CLOSE sel_od_mst2;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Od_mst_Dec_Upd2( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,od_mst.* FROM od_mst WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE od_mst_upd2 FROM :comm;

	EXEC SQL DECLARE upd_od_mst2 CURSOR FOR od_mst_upd2;

	EXEC SQL OPEN upd_od_mst2;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open od_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Od_mst_Fet_Upd2( struct od_mst_c *od_mst_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_od_mst2 INTO :od_mst_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd od_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH od_mst finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(od_mst_c);
	memset( str, 0x0,sizeof(str) );
	memset( mystery, 0x0, sizeof(mystery) );
	ret = od_mst_con ( *od_mst_c, str );
	ret = put_mystery( str, mystery );
	if(strcmp(mystery, od_mst_c->mac )!=0){
		sprintf(acErrMsg,"透支密押错!!! " );
		WRITEMSG
		strcpy (reply,"A035");
		return 1;
	}

	return 0;
}

int Od_mst_Clo_Upd2( ){
	EXEC SQL CLOSE upd_od_mst2;
	return 0;
}

