#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"mo_prdt_prot_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int mo_prdt_prot_con ( struct mo_prdt_prot_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct mo_prdt_prot_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->tx_br_no);
	zip_tail(ps->prot_type);
	zip_tail(ps->tel);
	zip_tail(ps->sts);
}
int Mo_prdt_prot_Debug(struct mo_prdt_prot_c *ps){
	vtcp_log("mo_prdt_prot_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("mo_prdt_prot_c.tx_br_no=[%s]\n",ps->tx_br_no);
	vtcp_log("mo_prdt_prot_c.prot_type=[%s]\n",ps->prot_type);
	vtcp_log("mo_prdt_prot_c.main_ac_id=[%ld]\n",ps->main_ac_id);
	vtcp_log("mo_prdt_prot_c.main_ac_seqn=[%ld]\n",ps->main_ac_seqn);
	vtcp_log("mo_prdt_prot_c.leave_amt=[%f]\n",ps->leave_amt);
	vtcp_log("mo_prdt_prot_c.turn_amt=[%f]\n",ps->turn_amt);
	vtcp_log("mo_prdt_prot_c.m3=[%ld]\n",ps->m3);
	vtcp_log("mo_prdt_prot_c.m6=[%ld]\n",ps->m6);
	vtcp_log("mo_prdt_prot_c.y1=[%ld]\n",ps->y1);
	vtcp_log("mo_prdt_prot_c.y2=[%ld]\n",ps->y2);
	vtcp_log("mo_prdt_prot_c.tx_date=[%ld]\n",ps->tx_date);
	vtcp_log("mo_prdt_prot_c.trace_no=[%ld]\n",ps->trace_no);
	vtcp_log("mo_prdt_prot_c.tel=[%s]\n",ps->tel);
	vtcp_log("mo_prdt_prot_c.sts=[%s]\n",ps->sts);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Mo_prdt_prot_Sel(reply,mo_prdt_prot_c,fmtstr,va_alist)
char    *reply;
struct  mo_prdt_prot_c *mo_prdt_prot_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Mo_prdt_prot_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Mo_prdt_prot_Fet_Sel( mo_prdt_prot_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Mo_prdt_prot_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Mo_prdt_prot_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,mo_prdt_prot.* FROM mo_prdt_prot WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mo_prdt_prot_sel FROM :comm;
	EXEC SQL DECLARE sel_mo_prdt_prot CURSOR FOR mo_prdt_prot_sel;

	EXEC SQL OPEN sel_mo_prdt_prot;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN mo_prdt_prot error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_prdt_prot_Fet_Sel ( struct mo_prdt_prot_c *mo_prdt_prot_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_mo_prdt_prot INTO :mo_prdt_prot_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch mo_prdt_prot error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch mo_prdt_prot finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(mo_prdt_prot_c);

	return 0;
}

int Mo_prdt_prot_Clo_Sel (){
	EXEC SQL CLOSE sel_mo_prdt_prot;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Mo_prdt_prot_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,mo_prdt_prot.* FROM mo_prdt_prot WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mo_prdt_prot_upd FROM :comm;

	EXEC SQL DECLARE upd_mo_prdt_prot CURSOR FOR mo_prdt_prot_upd;

	EXEC SQL OPEN upd_mo_prdt_prot;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open mo_prdt_prot error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_prdt_prot_Fet_Upd( struct mo_prdt_prot_c *mo_prdt_prot_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_mo_prdt_prot INTO :mo_prdt_prot_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd mo_prdt_prot error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH mo_prdt_prot finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(mo_prdt_prot_c);

	return 0;
}

int Mo_prdt_prot_Upd_Upd( struct mo_prdt_prot_c mo_prdt_prot_c , char * reply){
	int ret;

	EXEC SQL UPDATE mo_prdt_prot SET tx_br_no=:mo_prdt_prot_c.tx_br_no,
			prot_type=:mo_prdt_prot_c.prot_type,
			main_ac_id=:mo_prdt_prot_c.main_ac_id,
			main_ac_seqn=:mo_prdt_prot_c.main_ac_seqn,
			leave_amt=:mo_prdt_prot_c.leave_amt,
			turn_amt=:mo_prdt_prot_c.turn_amt,
			m3=:mo_prdt_prot_c.m3,
			m6=:mo_prdt_prot_c.m6,
			y1=:mo_prdt_prot_c.y1,
			y2=:mo_prdt_prot_c.y2,
			tx_date=:mo_prdt_prot_c.tx_date,
			trace_no=:mo_prdt_prot_c.trace_no,
			tel=:mo_prdt_prot_c.tel,
			sts=:mo_prdt_prot_c.sts
	WHERE rowid=:mo_prdt_prot_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE mo_prdt_prot error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Mo_prdt_prot_Del_Upd(struct mo_prdt_prot_c mo_prdt_prot_c , char * reply  ){

	EXEC SQL DELETE FROM mo_prdt_prot WHERE rowid=:mo_prdt_prot_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE mo_prdt_prot error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_prdt_prot_Clo_Upd( ){
	EXEC SQL CLOSE upd_mo_prdt_prot;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Mo_prdt_prot_Ins( struct mo_prdt_prot_c mo_prdt_prot_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO mo_prdt_prot VALUES (:mo_prdt_prot_c.tx_br_no,
			:mo_prdt_prot_c.prot_type,
			:mo_prdt_prot_c.main_ac_id,
			:mo_prdt_prot_c.main_ac_seqn,
			:mo_prdt_prot_c.leave_amt,
			:mo_prdt_prot_c.turn_amt,
			:mo_prdt_prot_c.m3,
			:mo_prdt_prot_c.m6,
			:mo_prdt_prot_c.y1,
			:mo_prdt_prot_c.y2,
			:mo_prdt_prot_c.tx_date,
			:mo_prdt_prot_c.trace_no,
			:mo_prdt_prot_c.tel,
			:mo_prdt_prot_c.sts);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT mo_prdt_prot error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT mo_prdt_prot error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
/*****************************************************************************/
/****                              查询函数部分[1]                       ****/
/*****************************************************************************/
int Mo_prdt_prot_Sel1(reply,mo_prdt_prot_c,fmtstr,va_alist)
char    *reply;
struct  mo_prdt_prot_c *mo_prdt_prot_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Mo_prdt_prot_Dec_Sel1( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Mo_prdt_prot_Fet_Sel1( mo_prdt_prot_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Mo_prdt_prot_Clo_Sel1();

	return 0;
}



char *key_strcat(char *,char *);
int Mo_prdt_prot_Dec_Sel1 ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,mo_prdt_prot.* FROM mo_prdt_prot WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mo_prdt_prot_sel1 FROM :comm;
	EXEC SQL DECLARE sel_mo_prdt_prot1 CURSOR FOR mo_prdt_prot_sel1;

	EXEC SQL OPEN sel_mo_prdt_prot1;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN mo_prdt_prot error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_prdt_prot_Fet_Sel1 ( struct mo_prdt_prot_c *mo_prdt_prot_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_mo_prdt_prot1 INTO :mo_prdt_prot_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch mo_prdt_prot error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch mo_prdt_prot finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(mo_prdt_prot_c);

	return 0;
}

int Mo_prdt_prot_Clo_Sel1 (){
	EXEC SQL CLOSE sel_mo_prdt_prot1;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Mo_prdt_prot_Dec_Upd1( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,mo_prdt_prot.* FROM mo_prdt_prot WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mo_prdt_prot_upd1 FROM :comm;

	EXEC SQL DECLARE upd_mo_prdt_prot1 CURSOR FOR mo_prdt_prot_upd1;

	EXEC SQL OPEN upd_mo_prdt_prot1;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open mo_prdt_prot error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_prdt_prot_Fet_Upd1( struct mo_prdt_prot_c *mo_prdt_prot_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_mo_prdt_prot1 INTO :mo_prdt_prot_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd mo_prdt_prot error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH mo_prdt_prot finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(mo_prdt_prot_c);

	return 0;
}

int Mo_prdt_prot_Clo_Upd1( ){
	EXEC SQL CLOSE upd_mo_prdt_prot1;
	return 0;
}

