#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"up_dd_mst_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int up_dd_mst_con ( struct up_dd_mst_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct up_dd_mst_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->br_no);
	zip_tail(ps->ac_no);
	zip_tail(ps->name);
	zip_tail(ps->ac_sts);
}
int Up_dd_mst_Debug(struct up_dd_mst_c *ps){
	vtcp_log("up_dd_mst_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("up_dd_mst_c.br_no=[%s]\n",ps->br_no);
	vtcp_log("up_dd_mst_c.ac_no=[%s]\n",ps->ac_no);
	vtcp_log("up_dd_mst_c.bal=[%f]\n",ps->bal);
	vtcp_log("up_dd_mst_c.ys_bal=[%f]\n",ps->ys_bal);
	vtcp_log("up_dd_mst_c.intst_acm=[%f]\n",ps->intst_acm);
	vtcp_log("up_dd_mst_c.opn_date=[%ld]\n",ps->opn_date);
	vtcp_log("up_dd_mst_c.ic_date=[%ld]\n",ps->ic_date);
	vtcp_log("up_dd_mst_c.lst_date=[%ld]\n",ps->lst_date);
	vtcp_log("up_dd_mst_c.hst_cnt=[%ld]\n",ps->hst_cnt);
	vtcp_log("up_dd_mst_c.hst_pg=[%ld]\n",ps->hst_pg);
	vtcp_log("up_dd_mst_c.name=[%s]\n",ps->name);
	vtcp_log("up_dd_mst_c.ac_sts=[%s]\n",ps->ac_sts);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Up_dd_mst_Sel(reply,up_dd_mst_c,fmtstr,va_alist)
char    *reply;
struct  up_dd_mst_c *up_dd_mst_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Up_dd_mst_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Up_dd_mst_Fet_Sel( up_dd_mst_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Up_dd_mst_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Up_dd_mst_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,up_dd_mst.* FROM up_dd_mst WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE up_dd_mst_sel FROM :comm;
	EXEC SQL DECLARE sel_up_dd_mst CURSOR FOR up_dd_mst_sel;

	EXEC SQL OPEN sel_up_dd_mst;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN up_dd_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Up_dd_mst_Fet_Sel ( struct up_dd_mst_c *up_dd_mst_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_up_dd_mst INTO :up_dd_mst_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch up_dd_mst error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch up_dd_mst finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(up_dd_mst_c);

	return 0;
}

int Up_dd_mst_Clo_Sel (){
	EXEC SQL CLOSE sel_up_dd_mst;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Up_dd_mst_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,up_dd_mst.* FROM up_dd_mst WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE up_dd_mst_upd FROM :comm;

	EXEC SQL DECLARE upd_up_dd_mst CURSOR FOR up_dd_mst_upd;

	EXEC SQL OPEN upd_up_dd_mst;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open up_dd_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Up_dd_mst_Fet_Upd( struct up_dd_mst_c *up_dd_mst_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_up_dd_mst INTO :up_dd_mst_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd up_dd_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH up_dd_mst finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(up_dd_mst_c);

	return 0;
}

int Up_dd_mst_Upd_Upd( struct up_dd_mst_c up_dd_mst_c , char * reply){
	int ret;

	EXEC SQL UPDATE up_dd_mst SET br_no=:up_dd_mst_c.br_no,
			ac_no=:up_dd_mst_c.ac_no,
			bal=:up_dd_mst_c.bal,
			ys_bal=:up_dd_mst_c.ys_bal,
			intst_acm=:up_dd_mst_c.intst_acm,
			opn_date=:up_dd_mst_c.opn_date,
			ic_date=:up_dd_mst_c.ic_date,
			lst_date=:up_dd_mst_c.lst_date,
			hst_cnt=:up_dd_mst_c.hst_cnt,
			hst_pg=:up_dd_mst_c.hst_pg,
			name=:up_dd_mst_c.name,
			ac_sts=:up_dd_mst_c.ac_sts
	WHERE rowid=:up_dd_mst_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE up_dd_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Up_dd_mst_Del_Upd(struct up_dd_mst_c up_dd_mst_c , char * reply  ){

	EXEC SQL DELETE FROM up_dd_mst WHERE rowid=:up_dd_mst_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE up_dd_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Up_dd_mst_Clo_Upd( ){
	EXEC SQL CLOSE upd_up_dd_mst;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Up_dd_mst_Ins( struct up_dd_mst_c up_dd_mst_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO up_dd_mst VALUES (:up_dd_mst_c.br_no,
			:up_dd_mst_c.ac_no,
			:up_dd_mst_c.bal,
			:up_dd_mst_c.ys_bal,
			:up_dd_mst_c.intst_acm,
			:up_dd_mst_c.opn_date,
			:up_dd_mst_c.ic_date,
			:up_dd_mst_c.lst_date,
			:up_dd_mst_c.hst_cnt,
			:up_dd_mst_c.hst_pg,
			:up_dd_mst_c.name,
			:up_dd_mst_c.ac_sts);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT up_dd_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT up_dd_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
