#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"kh_reg_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int kh_reg_con ( struct kh_reg_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct kh_reg_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->br_no);
	zip_tail(ps->out_ac_no);
	zip_tail(ps->out_prdt_no);
	zip_tail(ps->out_ac_id_type);
	zip_tail(ps->intst_ac_no);
	zip_tail(ps->in_ac_no);
	zip_tail(ps->tel);
	zip_tail(ps->auth_tel);
	zip_tail(ps->brf);
	zip_tail(ps->low_bo);
	zip_tail(ps->zf_name1);
	zip_tail(ps->pub_no1);
	zip_tail(ps->zf_name2);
	zip_tail(ps->pub_no2);
	zip_tail(ps->fl_print);
	zip_tail(ps->flag_intst);
	zip_tail(ps->tel_intst);
	zip_tail(ps->id_type_intst);
	zip_tail(ps->id_no_intst);
	zip_tail(ps->name_intst);
}
int Kh_reg_Debug(struct kh_reg_c *ps){
	vtcp_log("kh_reg_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("kh_reg_c.br_no=[%s]\n",ps->br_no);
	vtcp_log("kh_reg_c.out_ac_no=[%s]\n",ps->out_ac_no);
	vtcp_log("kh_reg_c.out_ac_id=[%ld]\n",ps->out_ac_id);
	vtcp_log("kh_reg_c.out_ac_seqn=[%ld]\n",ps->out_ac_seqn);
	vtcp_log("kh_reg_c.tx_date=[%ld]\n",ps->tx_date);
	vtcp_log("kh_reg_c.nat_date=[%ld]\n",ps->nat_date);
	vtcp_log("kh_reg_c.out_prdt_no=[%s]\n",ps->out_prdt_no);
	vtcp_log("kh_reg_c.out_ac_id_type=[%s]\n",ps->out_ac_id_type);
	vtcp_log("kh_reg_c.kh_amt=[%f]\n",ps->kh_amt);
	vtcp_log("kh_reg_c.intst=[%f]\n",ps->intst);
	vtcp_log("kh_reg_c.intst_ac_no=[%s]\n",ps->intst_ac_no);
	vtcp_log("kh_reg_c.intst_ac_seqn=[%ld]\n",ps->intst_ac_seqn);
	vtcp_log("kh_reg_c.in_ac_no=[%s]\n",ps->in_ac_no);
	vtcp_log("kh_reg_c.in_ac_id=[%ld]\n",ps->in_ac_id);
	vtcp_log("kh_reg_c.in_ac_seqn=[%ld]\n",ps->in_ac_seqn);
	vtcp_log("kh_reg_c.tel=[%s]\n",ps->tel);
	vtcp_log("kh_reg_c.auth_tel=[%s]\n",ps->auth_tel);
	vtcp_log("kh_reg_c.auth_code=[%f]\n",ps->auth_code);
	vtcp_log("kh_reg_c.trace_no=[%ld]\n",ps->trace_no);
	vtcp_log("kh_reg_c.tx_time=[%ld]\n",ps->tx_time);
	vtcp_log("kh_reg_c.brf=[%s]\n",ps->brf);
	vtcp_log("kh_reg_c.tt_no=[%ld]\n",ps->tt_no);
	vtcp_log("kh_reg_c.low_bo=[%s]\n",ps->low_bo);
	vtcp_log("kh_reg_c.zf_name1=[%s]\n",ps->zf_name1);
	vtcp_log("kh_reg_c.pub_no1=[%s]\n",ps->pub_no1);
	vtcp_log("kh_reg_c.zf_name2=[%s]\n",ps->zf_name2);
	vtcp_log("kh_reg_c.pub_no2=[%s]\n",ps->pub_no2);
	vtcp_log("kh_reg_c.fl_print=[%s]\n",ps->fl_print);
	vtcp_log("kh_reg_c.flag_intst=[%s]\n",ps->flag_intst);
	vtcp_log("kh_reg_c.tel_intst=[%s]\n",ps->tel_intst);
	vtcp_log("kh_reg_c.trace_no_intst=[%ld]\n",ps->trace_no_intst);
	vtcp_log("kh_reg_c.tx_date_intst=[%ld]\n",ps->tx_date_intst);
	vtcp_log("kh_reg_c.id_type_intst=[%s]\n",ps->id_type_intst);
	vtcp_log("kh_reg_c.id_no_intst=[%s]\n",ps->id_no_intst);
	vtcp_log("kh_reg_c.name_intst=[%s]\n",ps->name_intst);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Kh_reg_Sel(reply,kh_reg_c,fmtstr,va_alist)
char    *reply;
struct  kh_reg_c *kh_reg_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Kh_reg_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Kh_reg_Fet_Sel( kh_reg_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Kh_reg_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Kh_reg_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,kh_reg.* FROM kh_reg WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE kh_reg_sel FROM :comm;
	EXEC SQL DECLARE sel_kh_reg CURSOR FOR kh_reg_sel;

	EXEC SQL OPEN sel_kh_reg;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN kh_reg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Kh_reg_Fet_Sel ( struct kh_reg_c *kh_reg_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_kh_reg INTO :kh_reg_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch kh_reg error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch kh_reg finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(kh_reg_c);

	return 0;
}

int Kh_reg_Clo_Sel (){
	EXEC SQL CLOSE sel_kh_reg;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Kh_reg_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,kh_reg.* FROM kh_reg WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE kh_reg_upd FROM :comm;

	EXEC SQL DECLARE upd_kh_reg CURSOR FOR kh_reg_upd;

	EXEC SQL OPEN upd_kh_reg;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open kh_reg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Kh_reg_Fet_Upd( struct kh_reg_c *kh_reg_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_kh_reg INTO :kh_reg_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd kh_reg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH kh_reg finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(kh_reg_c);

	return 0;
}

int Kh_reg_Upd_Upd( struct kh_reg_c kh_reg_c , char * reply){
	int ret;

	EXEC SQL UPDATE kh_reg SET br_no=:kh_reg_c.br_no,
			out_ac_no=:kh_reg_c.out_ac_no,
			out_ac_id=:kh_reg_c.out_ac_id,
			out_ac_seqn=:kh_reg_c.out_ac_seqn,
			tx_date=:kh_reg_c.tx_date,
			nat_date=:kh_reg_c.nat_date,
			out_prdt_no=:kh_reg_c.out_prdt_no,
			out_ac_id_type=:kh_reg_c.out_ac_id_type,
			kh_amt=:kh_reg_c.kh_amt,
			intst=:kh_reg_c.intst,
			intst_ac_no=:kh_reg_c.intst_ac_no,
			intst_ac_seqn=:kh_reg_c.intst_ac_seqn,
			in_ac_no=:kh_reg_c.in_ac_no,
			in_ac_id=:kh_reg_c.in_ac_id,
			in_ac_seqn=:kh_reg_c.in_ac_seqn,
			tel=:kh_reg_c.tel,
			auth_tel=:kh_reg_c.auth_tel,
			auth_code=:kh_reg_c.auth_code,
			trace_no=:kh_reg_c.trace_no,
			tx_time=:kh_reg_c.tx_time,
			brf=:kh_reg_c.brf,
			tt_no=:kh_reg_c.tt_no,
			low_bo=:kh_reg_c.low_bo,
			zf_name1=:kh_reg_c.zf_name1,
			pub_no1=:kh_reg_c.pub_no1,
			zf_name2=:kh_reg_c.zf_name2,
			pub_no2=:kh_reg_c.pub_no2,
			fl_print=:kh_reg_c.fl_print,
			flag_intst=:kh_reg_c.flag_intst,
			tel_intst=:kh_reg_c.tel_intst,
			trace_no_intst=:kh_reg_c.trace_no_intst,
			tx_date_intst=:kh_reg_c.tx_date_intst,
			id_type_intst=:kh_reg_c.id_type_intst,
			id_no_intst=:kh_reg_c.id_no_intst,
			name_intst=:kh_reg_c.name_intst
	WHERE rowid=:kh_reg_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE kh_reg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Kh_reg_Del_Upd(struct kh_reg_c kh_reg_c , char * reply  ){

	EXEC SQL DELETE FROM kh_reg WHERE rowid=:kh_reg_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE kh_reg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Kh_reg_Clo_Upd( ){
	EXEC SQL CLOSE upd_kh_reg;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Kh_reg_Ins( struct kh_reg_c kh_reg_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO kh_reg VALUES (:kh_reg_c.br_no,
			:kh_reg_c.out_ac_no,
			:kh_reg_c.out_ac_id,
			:kh_reg_c.out_ac_seqn,
			:kh_reg_c.tx_date,
			:kh_reg_c.nat_date,
			:kh_reg_c.out_prdt_no,
			:kh_reg_c.out_ac_id_type,
			:kh_reg_c.kh_amt,
			:kh_reg_c.intst,
			:kh_reg_c.intst_ac_no,
			:kh_reg_c.intst_ac_seqn,
			:kh_reg_c.in_ac_no,
			:kh_reg_c.in_ac_id,
			:kh_reg_c.in_ac_seqn,
			:kh_reg_c.tel,
			:kh_reg_c.auth_tel,
			:kh_reg_c.auth_code,
			:kh_reg_c.trace_no,
			:kh_reg_c.tx_time,
			:kh_reg_c.brf,
			:kh_reg_c.tt_no,
			:kh_reg_c.low_bo,
			:kh_reg_c.zf_name1,
			:kh_reg_c.pub_no1,
			:kh_reg_c.zf_name2,
			:kh_reg_c.pub_no2,
			:kh_reg_c.fl_print,
			:kh_reg_c.flag_intst,
			:kh_reg_c.tel_intst,
			:kh_reg_c.trace_no_intst,
			:kh_reg_c.tx_date_intst,
			:kh_reg_c.id_type_intst,
			:kh_reg_c.id_no_intst,
			:kh_reg_c.name_intst);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT kh_reg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT kh_reg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
