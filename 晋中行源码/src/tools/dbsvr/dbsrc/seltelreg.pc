#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"seltelreg_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int seltelreg_con ( struct seltelreg_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct seltelreg_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->qbrname);
	zip_tail(ps->qdate);
	zip_tail(ps->qmode);
	zip_tail(ps->qvocnum);
	zip_tail(ps->rdate);
	zip_tail(ps->rmode);
	zip_tail(ps->rtxt);
	zip_tail(ps->cxnr);
	zip_tail(ps->memo3);
	zip_tail(ps->memo4);
}
int Seltelreg_Debug(struct seltelreg_c *ps){
	vtcp_log("seltelreg_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("seltelreg_c.qbrname=[%s]\n",ps->qbrname);
	vtcp_log("seltelreg_c.qdate=[%s]\n",ps->qdate);
	vtcp_log("seltelreg_c.qmode=[%s]\n",ps->qmode);
	vtcp_log("seltelreg_c.qvocnum=[%s]\n",ps->qvocnum);
	vtcp_log("seltelreg_c.telamt=[%f]\n",ps->telamt);
	vtcp_log("seltelreg_c.rdate=[%s]\n",ps->rdate);
	vtcp_log("seltelreg_c.rmode=[%s]\n",ps->rmode);
	vtcp_log("seltelreg_c.rtxt=[%s]\n",ps->rtxt);
	vtcp_log("seltelreg_c.cxnr=[%s]\n",ps->cxnr);
	vtcp_log("seltelreg_c.tx_date=[%ld]\n",ps->tx_date);
	vtcp_log("seltelreg_c.memo3=[%s]\n",ps->memo3);
	vtcp_log("seltelreg_c.memo4=[%s]\n",ps->memo4);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Seltelreg_Sel(reply,seltelreg_c,fmtstr,va_alist)
char    *reply;
struct  seltelreg_c *seltelreg_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Seltelreg_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Seltelreg_Fet_Sel( seltelreg_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Seltelreg_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Seltelreg_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,seltelreg.* FROM seltelreg WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE seltelreg_sel FROM :comm;
	EXEC SQL DECLARE sel_seltelreg CURSOR FOR seltelreg_sel;

	EXEC SQL OPEN sel_seltelreg;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN seltelreg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Seltelreg_Fet_Sel ( struct seltelreg_c *seltelreg_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_seltelreg INTO :seltelreg_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch seltelreg error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch seltelreg finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(seltelreg_c);

	return 0;
}

int Seltelreg_Clo_Sel (){
	EXEC SQL CLOSE sel_seltelreg;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Seltelreg_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,seltelreg.* FROM seltelreg WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE seltelreg_upd FROM :comm;

	EXEC SQL DECLARE upd_seltelreg CURSOR FOR seltelreg_upd;

	EXEC SQL OPEN upd_seltelreg;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open seltelreg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Seltelreg_Fet_Upd( struct seltelreg_c *seltelreg_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_seltelreg INTO :seltelreg_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd seltelreg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH seltelreg finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(seltelreg_c);

	return 0;
}

int Seltelreg_Upd_Upd( struct seltelreg_c seltelreg_c , char * reply){
	int ret;

	EXEC SQL UPDATE seltelreg SET qbrname=:seltelreg_c.qbrname,
			qdate=:seltelreg_c.qdate,
			qmode=:seltelreg_c.qmode,
			qvocnum=:seltelreg_c.qvocnum,
			telamt=:seltelreg_c.telamt,
			rdate=:seltelreg_c.rdate,
			rmode=:seltelreg_c.rmode,
			rtxt=:seltelreg_c.rtxt,
			cxnr=:seltelreg_c.cxnr,
			tx_date=:seltelreg_c.tx_date,
			memo3=:seltelreg_c.memo3,
			memo4=:seltelreg_c.memo4
	WHERE rowid=:seltelreg_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE seltelreg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Seltelreg_Del_Upd(struct seltelreg_c seltelreg_c , char * reply  ){

	EXEC SQL DELETE FROM seltelreg WHERE rowid=:seltelreg_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE seltelreg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Seltelreg_Clo_Upd( ){
	EXEC SQL CLOSE upd_seltelreg;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Seltelreg_Ins( struct seltelreg_c seltelreg_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO seltelreg VALUES (:seltelreg_c.qbrname,
			:seltelreg_c.qdate,
			:seltelreg_c.qmode,
			:seltelreg_c.qvocnum,
			:seltelreg_c.telamt,
			:seltelreg_c.rdate,
			:seltelreg_c.rmode,
			:seltelreg_c.rtxt,
			:seltelreg_c.cxnr,
			:seltelreg_c.tx_date,
			:seltelreg_c.memo3,
			:seltelreg_c.memo4);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT seltelreg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT seltelreg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
