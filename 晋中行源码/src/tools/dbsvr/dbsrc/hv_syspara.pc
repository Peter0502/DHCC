#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"hv_syspara_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int hv_syspara_con ( struct hv_syspara_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct hv_syspara_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->sdate);
	zip_tail(ps->updtype);
	zip_tail(ps->timedc);
	zip_tail(ps->tdcname);
	zip_tail(ps->updtdc);
	zip_tail(ps->updmethod);
	zip_tail(ps->datatype);
}
int Hv_syspara_Debug(struct hv_syspara_c *ps){
	vtcp_log("hv_syspara_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("hv_syspara_c.sdate=[%s]\n",ps->sdate);
	vtcp_log("hv_syspara_c.updtype=[%s]\n",ps->updtype);
	vtcp_log("hv_syspara_c.startamt=[%f]\n",ps->startamt);
	vtcp_log("hv_syspara_c.timedc=[%s]\n",ps->timedc);
	vtcp_log("hv_syspara_c.tdcname=[%s]\n",ps->tdcname);
	vtcp_log("hv_syspara_c.updtdc=[%s]\n",ps->updtdc);
	vtcp_log("hv_syspara_c.updmethod=[%s]\n",ps->updmethod);
	vtcp_log("hv_syspara_c.datatype=[%s]\n",ps->datatype);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Hv_syspara_Sel(reply,hv_syspara_c,fmtstr,va_alist)
char    *reply;
struct  hv_syspara_c *hv_syspara_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Hv_syspara_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Hv_syspara_Fet_Sel( hv_syspara_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Hv_syspara_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Hv_syspara_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,hv_syspara.* FROM hv_syspara WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE hv_syspara_sel FROM :comm;
	EXEC SQL DECLARE sel_hv_syspara CURSOR FOR hv_syspara_sel;

	EXEC SQL OPEN sel_hv_syspara;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN hv_syspara error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Hv_syspara_Fet_Sel ( struct hv_syspara_c *hv_syspara_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_hv_syspara INTO :hv_syspara_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch hv_syspara error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch hv_syspara finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(hv_syspara_c);

	return 0;
}

int Hv_syspara_Clo_Sel (){
	EXEC SQL CLOSE sel_hv_syspara;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Hv_syspara_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,hv_syspara.* FROM hv_syspara WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE hv_syspara_upd FROM :comm;

	EXEC SQL DECLARE upd_hv_syspara CURSOR FOR hv_syspara_upd;

	EXEC SQL OPEN upd_hv_syspara;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open hv_syspara error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Hv_syspara_Fet_Upd( struct hv_syspara_c *hv_syspara_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_hv_syspara INTO :hv_syspara_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd hv_syspara error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH hv_syspara finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(hv_syspara_c);

	return 0;
}

int Hv_syspara_Upd_Upd( struct hv_syspara_c hv_syspara_c , char * reply){
	int ret;

	EXEC SQL UPDATE hv_syspara SET sdate=:hv_syspara_c.sdate,
			updtype=:hv_syspara_c.updtype,
			startamt=:hv_syspara_c.startamt,
			timedc=:hv_syspara_c.timedc,
			tdcname=:hv_syspara_c.tdcname,
			updtdc=:hv_syspara_c.updtdc,
			updmethod=:hv_syspara_c.updmethod,
			datatype=:hv_syspara_c.datatype
	WHERE rowid=:hv_syspara_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE hv_syspara error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Hv_syspara_Del_Upd(struct hv_syspara_c hv_syspara_c , char * reply  ){

	EXEC SQL DELETE FROM hv_syspara WHERE rowid=:hv_syspara_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE hv_syspara error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Hv_syspara_Clo_Upd( ){
	EXEC SQL CLOSE upd_hv_syspara;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Hv_syspara_Ins( struct hv_syspara_c hv_syspara_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO hv_syspara VALUES (:hv_syspara_c.sdate,
			:hv_syspara_c.updtype,
			:hv_syspara_c.startamt,
			:hv_syspara_c.timedc,
			:hv_syspara_c.tdcname,
			:hv_syspara_c.updtdc,
			:hv_syspara_c.updmethod,
			:hv_syspara_c.datatype);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT hv_syspara error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT hv_syspara error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
