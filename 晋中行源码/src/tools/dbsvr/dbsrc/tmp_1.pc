#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"tmp_1_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int tmp_1_con ( struct tmp_1_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct tmp_1_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->br_no);
	zip_tail(ps->cur_no);
	zip_tail(ps->acc_hrt);
	zip_tail(ps->dc_ind);
	zip_tail(ps->up_acc_hrt);
}
int Tmp_1_Debug(struct tmp_1_c *ps){
	vtcp_log("tmp_1_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("tmp_1_c.br_no=[%s]\n",ps->br_no);
	vtcp_log("tmp_1_c.cur_no=[%s]\n",ps->cur_no);
	vtcp_log("tmp_1_c.acc_hrt=[%s]\n",ps->acc_hrt);
	vtcp_log("tmp_1_c.date=[%ld]\n",ps->date);
	vtcp_log("tmp_1_c.dc_ind=[%s]\n",ps->dc_ind);
	vtcp_log("tmp_1_c.up_acc_hrt=[%s]\n",ps->up_acc_hrt);
	vtcp_log("tmp_1_c.dr_bal=[%f]\n",ps->dr_bal);
	vtcp_log("tmp_1_c.cr_bal=[%f]\n",ps->cr_bal);
	vtcp_log("tmp_1_c.ldd_bal=[%f]\n",ps->ldd_bal);
	vtcp_log("tmp_1_c.lcd_bal=[%f]\n",ps->lcd_bal);
	vtcp_log("tmp_1_c.rdd_cnt=[%ld]\n",ps->rdd_cnt);
	vtcp_log("tmp_1_c.rcd_cnt=[%ld]\n",ps->rcd_cnt);
	vtcp_log("tmp_1_c.rdd_amt=[%f]\n",ps->rdd_amt);
	vtcp_log("tmp_1_c.rcd_amt=[%f]\n",ps->rcd_amt);
	vtcp_log("tmp_1_c.cdd_cnt=[%ld]\n",ps->cdd_cnt);
	vtcp_log("tmp_1_c.ccd_cnt=[%ld]\n",ps->ccd_cnt);
	vtcp_log("tmp_1_c.cdd_amt=[%f]\n",ps->cdd_amt);
	vtcp_log("tmp_1_c.ccd_amt=[%f]\n",ps->ccd_amt);
	vtcp_log("tmp_1_c.tddr_bal=[%f]\n",ps->tddr_bal);
	vtcp_log("tmp_1_c.tdcr_bal=[%f]\n",ps->tdcr_bal);
	vtcp_log("tmp_1_c.tddr_cnt=[%ld]\n",ps->tddr_cnt);
	vtcp_log("tmp_1_c.tdcr_cnt=[%ld]\n",ps->tdcr_cnt);
	vtcp_log("tmp_1_c.tddr_amt=[%f]\n",ps->tddr_amt);
	vtcp_log("tmp_1_c.tdcr_amt=[%f]\n",ps->tdcr_amt);
	vtcp_log("tmp_1_c.mdr_bal=[%f]\n",ps->mdr_bal);
	vtcp_log("tmp_1_c.mcr_bal=[%f]\n",ps->mcr_bal);
	vtcp_log("tmp_1_c.mdr_cnt=[%ld]\n",ps->mdr_cnt);
	vtcp_log("tmp_1_c.mcr_cnt=[%ld]\n",ps->mcr_cnt);
	vtcp_log("tmp_1_c.mdr_amt=[%f]\n",ps->mdr_amt);
	vtcp_log("tmp_1_c.mcr_amt=[%f]\n",ps->mcr_amt);
	vtcp_log("tmp_1_c.qdr_bal=[%f]\n",ps->qdr_bal);
	vtcp_log("tmp_1_c.qcr_bal=[%f]\n",ps->qcr_bal);
	vtcp_log("tmp_1_c.qdr_cnt=[%ld]\n",ps->qdr_cnt);
	vtcp_log("tmp_1_c.qcr_cnt=[%ld]\n",ps->qcr_cnt);
	vtcp_log("tmp_1_c.qdr_amt=[%f]\n",ps->qdr_amt);
	vtcp_log("tmp_1_c.qcr_amt=[%f]\n",ps->qcr_amt);
	vtcp_log("tmp_1_c.ydr_bal=[%f]\n",ps->ydr_bal);
	vtcp_log("tmp_1_c.ycr_bal=[%f]\n",ps->ycr_bal);
	vtcp_log("tmp_1_c.ydr_cnt=[%ld]\n",ps->ydr_cnt);
	vtcp_log("tmp_1_c.ycr_cnt=[%ld]\n",ps->ycr_cnt);
	vtcp_log("tmp_1_c.ydr_amt=[%f]\n",ps->ydr_amt);
	vtcp_log("tmp_1_c.ycr_amt=[%f]\n",ps->ycr_amt);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Tmp_1_Sel(reply,tmp_1_c,fmtstr,va_alist)
char    *reply;
struct  tmp_1_c *tmp_1_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Tmp_1_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Tmp_1_Fet_Sel( tmp_1_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Tmp_1_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Tmp_1_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,tmp_1.* FROM tmp_1 WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE tmp_1_sel FROM :comm;
	EXEC SQL DECLARE sel_tmp_1 CURSOR FOR tmp_1_sel;

	EXEC SQL OPEN sel_tmp_1;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN tmp_1 error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Tmp_1_Fet_Sel ( struct tmp_1_c *tmp_1_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_tmp_1 INTO :tmp_1_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch tmp_1 error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch tmp_1 finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(tmp_1_c);

	return 0;
}

int Tmp_1_Clo_Sel (){
	EXEC SQL CLOSE sel_tmp_1;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Tmp_1_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,tmp_1.* FROM tmp_1 WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE tmp_1_upd FROM :comm;

	EXEC SQL DECLARE upd_tmp_1 CURSOR FOR tmp_1_upd;

	EXEC SQL OPEN upd_tmp_1;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open tmp_1 error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Tmp_1_Fet_Upd( struct tmp_1_c *tmp_1_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_tmp_1 INTO :tmp_1_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd tmp_1 error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH tmp_1 finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(tmp_1_c);

	return 0;
}

int Tmp_1_Upd_Upd( struct tmp_1_c tmp_1_c , char * reply){
	int ret;

	EXEC SQL UPDATE tmp_1 SET br_no=:tmp_1_c.br_no,
			cur_no=:tmp_1_c.cur_no,
			acc_hrt=:tmp_1_c.acc_hrt,
			"date"=:tmp_1_c.date,
			dc_ind=:tmp_1_c.dc_ind,
			up_acc_hrt=:tmp_1_c.up_acc_hrt,
			dr_bal=:tmp_1_c.dr_bal,
			cr_bal=:tmp_1_c.cr_bal,
			ldd_bal=:tmp_1_c.ldd_bal,
			lcd_bal=:tmp_1_c.lcd_bal,
			rdd_cnt=:tmp_1_c.rdd_cnt,
			rcd_cnt=:tmp_1_c.rcd_cnt,
			rdd_amt=:tmp_1_c.rdd_amt,
			rcd_amt=:tmp_1_c.rcd_amt,
			cdd_cnt=:tmp_1_c.cdd_cnt,
			ccd_cnt=:tmp_1_c.ccd_cnt,
			cdd_amt=:tmp_1_c.cdd_amt,
			ccd_amt=:tmp_1_c.ccd_amt,
			tddr_bal=:tmp_1_c.tddr_bal,
			tdcr_bal=:tmp_1_c.tdcr_bal,
			tddr_cnt=:tmp_1_c.tddr_cnt,
			tdcr_cnt=:tmp_1_c.tdcr_cnt,
			tddr_amt=:tmp_1_c.tddr_amt,
			tdcr_amt=:tmp_1_c.tdcr_amt,
			mdr_bal=:tmp_1_c.mdr_bal,
			mcr_bal=:tmp_1_c.mcr_bal,
			mdr_cnt=:tmp_1_c.mdr_cnt,
			mcr_cnt=:tmp_1_c.mcr_cnt,
			mdr_amt=:tmp_1_c.mdr_amt,
			mcr_amt=:tmp_1_c.mcr_amt,
			qdr_bal=:tmp_1_c.qdr_bal,
			qcr_bal=:tmp_1_c.qcr_bal,
			qdr_cnt=:tmp_1_c.qdr_cnt,
			qcr_cnt=:tmp_1_c.qcr_cnt,
			qdr_amt=:tmp_1_c.qdr_amt,
			qcr_amt=:tmp_1_c.qcr_amt,
			ydr_bal=:tmp_1_c.ydr_bal,
			ycr_bal=:tmp_1_c.ycr_bal,
			ydr_cnt=:tmp_1_c.ydr_cnt,
			ycr_cnt=:tmp_1_c.ycr_cnt,
			ydr_amt=:tmp_1_c.ydr_amt,
			ycr_amt=:tmp_1_c.ycr_amt
	WHERE rowid=:tmp_1_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE tmp_1 error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Tmp_1_Del_Upd(struct tmp_1_c tmp_1_c , char * reply  ){

	EXEC SQL DELETE FROM tmp_1 WHERE rowid=:tmp_1_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE tmp_1 error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Tmp_1_Clo_Upd( ){
	EXEC SQL CLOSE upd_tmp_1;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Tmp_1_Ins( struct tmp_1_c tmp_1_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO tmp_1 VALUES (:tmp_1_c.br_no,
			:tmp_1_c.cur_no,
			:tmp_1_c.acc_hrt,
			:tmp_1_c.date,
			:tmp_1_c.dc_ind,
			:tmp_1_c.up_acc_hrt,
			:tmp_1_c.dr_bal,
			:tmp_1_c.cr_bal,
			:tmp_1_c.ldd_bal,
			:tmp_1_c.lcd_bal,
			:tmp_1_c.rdd_cnt,
			:tmp_1_c.rcd_cnt,
			:tmp_1_c.rdd_amt,
			:tmp_1_c.rcd_amt,
			:tmp_1_c.cdd_cnt,
			:tmp_1_c.ccd_cnt,
			:tmp_1_c.cdd_amt,
			:tmp_1_c.ccd_amt,
			:tmp_1_c.tddr_bal,
			:tmp_1_c.tdcr_bal,
			:tmp_1_c.tddr_cnt,
			:tmp_1_c.tdcr_cnt,
			:tmp_1_c.tddr_amt,
			:tmp_1_c.tdcr_amt,
			:tmp_1_c.mdr_bal,
			:tmp_1_c.mcr_bal,
			:tmp_1_c.mdr_cnt,
			:tmp_1_c.mcr_cnt,
			:tmp_1_c.mdr_amt,
			:tmp_1_c.mcr_amt,
			:tmp_1_c.qdr_bal,
			:tmp_1_c.qcr_bal,
			:tmp_1_c.qdr_cnt,
			:tmp_1_c.qcr_cnt,
			:tmp_1_c.qdr_amt,
			:tmp_1_c.qcr_amt,
			:tmp_1_c.ydr_bal,
			:tmp_1_c.ycr_bal,
			:tmp_1_c.ydr_cnt,
			:tmp_1_c.ycr_cnt,
			:tmp_1_c.ydr_amt,
			:tmp_1_c.ycr_amt);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT tmp_1 error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT tmp_1 error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
