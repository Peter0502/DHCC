#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"ass_subs_intst_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int ass_subs_intst_con ( struct ass_subs_intst_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct ass_subs_intst_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->brno);
	zip_tail(ps->deal_ind);
	zip_tail(ps->dc_ind);
}
int Ass_subs_intst_Debug(struct ass_subs_intst_c *ps){
	vtcp_log("ass_subs_intst_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("ass_subs_intst_c.brno=[%s]\n",ps->brno);
	vtcp_log("ass_subs_intst_c.date=[%ld]\n",ps->date);
	vtcp_log("ass_subs_intst_c.beg_date=[%ld]\n",ps->beg_date);
	vtcp_log("ass_subs_intst_c.end_date=[%ld]\n",ps->end_date);
	vtcp_log("ass_subs_intst_c.acm=[%f]\n",ps->acm);
	vtcp_log("ass_subs_intst_c.rate=[%f]\n",ps->rate);
	vtcp_log("ass_subs_intst_c.deal_ind=[%s]\n",ps->deal_ind);
	vtcp_log("ass_subs_intst_c.dc_ind=[%s]\n",ps->dc_ind);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Ass_subs_intst_Sel(reply,ass_subs_intst_c,fmtstr,va_alist)
char    *reply;
struct  ass_subs_intst_c *ass_subs_intst_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Ass_subs_intst_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Ass_subs_intst_Fet_Sel( ass_subs_intst_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Ass_subs_intst_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Ass_subs_intst_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,ass_subs_intst.* FROM ass_subs_intst WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE ass_subs_intst_sel FROM :comm;
	EXEC SQL DECLARE sel_ass_subs_intst CURSOR FOR ass_subs_intst_sel;

	EXEC SQL OPEN sel_ass_subs_intst;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN ass_subs_intst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Ass_subs_intst_Fet_Sel ( struct ass_subs_intst_c *ass_subs_intst_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_ass_subs_intst INTO :ass_subs_intst_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch ass_subs_intst error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch ass_subs_intst finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(ass_subs_intst_c);

	return 0;
}

int Ass_subs_intst_Clo_Sel (){
	EXEC SQL CLOSE sel_ass_subs_intst;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Ass_subs_intst_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,ass_subs_intst.* FROM ass_subs_intst WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE ass_subs_intst_upd FROM :comm;

	EXEC SQL DECLARE upd_ass_subs_intst CURSOR FOR ass_subs_intst_upd;

	EXEC SQL OPEN upd_ass_subs_intst;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open ass_subs_intst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Ass_subs_intst_Fet_Upd( struct ass_subs_intst_c *ass_subs_intst_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_ass_subs_intst INTO :ass_subs_intst_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd ass_subs_intst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH ass_subs_intst finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(ass_subs_intst_c);

	return 0;
}

int Ass_subs_intst_Upd_Upd( struct ass_subs_intst_c ass_subs_intst_c , char * reply){
	int ret;

	EXEC SQL UPDATE ass_subs_intst SET brno=:ass_subs_intst_c.brno,
			"date"=:ass_subs_intst_c.date,
			beg_date=:ass_subs_intst_c.beg_date,
			end_date=:ass_subs_intst_c.end_date,
			acm=:ass_subs_intst_c.acm,
			rate=:ass_subs_intst_c.rate,
			deal_ind=:ass_subs_intst_c.deal_ind,
			dc_ind=:ass_subs_intst_c.dc_ind
	WHERE rowid=:ass_subs_intst_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE ass_subs_intst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Ass_subs_intst_Del_Upd(struct ass_subs_intst_c ass_subs_intst_c , char * reply  ){

	EXEC SQL DELETE FROM ass_subs_intst WHERE rowid=:ass_subs_intst_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE ass_subs_intst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Ass_subs_intst_Clo_Upd( ){
	EXEC SQL CLOSE upd_ass_subs_intst;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Ass_subs_intst_Ins( struct ass_subs_intst_c ass_subs_intst_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO ass_subs_intst VALUES (:ass_subs_intst_c.brno,
			:ass_subs_intst_c.date,
			:ass_subs_intst_c.beg_date,
			:ass_subs_intst_c.end_date,
			:ass_subs_intst_c.acm,
			:ass_subs_intst_c.rate,
			:ass_subs_intst_c.deal_ind,
			:ass_subs_intst_c.dc_ind);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT ass_subs_intst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT ass_subs_intst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
