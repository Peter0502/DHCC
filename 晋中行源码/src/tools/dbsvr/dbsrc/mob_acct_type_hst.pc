#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"mob_acct_type_hst_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int mob_acct_type_hst_con ( struct mob_acct_type_hst_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct mob_acct_type_hst_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->ac_no);
	zip_tail(ps->ac_type);
	zip_tail(ps->server_type);
	zip_tail(ps->mobile);
	zip_tail(ps->lst_tel);
	zip_tail(ps->sfbz);
	zip_tail(ps->mob_sts);
	zip_tail(ps->phones);
	zip_tail(ps->lst_br_no);
	zip_tail(ps->filler);
	zip_tail(ps->tx_code);
	zip_tail(ps->opr_sts);
	zip_tail(ps->br_no);
	zip_tail(ps->tx_tel);
	zip_tail(ps->new_ac_no);
	zip_tail(ps->new_mobile);
	zip_tail(ps->auth_tel);
	zip_tail(ps->filler1);
	zip_tail(ps->filler2);
	zip_tail(ps->filler3);
	zip_tail(ps->filler4);
	zip_tail(ps->filler5);
	zip_tail(ps->filler6);
	zip_tail(ps->memo);
	zip_tail(ps->sts);
}
int Mob_acct_type_hst_Debug(struct mob_acct_type_hst_c *ps){
	vtcp_log("mob_acct_type_hst_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("mob_acct_type_hst_c.ac_no=[%s]\n",ps->ac_no);
	vtcp_log("mob_acct_type_hst_c.ac_id=[%ld]\n",ps->ac_id);
	vtcp_log("mob_acct_type_hst_c.ac_seqn=[%ld]\n",ps->ac_seqn);
	vtcp_log("mob_acct_type_hst_c.ac_type=[%s]\n",ps->ac_type);
	vtcp_log("mob_acct_type_hst_c.server_type=[%s]\n",ps->server_type);
	vtcp_log("mob_acct_type_hst_c.mobile=[%s]\n",ps->mobile);
	vtcp_log("mob_acct_type_hst_c.ori_tx_date=[%ld]\n",ps->ori_tx_date);
	vtcp_log("mob_acct_type_hst_c.lst_fee_date=[%ld]\n",ps->lst_fee_date);
	vtcp_log("mob_acct_type_hst_c.lst_tel=[%s]\n",ps->lst_tel);
	vtcp_log("mob_acct_type_hst_c.sfbz=[%s]\n",ps->sfbz);
	vtcp_log("mob_acct_type_hst_c.mob_sts=[%s]\n",ps->mob_sts);
	vtcp_log("mob_acct_type_hst_c.phones=[%s]\n",ps->phones);
	vtcp_log("mob_acct_type_hst_c.lst_br_no=[%s]\n",ps->lst_br_no);
	vtcp_log("mob_acct_type_hst_c.filler=[%s]\n",ps->filler);
	vtcp_log("mob_acct_type_hst_c.tx_date=[%ld]\n",ps->tx_date);
	vtcp_log("mob_acct_type_hst_c.tx_code=[%s]\n",ps->tx_code);
	vtcp_log("mob_acct_type_hst_c.trace_no=[%ld]\n",ps->trace_no);
	vtcp_log("mob_acct_type_hst_c.opr_sts=[%s]\n",ps->opr_sts);
	vtcp_log("mob_acct_type_hst_c.br_no=[%s]\n",ps->br_no);
	vtcp_log("mob_acct_type_hst_c.tx_tel=[%s]\n",ps->tx_tel);
	vtcp_log("mob_acct_type_hst_c.new_ac_no=[%s]\n",ps->new_ac_no);
	vtcp_log("mob_acct_type_hst_c.new_mobile=[%s]\n",ps->new_mobile);
	vtcp_log("mob_acct_type_hst_c.fee=[%f]\n",ps->fee);
	vtcp_log("mob_acct_type_hst_c.auth_tel=[%s]\n",ps->auth_tel);
	vtcp_log("mob_acct_type_hst_c.filler1=[%s]\n",ps->filler1);
	vtcp_log("mob_acct_type_hst_c.filler2=[%s]\n",ps->filler2);
	vtcp_log("mob_acct_type_hst_c.filler3=[%s]\n",ps->filler3);
	vtcp_log("mob_acct_type_hst_c.filler4=[%s]\n",ps->filler4);
	vtcp_log("mob_acct_type_hst_c.filler5=[%s]\n",ps->filler5);
	vtcp_log("mob_acct_type_hst_c.filler6=[%s]\n",ps->filler6);
	vtcp_log("mob_acct_type_hst_c.memo=[%s]\n",ps->memo);
	vtcp_log("mob_acct_type_hst_c.sts=[%s]\n",ps->sts);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Mob_acct_type_hst_Sel(reply,mob_acct_type_hst_c,fmtstr,va_alist)
char    *reply;
struct  mob_acct_type_hst_c *mob_acct_type_hst_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Mob_acct_type_hst_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Mob_acct_type_hst_Fet_Sel( mob_acct_type_hst_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Mob_acct_type_hst_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Mob_acct_type_hst_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,mob_acct_type_hst.* FROM mob_acct_type_hst WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mob_acct_type_hst_sel FROM :comm;
	EXEC SQL DECLARE sel_mob_acct_type_hst CURSOR FOR mob_acct_type_hst_sel;

	EXEC SQL OPEN sel_mob_acct_type_hst;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN mob_acct_type_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mob_acct_type_hst_Fet_Sel ( struct mob_acct_type_hst_c *mob_acct_type_hst_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_mob_acct_type_hst INTO :mob_acct_type_hst_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch mob_acct_type_hst error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch mob_acct_type_hst finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(mob_acct_type_hst_c);

	return 0;
}

int Mob_acct_type_hst_Clo_Sel (){
	EXEC SQL CLOSE sel_mob_acct_type_hst;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Mob_acct_type_hst_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,mob_acct_type_hst.* FROM mob_acct_type_hst WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mob_acct_type_hst_upd FROM :comm;

	EXEC SQL DECLARE upd_mob_acct_type_hst CURSOR FOR mob_acct_type_hst_upd;

	EXEC SQL OPEN upd_mob_acct_type_hst;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open mob_acct_type_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mob_acct_type_hst_Fet_Upd( struct mob_acct_type_hst_c *mob_acct_type_hst_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_mob_acct_type_hst INTO :mob_acct_type_hst_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd mob_acct_type_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH mob_acct_type_hst finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(mob_acct_type_hst_c);

	return 0;
}

int Mob_acct_type_hst_Upd_Upd( struct mob_acct_type_hst_c mob_acct_type_hst_c , char * reply){
	int ret;

	EXEC SQL UPDATE mob_acct_type_hst SET ac_no=:mob_acct_type_hst_c.ac_no,
			ac_id=:mob_acct_type_hst_c.ac_id,
			ac_seqn=:mob_acct_type_hst_c.ac_seqn,
			ac_type=:mob_acct_type_hst_c.ac_type,
			server_type=:mob_acct_type_hst_c.server_type,
			mobile=:mob_acct_type_hst_c.mobile,
			ori_tx_date=:mob_acct_type_hst_c.ori_tx_date,
			lst_fee_date=:mob_acct_type_hst_c.lst_fee_date,
			lst_tel=:mob_acct_type_hst_c.lst_tel,
			sfbz=:mob_acct_type_hst_c.sfbz,
			mob_sts=:mob_acct_type_hst_c.mob_sts,
			phones=:mob_acct_type_hst_c.phones,
			lst_br_no=:mob_acct_type_hst_c.lst_br_no,
			filler=:mob_acct_type_hst_c.filler,
			tx_date=:mob_acct_type_hst_c.tx_date,
			tx_code=:mob_acct_type_hst_c.tx_code,
			trace_no=:mob_acct_type_hst_c.trace_no,
			opr_sts=:mob_acct_type_hst_c.opr_sts,
			br_no=:mob_acct_type_hst_c.br_no,
			tx_tel=:mob_acct_type_hst_c.tx_tel,
			new_ac_no=:mob_acct_type_hst_c.new_ac_no,
			new_mobile=:mob_acct_type_hst_c.new_mobile,
			fee=:mob_acct_type_hst_c.fee,
			auth_tel=:mob_acct_type_hst_c.auth_tel,
			filler1=:mob_acct_type_hst_c.filler1,
			filler2=:mob_acct_type_hst_c.filler2,
			filler3=:mob_acct_type_hst_c.filler3,
			filler4=:mob_acct_type_hst_c.filler4,
			filler5=:mob_acct_type_hst_c.filler5,
			filler6=:mob_acct_type_hst_c.filler6,
			memo=:mob_acct_type_hst_c.memo,
			sts=:mob_acct_type_hst_c.sts
	WHERE rowid=:mob_acct_type_hst_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE mob_acct_type_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Mob_acct_type_hst_Del_Upd(struct mob_acct_type_hst_c mob_acct_type_hst_c , char * reply  ){

	EXEC SQL DELETE FROM mob_acct_type_hst WHERE rowid=:mob_acct_type_hst_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE mob_acct_type_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mob_acct_type_hst_Clo_Upd( ){
	EXEC SQL CLOSE upd_mob_acct_type_hst;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Mob_acct_type_hst_Ins( struct mob_acct_type_hst_c mob_acct_type_hst_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO mob_acct_type_hst VALUES (:mob_acct_type_hst_c.ac_no,
			:mob_acct_type_hst_c.ac_id,
			:mob_acct_type_hst_c.ac_seqn,
			:mob_acct_type_hst_c.ac_type,
			:mob_acct_type_hst_c.server_type,
			:mob_acct_type_hst_c.mobile,
			:mob_acct_type_hst_c.ori_tx_date,
			:mob_acct_type_hst_c.lst_fee_date,
			:mob_acct_type_hst_c.lst_tel,
			:mob_acct_type_hst_c.sfbz,
			:mob_acct_type_hst_c.mob_sts,
			:mob_acct_type_hst_c.phones,
			:mob_acct_type_hst_c.lst_br_no,
			:mob_acct_type_hst_c.filler,
			:mob_acct_type_hst_c.tx_date,
			:mob_acct_type_hst_c.tx_code,
			:mob_acct_type_hst_c.trace_no,
			:mob_acct_type_hst_c.opr_sts,
			:mob_acct_type_hst_c.br_no,
			:mob_acct_type_hst_c.tx_tel,
			:mob_acct_type_hst_c.new_ac_no,
			:mob_acct_type_hst_c.new_mobile,
			:mob_acct_type_hst_c.fee,
			:mob_acct_type_hst_c.auth_tel,
			:mob_acct_type_hst_c.filler1,
			:mob_acct_type_hst_c.filler2,
			:mob_acct_type_hst_c.filler3,
			:mob_acct_type_hst_c.filler4,
			:mob_acct_type_hst_c.filler5,
			:mob_acct_type_hst_c.filler6,
			:mob_acct_type_hst_c.memo,
			:mob_acct_type_hst_c.sts);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT mob_acct_type_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT mob_acct_type_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
