#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"mo_trust_prot_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int mo_trust_prot_con ( struct mo_trust_prot_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct mo_trust_prot_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->trust_no);
	zip_tail(ps->tx_br_no);
	zip_tail(ps->cur_no);
	zip_tail(ps->name);
	zip_tail(ps->trust_ind);
}
int Mo_trust_prot_Debug(struct mo_trust_prot_c *ps){
	vtcp_log("mo_trust_prot_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("mo_trust_prot_c.trust_no=[%s]\n",ps->trust_no);
	vtcp_log("mo_trust_prot_c.tx_br_no=[%s]\n",ps->tx_br_no);
	vtcp_log("mo_trust_prot_c.cur_no=[%s]\n",ps->cur_no);
	vtcp_log("mo_trust_prot_c.name=[%s]\n",ps->name);
	vtcp_log("mo_trust_prot_c.trust_amt=[%f]\n",ps->trust_amt);
	vtcp_log("mo_trust_prot_c.out_amt=[%f]\n",ps->out_amt);
	vtcp_log("mo_trust_prot_c.afund_ac_id=[%ld]\n",ps->afund_ac_id);
	vtcp_log("mo_trust_prot_c.amt_ac_id=[%ld]\n",ps->amt_ac_id);
	vtcp_log("mo_trust_prot_c.intst_ac_id=[%ld]\n",ps->intst_ac_id);
	vtcp_log("mo_trust_prot_c.ln_ac_id=[%ld]\n",ps->ln_ac_id);
	vtcp_log("mo_trust_prot_c.ln_ac_seqn=[%ld]\n",ps->ln_ac_seqn);
	vtcp_log("mo_trust_prot_c.trust_ind=[%s]\n",ps->trust_ind);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Mo_trust_prot_Sel(reply,mo_trust_prot_c,fmtstr,va_alist)
char    *reply;
struct  mo_trust_prot_c *mo_trust_prot_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Mo_trust_prot_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Mo_trust_prot_Fet_Sel( mo_trust_prot_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Mo_trust_prot_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Mo_trust_prot_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,mo_trust_prot.* FROM mo_trust_prot WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mo_trust_prot_sel FROM :comm;
	EXEC SQL DECLARE sel_mo_trust_prot CURSOR FOR mo_trust_prot_sel;

	EXEC SQL OPEN sel_mo_trust_prot;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN mo_trust_prot error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_trust_prot_Fet_Sel ( struct mo_trust_prot_c *mo_trust_prot_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_mo_trust_prot INTO :mo_trust_prot_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch mo_trust_prot error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch mo_trust_prot finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(mo_trust_prot_c);

	return 0;
}

int Mo_trust_prot_Clo_Sel (){
	EXEC SQL CLOSE sel_mo_trust_prot;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Mo_trust_prot_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,mo_trust_prot.* FROM mo_trust_prot WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mo_trust_prot_upd FROM :comm;

	EXEC SQL DECLARE upd_mo_trust_prot CURSOR FOR mo_trust_prot_upd;

	EXEC SQL OPEN upd_mo_trust_prot;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open mo_trust_prot error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_trust_prot_Fet_Upd( struct mo_trust_prot_c *mo_trust_prot_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_mo_trust_prot INTO :mo_trust_prot_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd mo_trust_prot error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH mo_trust_prot finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(mo_trust_prot_c);

	return 0;
}

int Mo_trust_prot_Upd_Upd( struct mo_trust_prot_c mo_trust_prot_c , char * reply){
	int ret;

	EXEC SQL UPDATE mo_trust_prot SET trust_no=:mo_trust_prot_c.trust_no,
			tx_br_no=:mo_trust_prot_c.tx_br_no,
			cur_no=:mo_trust_prot_c.cur_no,
			name=:mo_trust_prot_c.name,
			trust_amt=:mo_trust_prot_c.trust_amt,
			out_amt=:mo_trust_prot_c.out_amt,
			afund_ac_id=:mo_trust_prot_c.afund_ac_id,
			amt_ac_id=:mo_trust_prot_c.amt_ac_id,
			intst_ac_id=:mo_trust_prot_c.intst_ac_id,
			ln_ac_id=:mo_trust_prot_c.ln_ac_id,
			ln_ac_seqn=:mo_trust_prot_c.ln_ac_seqn,
			trust_ind=:mo_trust_prot_c.trust_ind
	WHERE rowid=:mo_trust_prot_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE mo_trust_prot error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Mo_trust_prot_Del_Upd(struct mo_trust_prot_c mo_trust_prot_c , char * reply  ){

	EXEC SQL DELETE FROM mo_trust_prot WHERE rowid=:mo_trust_prot_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE mo_trust_prot error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_trust_prot_Clo_Upd( ){
	EXEC SQL CLOSE upd_mo_trust_prot;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Mo_trust_prot_Ins( struct mo_trust_prot_c mo_trust_prot_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO mo_trust_prot VALUES (:mo_trust_prot_c.trust_no,
			:mo_trust_prot_c.tx_br_no,
			:mo_trust_prot_c.cur_no,
			:mo_trust_prot_c.name,
			:mo_trust_prot_c.trust_amt,
			:mo_trust_prot_c.out_amt,
			:mo_trust_prot_c.afund_ac_id,
			:mo_trust_prot_c.amt_ac_id,
			:mo_trust_prot_c.intst_ac_id,
			:mo_trust_prot_c.ln_ac_id,
			:mo_trust_prot_c.ln_ac_seqn,
			:mo_trust_prot_c.trust_ind);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT mo_trust_prot error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT mo_trust_prot error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
