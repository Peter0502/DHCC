#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"march_mst_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int march_mst_con ( struct march_mst_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct march_mst_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->area_code);
	zip_tail(ps->march_code);
	zip_tail(ps->ac_no);
	zip_tail(ps->march_name);
	zip_tail(ps->deal_sign);
	zip_tail(ps->deal_msg);
	zip_tail(ps->opn_br_no);
	zip_tail(ps->tt_no);
}
int March_mst_Debug(struct march_mst_c *ps){
	vtcp_log("march_mst_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("march_mst_c.area_code=[%s]\n",ps->area_code);
	vtcp_log("march_mst_c.march_code=[%s]\n",ps->march_code);
	vtcp_log("march_mst_c.ac_no=[%s]\n",ps->ac_no);
	vtcp_log("march_mst_c.march_name=[%s]\n",ps->march_name);
	vtcp_log("march_mst_c.tx_date=[%ld]\n",ps->tx_date);
	vtcp_log("march_mst_c.tx_cnt=[%ld]\n",ps->tx_cnt);
	vtcp_log("march_mst_c.tx_amt=[%f]\n",ps->tx_amt);
	vtcp_log("march_mst_c.fee_amt=[%f]\n",ps->fee_amt);
	vtcp_log("march_mst_c.fee_rate=[%f]\n",ps->fee_rate);
	vtcp_log("march_mst_c.real_amt=[%f]\n",ps->real_amt);
	vtcp_log("march_mst_c.acct_date=[%ld]\n",ps->acct_date);
	vtcp_log("march_mst_c.deal_sign=[%s]\n",ps->deal_sign);
	vtcp_log("march_mst_c.deal_msg=[%s]\n",ps->deal_msg);
	vtcp_log("march_mst_c.opn_br_no=[%s]\n",ps->opn_br_no);
	vtcp_log("march_mst_c.tt_no=[%s]\n",ps->tt_no);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int March_mst_Sel(reply,march_mst_c,fmtstr,va_alist)
char    *reply;
struct  march_mst_c *march_mst_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = March_mst_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = March_mst_Fet_Sel( march_mst_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	March_mst_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int March_mst_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,march_mst.* FROM march_mst WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE march_mst_sel FROM :comm;
	EXEC SQL DECLARE sel_march_mst CURSOR FOR march_mst_sel;

	EXEC SQL OPEN sel_march_mst;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN march_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int March_mst_Fet_Sel ( struct march_mst_c *march_mst_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_march_mst INTO :march_mst_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch march_mst error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch march_mst finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(march_mst_c);

	return 0;
}

int March_mst_Clo_Sel (){
	EXEC SQL CLOSE sel_march_mst;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int March_mst_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,march_mst.* FROM march_mst WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE march_mst_upd FROM :comm;

	EXEC SQL DECLARE upd_march_mst CURSOR FOR march_mst_upd;

	EXEC SQL OPEN upd_march_mst;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open march_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int March_mst_Fet_Upd( struct march_mst_c *march_mst_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_march_mst INTO :march_mst_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd march_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH march_mst finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(march_mst_c);

	return 0;
}

int March_mst_Upd_Upd( struct march_mst_c march_mst_c , char * reply){
	int ret;

	EXEC SQL UPDATE march_mst SET area_code=:march_mst_c.area_code,
			march_code=:march_mst_c.march_code,
			ac_no=:march_mst_c.ac_no,
			march_name=:march_mst_c.march_name,
			tx_date=:march_mst_c.tx_date,
			tx_cnt=:march_mst_c.tx_cnt,
			tx_amt=:march_mst_c.tx_amt,
			fee_amt=:march_mst_c.fee_amt,
			fee_rate=:march_mst_c.fee_rate,
			real_amt=:march_mst_c.real_amt,
			acct_date=:march_mst_c.acct_date,
			deal_sign=:march_mst_c.deal_sign,
			deal_msg=:march_mst_c.deal_msg,
			opn_br_no=:march_mst_c.opn_br_no,
			tt_no=:march_mst_c.tt_no
	WHERE rowid=:march_mst_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE march_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int March_mst_Del_Upd(struct march_mst_c march_mst_c , char * reply  ){

	EXEC SQL DELETE FROM march_mst WHERE rowid=:march_mst_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE march_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int March_mst_Clo_Upd( ){
	EXEC SQL CLOSE upd_march_mst;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int March_mst_Ins( struct march_mst_c march_mst_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO march_mst VALUES (:march_mst_c.area_code,
			:march_mst_c.march_code,
			:march_mst_c.ac_no,
			:march_mst_c.march_name,
			:march_mst_c.tx_date,
			:march_mst_c.tx_cnt,
			:march_mst_c.tx_amt,
			:march_mst_c.fee_amt,
			:march_mst_c.fee_rate,
			:march_mst_c.real_amt,
			:march_mst_c.acct_date,
			:march_mst_c.deal_sign,
			:march_mst_c.deal_msg,
			:march_mst_c.opn_br_no,
			:march_mst_c.tt_no);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT march_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT march_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
