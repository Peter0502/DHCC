#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"ass_gl_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int ass_gl_con ( struct ass_gl_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct ass_gl_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->br_no);
	zip_tail(ps->ass_code);
	zip_tail(ps->sts);
}
int Ass_gl_Debug(struct ass_gl_c *ps){
	vtcp_log("ass_gl_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("ass_gl_c.br_no=[%s]\n",ps->br_no);
	vtcp_log("ass_gl_c.ass_code=[%s]\n",ps->ass_code);
	vtcp_log("ass_gl_c.in_bal=[%f]\n",ps->in_bal);
	vtcp_log("ass_gl_c.out_bal=[%f]\n",ps->out_bal);
	vtcp_log("ass_gl_c.in_intst_bal=[%f]\n",ps->in_intst_bal);
	vtcp_log("ass_gl_c.out_intst_bal=[%f]\n",ps->out_intst_bal);
	vtcp_log("ass_gl_c.sts=[%s]\n",ps->sts);
	vtcp_log("ass_gl_c.ldd_bal=[%f]\n",ps->ldd_bal);
	vtcp_log("ass_gl_c.lcd_bal=[%f]\n",ps->lcd_bal);
	vtcp_log("ass_gl_c.rdd_amt=[%f]\n",ps->rdd_amt);
	vtcp_log("ass_gl_c.rcd_amt=[%f]\n",ps->rcd_amt);
	vtcp_log("ass_gl_c.tddr_bal=[%f]\n",ps->tddr_bal);
	vtcp_log("ass_gl_c.tdcr_bal=[%f]\n",ps->tdcr_bal);
	vtcp_log("ass_gl_c.tddr_amt=[%f]\n",ps->tddr_amt);
	vtcp_log("ass_gl_c.tdcr_amt=[%f]\n",ps->tdcr_amt);
	vtcp_log("ass_gl_c.mdr_bal=[%f]\n",ps->mdr_bal);
	vtcp_log("ass_gl_c.mcr_bal=[%f]\n",ps->mcr_bal);
	vtcp_log("ass_gl_c.mdr_amt=[%f]\n",ps->mdr_amt);
	vtcp_log("ass_gl_c.mcr_amt=[%f]\n",ps->mcr_amt);
	vtcp_log("ass_gl_c.qdr_bal=[%f]\n",ps->qdr_bal);
	vtcp_log("ass_gl_c.qcr_bal=[%f]\n",ps->qcr_bal);
	vtcp_log("ass_gl_c.qdr_amt=[%f]\n",ps->qdr_amt);
	vtcp_log("ass_gl_c.qcr_amt=[%f]\n",ps->qcr_amt);
	vtcp_log("ass_gl_c.ydr_bal=[%f]\n",ps->ydr_bal);
	vtcp_log("ass_gl_c.ycr_bal=[%f]\n",ps->ycr_bal);
	vtcp_log("ass_gl_c.ydr_amt=[%f]\n",ps->ydr_amt);
	vtcp_log("ass_gl_c.ycr_amt=[%f]\n",ps->ycr_amt);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Ass_gl_Sel(reply,ass_gl_c,fmtstr,va_alist)
char    *reply;
struct  ass_gl_c *ass_gl_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Ass_gl_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Ass_gl_Fet_Sel( ass_gl_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Ass_gl_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Ass_gl_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,ass_gl.* FROM ass_gl WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE ass_gl_sel FROM :comm;
	EXEC SQL DECLARE sel_ass_gl CURSOR FOR ass_gl_sel;

	EXEC SQL OPEN sel_ass_gl;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN ass_gl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Ass_gl_Fet_Sel ( struct ass_gl_c *ass_gl_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_ass_gl INTO :ass_gl_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch ass_gl error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch ass_gl finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(ass_gl_c);

	return 0;
}

int Ass_gl_Clo_Sel (){
	EXEC SQL CLOSE sel_ass_gl;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Ass_gl_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,ass_gl.* FROM ass_gl WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE ass_gl_upd FROM :comm;

	EXEC SQL DECLARE upd_ass_gl CURSOR FOR ass_gl_upd;

	EXEC SQL OPEN upd_ass_gl;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open ass_gl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Ass_gl_Fet_Upd( struct ass_gl_c *ass_gl_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_ass_gl INTO :ass_gl_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd ass_gl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH ass_gl finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(ass_gl_c);

	return 0;
}

int Ass_gl_Upd_Upd( struct ass_gl_c ass_gl_c , char * reply){
	int ret;

	EXEC SQL UPDATE ass_gl SET br_no=:ass_gl_c.br_no,
			ass_code=:ass_gl_c.ass_code,
			in_bal=:ass_gl_c.in_bal,
			out_bal=:ass_gl_c.out_bal,
			in_intst_bal=:ass_gl_c.in_intst_bal,
			out_intst_bal=:ass_gl_c.out_intst_bal,
			sts=:ass_gl_c.sts,
			ldd_bal=:ass_gl_c.ldd_bal,
			lcd_bal=:ass_gl_c.lcd_bal,
			rdd_amt=:ass_gl_c.rdd_amt,
			rcd_amt=:ass_gl_c.rcd_amt,
			tddr_bal=:ass_gl_c.tddr_bal,
			tdcr_bal=:ass_gl_c.tdcr_bal,
			tddr_amt=:ass_gl_c.tddr_amt,
			tdcr_amt=:ass_gl_c.tdcr_amt,
			mdr_bal=:ass_gl_c.mdr_bal,
			mcr_bal=:ass_gl_c.mcr_bal,
			mdr_amt=:ass_gl_c.mdr_amt,
			mcr_amt=:ass_gl_c.mcr_amt,
			qdr_bal=:ass_gl_c.qdr_bal,
			qcr_bal=:ass_gl_c.qcr_bal,
			qdr_amt=:ass_gl_c.qdr_amt,
			qcr_amt=:ass_gl_c.qcr_amt,
			ydr_bal=:ass_gl_c.ydr_bal,
			ycr_bal=:ass_gl_c.ycr_bal,
			ydr_amt=:ass_gl_c.ydr_amt,
			ycr_amt=:ass_gl_c.ycr_amt
	WHERE rowid=:ass_gl_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE ass_gl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Ass_gl_Del_Upd(struct ass_gl_c ass_gl_c , char * reply  ){

	EXEC SQL DELETE FROM ass_gl WHERE rowid=:ass_gl_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE ass_gl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Ass_gl_Clo_Upd( ){
	EXEC SQL CLOSE upd_ass_gl;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Ass_gl_Ins( struct ass_gl_c ass_gl_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO ass_gl VALUES (:ass_gl_c.br_no,
			:ass_gl_c.ass_code,
			:ass_gl_c.in_bal,
			:ass_gl_c.out_bal,
			:ass_gl_c.in_intst_bal,
			:ass_gl_c.out_intst_bal,
			:ass_gl_c.sts,
			:ass_gl_c.ldd_bal,
			:ass_gl_c.lcd_bal,
			:ass_gl_c.rdd_amt,
			:ass_gl_c.rcd_amt,
			:ass_gl_c.tddr_bal,
			:ass_gl_c.tdcr_bal,
			:ass_gl_c.tddr_amt,
			:ass_gl_c.tdcr_amt,
			:ass_gl_c.mdr_bal,
			:ass_gl_c.mcr_bal,
			:ass_gl_c.mdr_amt,
			:ass_gl_c.mcr_amt,
			:ass_gl_c.qdr_bal,
			:ass_gl_c.qcr_bal,
			:ass_gl_c.qdr_amt,
			:ass_gl_c.qcr_amt,
			:ass_gl_c.ydr_bal,
			:ass_gl_c.ycr_bal,
			:ass_gl_c.ydr_amt,
			:ass_gl_c.ycr_amt);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT ass_gl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT ass_gl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
