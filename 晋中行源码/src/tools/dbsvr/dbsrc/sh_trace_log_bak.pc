#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"sh_trace_log_bak_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int sh_trace_log_bak_con ( struct sh_trace_log_bak_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct sh_trace_log_bak_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->tx_br_no);
	zip_tail(ps->opn_br_no);
	zip_tail(ps->tx_code);
	zip_tail(ps->sub_tx_code);
	zip_tail(ps->cur_no);
	zip_tail(ps->prdt_no);
	zip_tail(ps->ac_no);
	zip_tail(ps->note_type);
	zip_tail(ps->note_no);
	zip_tail(ps->add_ind);
	zip_tail(ps->ct_ind);
	zip_tail(ps->brf);
	zip_tail(ps->tel);
	zip_tail(ps->chk);
	zip_tail(ps->aut);
	zip_tail(ps->hst_ind);
	zip_tail(ps->saving_notarize);
	zip_tail(ps->no_show);
	zip_tail(ps->sts);
}
int Sh_trace_log_bak_Debug(struct sh_trace_log_bak_c *ps){
	vtcp_log("sh_trace_log_bak_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("sh_trace_log_bak_c.trace_no=[%ld]\n",ps->trace_no);
	vtcp_log("sh_trace_log_bak_c.trace_cnt=[%ld]\n",ps->trace_cnt);
	vtcp_log("sh_trace_log_bak_c.tx_date=[%ld]\n",ps->tx_date);
	vtcp_log("sh_trace_log_bak_c.tx_time=[%ld]\n",ps->tx_time);
	vtcp_log("sh_trace_log_bak_c.tx_br_no=[%s]\n",ps->tx_br_no);
	vtcp_log("sh_trace_log_bak_c.opn_br_no=[%s]\n",ps->opn_br_no);
	vtcp_log("sh_trace_log_bak_c.tx_code=[%s]\n",ps->tx_code);
	vtcp_log("sh_trace_log_bak_c.sub_tx_code=[%s]\n",ps->sub_tx_code);
	vtcp_log("sh_trace_log_bak_c.svc_ind=[%ld]\n",ps->svc_ind);
	vtcp_log("sh_trace_log_bak_c.cur_no=[%s]\n",ps->cur_no);
	vtcp_log("sh_trace_log_bak_c.prdt_no=[%s]\n",ps->prdt_no);
	vtcp_log("sh_trace_log_bak_c.ac_no=[%s]\n",ps->ac_no);
	vtcp_log("sh_trace_log_bak_c.ac_seqn=[%ld]\n",ps->ac_seqn);
	vtcp_log("sh_trace_log_bak_c.ac_id=[%ld]\n",ps->ac_id);
	vtcp_log("sh_trace_log_bak_c.note_type=[%s]\n",ps->note_type);
	vtcp_log("sh_trace_log_bak_c.note_no=[%s]\n",ps->note_no);
	vtcp_log("sh_trace_log_bak_c.add_ind=[%s]\n",ps->add_ind);
	vtcp_log("sh_trace_log_bak_c.amt=[%f]\n",ps->amt);
	vtcp_log("sh_trace_log_bak_c.ct_ind=[%s]\n",ps->ct_ind);
	vtcp_log("sh_trace_log_bak_c.brf=[%s]\n",ps->brf);
	vtcp_log("sh_trace_log_bak_c.tel=[%s]\n",ps->tel);
	vtcp_log("sh_trace_log_bak_c.chk=[%s]\n",ps->chk);
	vtcp_log("sh_trace_log_bak_c.aut=[%s]\n",ps->aut);
	vtcp_log("sh_trace_log_bak_c.hst_ind=[%s]\n",ps->hst_ind);
	vtcp_log("sh_trace_log_bak_c.saving_notarize=[%s]\n",ps->saving_notarize);
	vtcp_log("sh_trace_log_bak_c.no_show=[%s]\n",ps->no_show);
	vtcp_log("sh_trace_log_bak_c.sts=[%s]\n",ps->sts);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Sh_trace_log_bak_Sel(reply,sh_trace_log_bak_c,fmtstr,va_alist)
char    *reply;
struct  sh_trace_log_bak_c *sh_trace_log_bak_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Sh_trace_log_bak_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Sh_trace_log_bak_Fet_Sel( sh_trace_log_bak_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Sh_trace_log_bak_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Sh_trace_log_bak_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,sh_trace_log_bak.* FROM sh_trace_log_bak WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE sh_trace_log_bak_sel FROM :comm;
	EXEC SQL DECLARE sel_sh_trace_log_bak CURSOR FOR sh_trace_log_bak_sel;

	EXEC SQL OPEN sel_sh_trace_log_bak;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN sh_trace_log_bak error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Sh_trace_log_bak_Fet_Sel ( struct sh_trace_log_bak_c *sh_trace_log_bak_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_sh_trace_log_bak INTO :sh_trace_log_bak_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch sh_trace_log_bak error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch sh_trace_log_bak finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(sh_trace_log_bak_c);

	return 0;
}

int Sh_trace_log_bak_Clo_Sel (){
	EXEC SQL CLOSE sel_sh_trace_log_bak;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Sh_trace_log_bak_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,sh_trace_log_bak.* FROM sh_trace_log_bak WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE sh_trace_log_bak_upd FROM :comm;

	EXEC SQL DECLARE upd_sh_trace_log_bak CURSOR FOR sh_trace_log_bak_upd;

	EXEC SQL OPEN upd_sh_trace_log_bak;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open sh_trace_log_bak error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Sh_trace_log_bak_Fet_Upd( struct sh_trace_log_bak_c *sh_trace_log_bak_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_sh_trace_log_bak INTO :sh_trace_log_bak_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd sh_trace_log_bak error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH sh_trace_log_bak finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(sh_trace_log_bak_c);

	return 0;
}

int Sh_trace_log_bak_Upd_Upd( struct sh_trace_log_bak_c sh_trace_log_bak_c , char * reply){
	int ret;

	EXEC SQL UPDATE sh_trace_log_bak SET trace_no=:sh_trace_log_bak_c.trace_no,
			trace_cnt=:sh_trace_log_bak_c.trace_cnt,
			tx_date=:sh_trace_log_bak_c.tx_date,
			tx_time=:sh_trace_log_bak_c.tx_time,
			tx_br_no=:sh_trace_log_bak_c.tx_br_no,
			opn_br_no=:sh_trace_log_bak_c.opn_br_no,
			tx_code=:sh_trace_log_bak_c.tx_code,
			sub_tx_code=:sh_trace_log_bak_c.sub_tx_code,
			svc_ind=:sh_trace_log_bak_c.svc_ind,
			cur_no=:sh_trace_log_bak_c.cur_no,
			prdt_no=:sh_trace_log_bak_c.prdt_no,
			ac_no=:sh_trace_log_bak_c.ac_no,
			ac_seqn=:sh_trace_log_bak_c.ac_seqn,
			ac_id=:sh_trace_log_bak_c.ac_id,
			note_type=:sh_trace_log_bak_c.note_type,
			note_no=:sh_trace_log_bak_c.note_no,
			add_ind=:sh_trace_log_bak_c.add_ind,
			amt=:sh_trace_log_bak_c.amt,
			ct_ind=:sh_trace_log_bak_c.ct_ind,
			brf=:sh_trace_log_bak_c.brf,
			tel=:sh_trace_log_bak_c.tel,
			chk=:sh_trace_log_bak_c.chk,
			aut=:sh_trace_log_bak_c.aut,
			hst_ind=:sh_trace_log_bak_c.hst_ind,
			saving_notarize=:sh_trace_log_bak_c.saving_notarize,
			no_show=:sh_trace_log_bak_c.no_show,
			sts=:sh_trace_log_bak_c.sts
	WHERE rowid=:sh_trace_log_bak_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE sh_trace_log_bak error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Sh_trace_log_bak_Del_Upd(struct sh_trace_log_bak_c sh_trace_log_bak_c , char * reply  ){

	EXEC SQL DELETE FROM sh_trace_log_bak WHERE rowid=:sh_trace_log_bak_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE sh_trace_log_bak error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Sh_trace_log_bak_Clo_Upd( ){
	EXEC SQL CLOSE upd_sh_trace_log_bak;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Sh_trace_log_bak_Ins( struct sh_trace_log_bak_c sh_trace_log_bak_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO sh_trace_log_bak VALUES (:sh_trace_log_bak_c.trace_no,
			:sh_trace_log_bak_c.trace_cnt,
			:sh_trace_log_bak_c.tx_date,
			:sh_trace_log_bak_c.tx_time,
			:sh_trace_log_bak_c.tx_br_no,
			:sh_trace_log_bak_c.opn_br_no,
			:sh_trace_log_bak_c.tx_code,
			:sh_trace_log_bak_c.sub_tx_code,
			:sh_trace_log_bak_c.svc_ind,
			:sh_trace_log_bak_c.cur_no,
			:sh_trace_log_bak_c.prdt_no,
			:sh_trace_log_bak_c.ac_no,
			:sh_trace_log_bak_c.ac_seqn,
			:sh_trace_log_bak_c.ac_id,
			:sh_trace_log_bak_c.note_type,
			:sh_trace_log_bak_c.note_no,
			:sh_trace_log_bak_c.add_ind,
			:sh_trace_log_bak_c.amt,
			:sh_trace_log_bak_c.ct_ind,
			:sh_trace_log_bak_c.brf,
			:sh_trace_log_bak_c.tel,
			:sh_trace_log_bak_c.chk,
			:sh_trace_log_bak_c.aut,
			:sh_trace_log_bak_c.hst_ind,
			:sh_trace_log_bak_c.saving_notarize,
			:sh_trace_log_bak_c.no_show,
			:sh_trace_log_bak_c.sts);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT sh_trace_log_bak error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT sh_trace_log_bak error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
