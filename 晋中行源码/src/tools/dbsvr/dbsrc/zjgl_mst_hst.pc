#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"zjgl_mst_hst_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int zjgl_mst_hst_con ( struct zjgl_mst_hst_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct zjgl_mst_hst_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->cur_no);
	zip_tail(ps->opn_br_no);
	zip_tail(ps->tx_br_no);
	zip_tail(ps->tx_code);
	zip_tail(ps->sub_tx_code);
	zip_tail(ps->acc_no);
	zip_tail(ps->acc_hrt);
	zip_tail(ps->add_ind);
	zip_tail(ps->ct_ind);
	zip_tail(ps->note_type);
	zip_tail(ps->note_no);
	zip_tail(ps->brf);
	zip_tail(ps->tel);
	zip_tail(ps->chk);
	zip_tail(ps->auth);
}
int Zjgl_mst_hst_Debug(struct zjgl_mst_hst_c *ps){
	vtcp_log("zjgl_mst_hst_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("zjgl_mst_hst_c.trace_no=[%ld]\n",ps->trace_no);
	vtcp_log("zjgl_mst_hst_c.trace_cnt=[%ld]\n",ps->trace_cnt);
	vtcp_log("zjgl_mst_hst_c.cur_no=[%s]\n",ps->cur_no);
	vtcp_log("zjgl_mst_hst_c.opn_br_no=[%s]\n",ps->opn_br_no);
	vtcp_log("zjgl_mst_hst_c.tx_br_no=[%s]\n",ps->tx_br_no);
	vtcp_log("zjgl_mst_hst_c.tx_code=[%s]\n",ps->tx_code);
	vtcp_log("zjgl_mst_hst_c.sub_tx_code=[%s]\n",ps->sub_tx_code);
	vtcp_log("zjgl_mst_hst_c.tx_date=[%ld]\n",ps->tx_date);
	vtcp_log("zjgl_mst_hst_c.tx_time=[%ld]\n",ps->tx_time);
	vtcp_log("zjgl_mst_hst_c.acc_no=[%s]\n",ps->acc_no);
	vtcp_log("zjgl_mst_hst_c.acc_hrt=[%s]\n",ps->acc_hrt);
	vtcp_log("zjgl_mst_hst_c.add_ind=[%s]\n",ps->add_ind);
	vtcp_log("zjgl_mst_hst_c.ct_ind=[%s]\n",ps->ct_ind);
	vtcp_log("zjgl_mst_hst_c.tx_amt=[%f]\n",ps->tx_amt);
	vtcp_log("zjgl_mst_hst_c.dr_bal=[%f]\n",ps->dr_bal);
	vtcp_log("zjgl_mst_hst_c.cr_bal=[%f]\n",ps->cr_bal);
	vtcp_log("zjgl_mst_hst_c.dr_intst_acm=[%f]\n",ps->dr_intst_acm);
	vtcp_log("zjgl_mst_hst_c.cr_intst_acm=[%f]\n",ps->cr_intst_acm);
	vtcp_log("zjgl_mst_hst_c.note_type=[%s]\n",ps->note_type);
	vtcp_log("zjgl_mst_hst_c.note_no=[%s]\n",ps->note_no);
	vtcp_log("zjgl_mst_hst_c.brf=[%s]\n",ps->brf);
	vtcp_log("zjgl_mst_hst_c.hst_cnt=[%ld]\n",ps->hst_cnt);
	vtcp_log("zjgl_mst_hst_c.tel=[%s]\n",ps->tel);
	vtcp_log("zjgl_mst_hst_c.chk=[%s]\n",ps->chk);
	vtcp_log("zjgl_mst_hst_c.auth=[%s]\n",ps->auth);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Zjgl_mst_hst_Sel(reply,zjgl_mst_hst_c,fmtstr,va_alist)
char    *reply;
struct  zjgl_mst_hst_c *zjgl_mst_hst_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Zjgl_mst_hst_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Zjgl_mst_hst_Fet_Sel( zjgl_mst_hst_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Zjgl_mst_hst_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Zjgl_mst_hst_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,zjgl_mst_hst.* FROM zjgl_mst_hst WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE zjgl_mst_hst_sel FROM :comm;
	EXEC SQL DECLARE sel_zjgl_mst_hst CURSOR FOR zjgl_mst_hst_sel;

	EXEC SQL OPEN sel_zjgl_mst_hst;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN zjgl_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Zjgl_mst_hst_Fet_Sel ( struct zjgl_mst_hst_c *zjgl_mst_hst_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_zjgl_mst_hst INTO :zjgl_mst_hst_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch zjgl_mst_hst error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch zjgl_mst_hst finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(zjgl_mst_hst_c);

	return 0;
}

int Zjgl_mst_hst_Clo_Sel (){
	EXEC SQL CLOSE sel_zjgl_mst_hst;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Zjgl_mst_hst_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,zjgl_mst_hst.* FROM zjgl_mst_hst WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE zjgl_mst_hst_upd FROM :comm;

	EXEC SQL DECLARE upd_zjgl_mst_hst CURSOR FOR zjgl_mst_hst_upd;

	EXEC SQL OPEN upd_zjgl_mst_hst;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open zjgl_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Zjgl_mst_hst_Fet_Upd( struct zjgl_mst_hst_c *zjgl_mst_hst_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_zjgl_mst_hst INTO :zjgl_mst_hst_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd zjgl_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH zjgl_mst_hst finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(zjgl_mst_hst_c);

	return 0;
}

int Zjgl_mst_hst_Upd_Upd( struct zjgl_mst_hst_c zjgl_mst_hst_c , char * reply){
	int ret;

	EXEC SQL UPDATE zjgl_mst_hst SET trace_no=:zjgl_mst_hst_c.trace_no,
			trace_cnt=:zjgl_mst_hst_c.trace_cnt,
			cur_no=:zjgl_mst_hst_c.cur_no,
			opn_br_no=:zjgl_mst_hst_c.opn_br_no,
			tx_br_no=:zjgl_mst_hst_c.tx_br_no,
			tx_code=:zjgl_mst_hst_c.tx_code,
			sub_tx_code=:zjgl_mst_hst_c.sub_tx_code,
			tx_date=:zjgl_mst_hst_c.tx_date,
			tx_time=:zjgl_mst_hst_c.tx_time,
			acc_no=:zjgl_mst_hst_c.acc_no,
			acc_hrt=:zjgl_mst_hst_c.acc_hrt,
			add_ind=:zjgl_mst_hst_c.add_ind,
			ct_ind=:zjgl_mst_hst_c.ct_ind,
			tx_amt=:zjgl_mst_hst_c.tx_amt,
			dr_bal=:zjgl_mst_hst_c.dr_bal,
			cr_bal=:zjgl_mst_hst_c.cr_bal,
			dr_intst_acm=:zjgl_mst_hst_c.dr_intst_acm,
			cr_intst_acm=:zjgl_mst_hst_c.cr_intst_acm,
			note_type=:zjgl_mst_hst_c.note_type,
			note_no=:zjgl_mst_hst_c.note_no,
			brf=:zjgl_mst_hst_c.brf,
			hst_cnt=:zjgl_mst_hst_c.hst_cnt,
			tel=:zjgl_mst_hst_c.tel,
			chk=:zjgl_mst_hst_c.chk,
			auth=:zjgl_mst_hst_c.auth
	WHERE rowid=:zjgl_mst_hst_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE zjgl_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Zjgl_mst_hst_Del_Upd(struct zjgl_mst_hst_c zjgl_mst_hst_c , char * reply  ){

	EXEC SQL DELETE FROM zjgl_mst_hst WHERE rowid=:zjgl_mst_hst_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE zjgl_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Zjgl_mst_hst_Clo_Upd( ){
	EXEC SQL CLOSE upd_zjgl_mst_hst;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Zjgl_mst_hst_Ins( struct zjgl_mst_hst_c zjgl_mst_hst_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO zjgl_mst_hst VALUES (:zjgl_mst_hst_c.trace_no,
			:zjgl_mst_hst_c.trace_cnt,
			:zjgl_mst_hst_c.cur_no,
			:zjgl_mst_hst_c.opn_br_no,
			:zjgl_mst_hst_c.tx_br_no,
			:zjgl_mst_hst_c.tx_code,
			:zjgl_mst_hst_c.sub_tx_code,
			:zjgl_mst_hst_c.tx_date,
			:zjgl_mst_hst_c.tx_time,
			:zjgl_mst_hst_c.acc_no,
			:zjgl_mst_hst_c.acc_hrt,
			:zjgl_mst_hst_c.add_ind,
			:zjgl_mst_hst_c.ct_ind,
			:zjgl_mst_hst_c.tx_amt,
			:zjgl_mst_hst_c.dr_bal,
			:zjgl_mst_hst_c.cr_bal,
			:zjgl_mst_hst_c.dr_intst_acm,
			:zjgl_mst_hst_c.cr_intst_acm,
			:zjgl_mst_hst_c.note_type,
			:zjgl_mst_hst_c.note_no,
			:zjgl_mst_hst_c.brf,
			:zjgl_mst_hst_c.hst_cnt,
			:zjgl_mst_hst_c.tel,
			:zjgl_mst_hst_c.chk,
			:zjgl_mst_hst_c.auth);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT zjgl_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT zjgl_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
