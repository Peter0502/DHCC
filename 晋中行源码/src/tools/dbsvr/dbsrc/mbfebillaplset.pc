#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"mbfebillaplset_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int mbfebillaplset_con ( struct mbfebillaplset_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct mbfebillaplset_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->msssno);
	zip_tail(ps->odficode);
	zip_tail(ps->rdficode);
	zip_tail(ps->payeropenaccbkcode);
	zip_tail(ps->billcode);
	zip_tail(ps->billofxchngseal);
	zip_tail(ps->billsts);
	zip_tail(ps->setsts);
	zip_tail(ps->recipientopenaccbk);
	zip_tail(ps->lastbillholderacc);
	zip_tail(ps->lastbillholdername);
	zip_tail(ps->appuser);
	zip_tail(ps->billtype);
	zip_tail(ps->sendtime);
	zip_tail(ps->settxssno);
	zip_tail(ps->los_rpt_tel);
	zip_tail(ps->los_rpt_bookno);
	zip_tail(ps->clos_rpt_tel);
	zip_tail(ps->errcode);
	zip_tail(ps->errdesc);
	zip_tail(ps->strinfo);
}
int Mbfebillaplset_Debug(struct mbfebillaplset_c *ps){
	vtcp_log("mbfebillaplset_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("mbfebillaplset_c.msssno=[%s]\n",ps->msssno);
	vtcp_log("mbfebillaplset_c.consigndate=[%ld]\n",ps->consigndate);
	vtcp_log("mbfebillaplset_c.odficode=[%s]\n",ps->odficode);
	vtcp_log("mbfebillaplset_c.rdficode=[%s]\n",ps->rdficode);
	vtcp_log("mbfebillaplset_c.payeropenaccbkcode=[%s]\n",ps->payeropenaccbkcode);
	vtcp_log("mbfebillaplset_c.billdate=[%ld]\n",ps->billdate);
	vtcp_log("mbfebillaplset_c.billcode=[%s]\n",ps->billcode);
	vtcp_log("mbfebillaplset_c.billofxchngseal=[%s]\n",ps->billofxchngseal);
	vtcp_log("mbfebillaplset_c.remittanceamnt=[%f]\n",ps->remittanceamnt);
	vtcp_log("mbfebillaplset_c.billsts=[%s]\n",ps->billsts);
	vtcp_log("mbfebillaplset_c.setsts=[%s]\n",ps->setsts);
	vtcp_log("mbfebillaplset_c.repudiationamnt=[%f]\n",ps->repudiationamnt);
	vtcp_log("mbfebillaplset_c.redundantamnt=[%f]\n",ps->redundantamnt);
	vtcp_log("mbfebillaplset_c.recipientopenaccbk=[%s]\n",ps->recipientopenaccbk);
	vtcp_log("mbfebillaplset_c.lastbillholderacc=[%s]\n",ps->lastbillholderacc);
	vtcp_log("mbfebillaplset_c.lastbillholdername=[%s]\n",ps->lastbillholdername);
	vtcp_log("mbfebillaplset_c.prmptpaydate=[%ld]\n",ps->prmptpaydate);
	vtcp_log("mbfebillaplset_c.appuser=[%s]\n",ps->appuser);
	vtcp_log("mbfebillaplset_c.billtype=[%s]\n",ps->billtype);
	vtcp_log("mbfebillaplset_c.sendtime=[%s]\n",ps->sendtime);
	vtcp_log("mbfebillaplset_c.setdate=[%ld]\n",ps->setdate);
	vtcp_log("mbfebillaplset_c.setflowno=[%ld]\n",ps->setflowno);
	vtcp_log("mbfebillaplset_c.settxssno=[%s]\n",ps->settxssno);
	vtcp_log("mbfebillaplset_c.los_rpt_date=[%ld]\n",ps->los_rpt_date);
	vtcp_log("mbfebillaplset_c.los_rpt_tel=[%s]\n",ps->los_rpt_tel);
	vtcp_log("mbfebillaplset_c.los_rpt_bookno=[%s]\n",ps->los_rpt_bookno);
	vtcp_log("mbfebillaplset_c.clos_rpt_date=[%ld]\n",ps->clos_rpt_date);
	vtcp_log("mbfebillaplset_c.clos_rpt_tel=[%s]\n",ps->clos_rpt_tel);
	vtcp_log("mbfebillaplset_c.errcode=[%s]\n",ps->errcode);
	vtcp_log("mbfebillaplset_c.errdesc=[%s]\n",ps->errdesc);
	vtcp_log("mbfebillaplset_c.strinfo=[%s]\n",ps->strinfo);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Mbfebillaplset_Sel(reply,mbfebillaplset_c,fmtstr,va_alist)
char    *reply;
struct  mbfebillaplset_c *mbfebillaplset_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Mbfebillaplset_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Mbfebillaplset_Fet_Sel( mbfebillaplset_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Mbfebillaplset_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Mbfebillaplset_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,mbfebillaplset.* FROM mbfebillaplset WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mbfebillaplset_sel FROM :comm;
	EXEC SQL DECLARE sel_mbfebillaplset CURSOR FOR mbfebillaplset_sel;

	EXEC SQL OPEN sel_mbfebillaplset;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN mbfebillaplset error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mbfebillaplset_Fet_Sel ( struct mbfebillaplset_c *mbfebillaplset_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_mbfebillaplset INTO :mbfebillaplset_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch mbfebillaplset error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch mbfebillaplset finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(mbfebillaplset_c);

	return 0;
}

int Mbfebillaplset_Clo_Sel (){
	EXEC SQL CLOSE sel_mbfebillaplset;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Mbfebillaplset_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,mbfebillaplset.* FROM mbfebillaplset WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mbfebillaplset_upd FROM :comm;

	EXEC SQL DECLARE upd_mbfebillaplset CURSOR FOR mbfebillaplset_upd;

	EXEC SQL OPEN upd_mbfebillaplset;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open mbfebillaplset error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mbfebillaplset_Fet_Upd( struct mbfebillaplset_c *mbfebillaplset_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_mbfebillaplset INTO :mbfebillaplset_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd mbfebillaplset error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH mbfebillaplset finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(mbfebillaplset_c);

	return 0;
}

int Mbfebillaplset_Upd_Upd( struct mbfebillaplset_c mbfebillaplset_c , char * reply){
	int ret;

	EXEC SQL UPDATE mbfebillaplset SET msssno=:mbfebillaplset_c.msssno,
			consigndate=:mbfebillaplset_c.consigndate,
			odficode=:mbfebillaplset_c.odficode,
			rdficode=:mbfebillaplset_c.rdficode,
			payeropenaccbkcode=:mbfebillaplset_c.payeropenaccbkcode,
			billdate=:mbfebillaplset_c.billdate,
			billcode=:mbfebillaplset_c.billcode,
			billofxchngseal=:mbfebillaplset_c.billofxchngseal,
			remittanceamnt=:mbfebillaplset_c.remittanceamnt,
			billsts=:mbfebillaplset_c.billsts,
			setsts=:mbfebillaplset_c.setsts,
			repudiationamnt=:mbfebillaplset_c.repudiationamnt,
			redundantamnt=:mbfebillaplset_c.redundantamnt,
			recipientopenaccbk=:mbfebillaplset_c.recipientopenaccbk,
			lastbillholderacc=:mbfebillaplset_c.lastbillholderacc,
			lastbillholdername=:mbfebillaplset_c.lastbillholdername,
			prmptpaydate=:mbfebillaplset_c.prmptpaydate,
			appuser=:mbfebillaplset_c.appuser,
			billtype=:mbfebillaplset_c.billtype,
			sendtime=:mbfebillaplset_c.sendtime,
			setdate=:mbfebillaplset_c.setdate,
			setflowno=:mbfebillaplset_c.setflowno,
			settxssno=:mbfebillaplset_c.settxssno,
			los_rpt_date=:mbfebillaplset_c.los_rpt_date,
			los_rpt_tel=:mbfebillaplset_c.los_rpt_tel,
			los_rpt_bookno=:mbfebillaplset_c.los_rpt_bookno,
			clos_rpt_date=:mbfebillaplset_c.clos_rpt_date,
			clos_rpt_tel=:mbfebillaplset_c.clos_rpt_tel,
			errcode=:mbfebillaplset_c.errcode,
			errdesc=:mbfebillaplset_c.errdesc,
			strinfo=:mbfebillaplset_c.strinfo
	WHERE rowid=:mbfebillaplset_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE mbfebillaplset error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Mbfebillaplset_Del_Upd(struct mbfebillaplset_c mbfebillaplset_c , char * reply  ){

	EXEC SQL DELETE FROM mbfebillaplset WHERE rowid=:mbfebillaplset_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE mbfebillaplset error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mbfebillaplset_Clo_Upd( ){
	EXEC SQL CLOSE upd_mbfebillaplset;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Mbfebillaplset_Ins( struct mbfebillaplset_c mbfebillaplset_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO mbfebillaplset VALUES (:mbfebillaplset_c.msssno,
			:mbfebillaplset_c.consigndate,
			:mbfebillaplset_c.odficode,
			:mbfebillaplset_c.rdficode,
			:mbfebillaplset_c.payeropenaccbkcode,
			:mbfebillaplset_c.billdate,
			:mbfebillaplset_c.billcode,
			:mbfebillaplset_c.billofxchngseal,
			:mbfebillaplset_c.remittanceamnt,
			:mbfebillaplset_c.billsts,
			:mbfebillaplset_c.setsts,
			:mbfebillaplset_c.repudiationamnt,
			:mbfebillaplset_c.redundantamnt,
			:mbfebillaplset_c.recipientopenaccbk,
			:mbfebillaplset_c.lastbillholderacc,
			:mbfebillaplset_c.lastbillholdername,
			:mbfebillaplset_c.prmptpaydate,
			:mbfebillaplset_c.appuser,
			:mbfebillaplset_c.billtype,
			:mbfebillaplset_c.sendtime,
			:mbfebillaplset_c.setdate,
			:mbfebillaplset_c.setflowno,
			:mbfebillaplset_c.settxssno,
			:mbfebillaplset_c.los_rpt_date,
			:mbfebillaplset_c.los_rpt_tel,
			:mbfebillaplset_c.los_rpt_bookno,
			:mbfebillaplset_c.clos_rpt_date,
			:mbfebillaplset_c.clos_rpt_tel,
			:mbfebillaplset_c.errcode,
			:mbfebillaplset_c.errdesc,
			:mbfebillaplset_c.strinfo);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT mbfebillaplset error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT mbfebillaplset error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
