#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"tware_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int tware_con ( struct tware_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct tware_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->br_no);
	zip_tail(ps->tel);
	zip_tail(ps->tx_code);
	zip_tail(ps->sub_tx_code);
	zip_tail(ps->stat);
}
int Tware_Debug(struct tware_c *ps){
	vtcp_log("tware_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("tware_c.br_no=[%s]\n",ps->br_no);
	vtcp_log("tware_c.tel=[%s]\n",ps->tel);
	vtcp_log("tware_c.trace_no=[%ld]\n",ps->trace_no);
	vtcp_log("tware_c.tx_date=[%ld]\n",ps->tx_date);
	vtcp_log("tware_c.tx_time=[%ld]\n",ps->tx_time);
	vtcp_log("tware_c.tx_code=[%s]\n",ps->tx_code);
	vtcp_log("tware_c.sub_tx_code=[%s]\n",ps->sub_tx_code);
	vtcp_log("tware_c.amt=[%f]\n",ps->amt);
	vtcp_log("tware_c.bal=[%f]\n",ps->bal);
	vtcp_log("tware_c.stat=[%s]\n",ps->stat);
	vtcp_log("tware_c.t10000=[%ld]\n",ps->t10000);
	vtcp_log("tware_c.t5000=[%ld]\n",ps->t5000);
	vtcp_log("tware_c.t2000=[%ld]\n",ps->t2000);
	vtcp_log("tware_c.t1000=[%ld]\n",ps->t1000);
	vtcp_log("tware_c.t500=[%ld]\n",ps->t500);
	vtcp_log("tware_c.t200=[%ld]\n",ps->t200);
	vtcp_log("tware_c.t100=[%ld]\n",ps->t100);
	vtcp_log("tware_c.t50=[%ld]\n",ps->t50);
	vtcp_log("tware_c.t20=[%ld]\n",ps->t20);
	vtcp_log("tware_c.t10=[%ld]\n",ps->t10);
	vtcp_log("tware_c.t5=[%ld]\n",ps->t5);
	vtcp_log("tware_c.t2=[%ld]\n",ps->t2);
	vtcp_log("tware_c.t1=[%ld]\n",ps->t1);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Tware_Sel(reply,tware_c,fmtstr,va_alist)
char    *reply;
struct  tware_c *tware_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Tware_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Tware_Fet_Sel( tware_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Tware_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Tware_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,tware.* FROM tware WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE tware_sel FROM :comm;
	EXEC SQL DECLARE sel_tware CURSOR FOR tware_sel;

	EXEC SQL OPEN sel_tware;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN tware error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Tware_Fet_Sel ( struct tware_c *tware_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_tware INTO :tware_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch tware error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch tware finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(tware_c);

	return 0;
}

int Tware_Clo_Sel (){
	EXEC SQL CLOSE sel_tware;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Tware_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,tware.* FROM tware WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE tware_upd FROM :comm;

	EXEC SQL DECLARE upd_tware CURSOR FOR tware_upd;

	EXEC SQL OPEN upd_tware;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open tware error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Tware_Fet_Upd( struct tware_c *tware_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_tware INTO :tware_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd tware error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH tware finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(tware_c);

	return 0;
}

int Tware_Upd_Upd( struct tware_c tware_c , char * reply){
	int ret;

	EXEC SQL UPDATE tware SET br_no=:tware_c.br_no,
			tel=:tware_c.tel,
			trace_no=:tware_c.trace_no,
			tx_date=:tware_c.tx_date,
			tx_time=:tware_c.tx_time,
			tx_code=:tware_c.tx_code,
			sub_tx_code=:tware_c.sub_tx_code,
			amt=:tware_c.amt,
			bal=:tware_c.bal,
			stat=:tware_c.stat,
			t10000=:tware_c.t10000,
			t5000=:tware_c.t5000,
			t2000=:tware_c.t2000,
			t1000=:tware_c.t1000,
			t500=:tware_c.t500,
			t200=:tware_c.t200,
			t100=:tware_c.t100,
			t50=:tware_c.t50,
			t20=:tware_c.t20,
			t10=:tware_c.t10,
			t5=:tware_c.t5,
			t2=:tware_c.t2,
			t1=:tware_c.t1
	WHERE rowid=:tware_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE tware error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Tware_Del_Upd(struct tware_c tware_c , char * reply  ){

	EXEC SQL DELETE FROM tware WHERE rowid=:tware_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE tware error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Tware_Clo_Upd( ){
	EXEC SQL CLOSE upd_tware;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Tware_Ins( struct tware_c tware_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO tware VALUES (:tware_c.br_no,
			:tware_c.tel,
			:tware_c.trace_no,
			:tware_c.tx_date,
			:tware_c.tx_time,
			:tware_c.tx_code,
			:tware_c.sub_tx_code,
			:tware_c.amt,
			:tware_c.bal,
			:tware_c.stat,
			:tware_c.t10000,
			:tware_c.t5000,
			:tware_c.t2000,
			:tware_c.t1000,
			:tware_c.t500,
			:tware_c.t200,
			:tware_c.t100,
			:tware_c.t50,
			:tware_c.t20,
			:tware_c.t10,
			:tware_c.t5,
			:tware_c.t2,
			:tware_c.t1);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT tware error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT tware error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
