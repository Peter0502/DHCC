#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"mo_ibl_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int mo_ibl_con ( struct mo_ibl_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct mo_ibl_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->pact_no);
	zip_tail(ps->br_no);
	zip_tail(ps->op_ac_no);
	zip_tail(ps->acc_no);
	zip_tail(ps->prdt_no);
	zip_tail(ps->sign);
	zip_tail(ps->op_name);
	zip_tail(ps->sts);
	zip_tail(ps->tel);
	zip_tail(ps->chk);
	zip_tail(ps->auth);
	zip_tail(ps->op_br_no);
	zip_tail(ps->kh_ac_no);
	zip_tail(ps->kh_name);
}
int Mo_ibl_Debug(struct mo_ibl_c *ps){
	vtcp_log("mo_ibl_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("mo_ibl_c.pact_no=[%s]\n",ps->pact_no);
	vtcp_log("mo_ibl_c.br_no=[%s]\n",ps->br_no);
	vtcp_log("mo_ibl_c.ac_id=[%ld]\n",ps->ac_id);
	vtcp_log("mo_ibl_c.op_ac_no=[%s]\n",ps->op_ac_no);
	vtcp_log("mo_ibl_c.acc_no=[%s]\n",ps->acc_no);
	vtcp_log("mo_ibl_c.prdt_no=[%s]\n",ps->prdt_no);
	vtcp_log("mo_ibl_c.sign=[%s]\n",ps->sign);
	vtcp_log("mo_ibl_c.op_name=[%s]\n",ps->op_name);
	vtcp_log("mo_ibl_c.term=[%ld]\n",ps->term);
	vtcp_log("mo_ibl_c.amt=[%f]\n",ps->amt);
	vtcp_log("mo_ibl_c.rate=[%f]\n",ps->rate);
	vtcp_log("mo_ibl_c.over_rate=[%f]\n",ps->over_rate);
	vtcp_log("mo_ibl_c.no_pay_bal=[%f]\n",ps->no_pay_bal);
	vtcp_log("mo_ibl_c.opn_date=[%ld]\n",ps->opn_date);
	vtcp_log("mo_ibl_c.matr_date=[%ld]\n",ps->matr_date);
	vtcp_log("mo_ibl_c.wrk_date=[%ld]\n",ps->wrk_date);
	vtcp_log("mo_ibl_c.trance_no=[%ld]\n",ps->trance_no);
	vtcp_log("mo_ibl_c.sts=[%s]\n",ps->sts);
	vtcp_log("mo_ibl_c.tel=[%s]\n",ps->tel);
	vtcp_log("mo_ibl_c.chk=[%s]\n",ps->chk);
	vtcp_log("mo_ibl_c.auth=[%s]\n",ps->auth);
	vtcp_log("mo_ibl_c.op_br_no=[%s]\n",ps->op_br_no);
	vtcp_log("mo_ibl_c.kh_ac_no=[%s]\n",ps->kh_ac_no);
	vtcp_log("mo_ibl_c.kh_name=[%s]\n",ps->kh_name);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Mo_ibl_Sel(reply,mo_ibl_c,fmtstr,va_alist)
char    *reply;
struct  mo_ibl_c *mo_ibl_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Mo_ibl_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Mo_ibl_Fet_Sel( mo_ibl_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Mo_ibl_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Mo_ibl_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,mo_ibl.* FROM mo_ibl WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mo_ibl_sel FROM :comm;
	EXEC SQL DECLARE sel_mo_ibl CURSOR FOR mo_ibl_sel;

	EXEC SQL OPEN sel_mo_ibl;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN mo_ibl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_ibl_Fet_Sel ( struct mo_ibl_c *mo_ibl_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_mo_ibl INTO :mo_ibl_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch mo_ibl error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch mo_ibl finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(mo_ibl_c);

	return 0;
}

int Mo_ibl_Clo_Sel (){
	EXEC SQL CLOSE sel_mo_ibl;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Mo_ibl_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,mo_ibl.* FROM mo_ibl WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mo_ibl_upd FROM :comm;

	EXEC SQL DECLARE upd_mo_ibl CURSOR FOR mo_ibl_upd;

	EXEC SQL OPEN upd_mo_ibl;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open mo_ibl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_ibl_Fet_Upd( struct mo_ibl_c *mo_ibl_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_mo_ibl INTO :mo_ibl_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd mo_ibl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH mo_ibl finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(mo_ibl_c);

	return 0;
}

int Mo_ibl_Upd_Upd( struct mo_ibl_c mo_ibl_c , char * reply){
	int ret;

	EXEC SQL UPDATE mo_ibl SET pact_no=:mo_ibl_c.pact_no,
			br_no=:mo_ibl_c.br_no,
			ac_id=:mo_ibl_c.ac_id,
			op_ac_no=:mo_ibl_c.op_ac_no,
			acc_no=:mo_ibl_c.acc_no,
			prdt_no=:mo_ibl_c.prdt_no,
			sign=:mo_ibl_c.sign,
			op_name=:mo_ibl_c.op_name,
			term=:mo_ibl_c.term,
			amt=:mo_ibl_c.amt,
			rate=:mo_ibl_c.rate,
			over_rate=:mo_ibl_c.over_rate,
			no_pay_bal=:mo_ibl_c.no_pay_bal,
			opn_date=:mo_ibl_c.opn_date,
			matr_date=:mo_ibl_c.matr_date,
			wrk_date=:mo_ibl_c.wrk_date,
			trance_no=:mo_ibl_c.trance_no,
			sts=:mo_ibl_c.sts,
			tel=:mo_ibl_c.tel,
			chk=:mo_ibl_c.chk,
			auth=:mo_ibl_c.auth,
			op_br_no=:mo_ibl_c.op_br_no,
			kh_ac_no=:mo_ibl_c.kh_ac_no,
			kh_name=:mo_ibl_c.kh_name
	WHERE rowid=:mo_ibl_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE mo_ibl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Mo_ibl_Del_Upd(struct mo_ibl_c mo_ibl_c , char * reply  ){

	EXEC SQL DELETE FROM mo_ibl WHERE rowid=:mo_ibl_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE mo_ibl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_ibl_Clo_Upd( ){
	EXEC SQL CLOSE upd_mo_ibl;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Mo_ibl_Ins( struct mo_ibl_c mo_ibl_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO mo_ibl VALUES (:mo_ibl_c.pact_no,
			:mo_ibl_c.br_no,
			:mo_ibl_c.ac_id,
			:mo_ibl_c.op_ac_no,
			:mo_ibl_c.acc_no,
			:mo_ibl_c.prdt_no,
			:mo_ibl_c.sign,
			:mo_ibl_c.op_name,
			:mo_ibl_c.term,
			:mo_ibl_c.amt,
			:mo_ibl_c.rate,
			:mo_ibl_c.over_rate,
			:mo_ibl_c.no_pay_bal,
			:mo_ibl_c.opn_date,
			:mo_ibl_c.matr_date,
			:mo_ibl_c.wrk_date,
			:mo_ibl_c.trance_no,
			:mo_ibl_c.sts,
			:mo_ibl_c.tel,
			:mo_ibl_c.chk,
			:mo_ibl_c.auth,
			:mo_ibl_c.op_br_no,
			:mo_ibl_c.kh_ac_no,
			:mo_ibl_c.kh_name);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT mo_ibl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT mo_ibl error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
