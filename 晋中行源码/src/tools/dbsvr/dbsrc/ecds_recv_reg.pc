#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"ecds_recv_reg_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int ecds_recv_reg_con ( struct ecds_recv_reg_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct ecds_recv_reg_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->ecds_trace_no);
	zip_tail(ps->drftcls);
	zip_tail(ps->drfttyp);
	zip_tail(ps->drftnb);
	zip_tail(ps->tag_name);
	zip_tail(ps->sts);
	zip_tail(ps->check_flag);
	zip_tail(ps->bf_flag);
}
int Ecds_recv_reg_Debug(struct ecds_recv_reg_c *ps){
	vtcp_log("ecds_recv_reg_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("ecds_recv_reg_c.ecds_tx_date=[%ld]\n",ps->ecds_tx_date);
	vtcp_log("ecds_recv_reg_c.ecds_trace_no=[%s]\n",ps->ecds_trace_no);
	vtcp_log("ecds_recv_reg_c.trace_no=[%ld]\n",ps->trace_no);
	vtcp_log("ecds_recv_reg_c.tx_date=[%ld]\n",ps->tx_date);
	vtcp_log("ecds_recv_reg_c.drftcls=[%s]\n",ps->drftcls);
	vtcp_log("ecds_recv_reg_c.drfttyp=[%s]\n",ps->drfttyp);
	vtcp_log("ecds_recv_reg_c.drftnb=[%s]\n",ps->drftnb);
	vtcp_log("ecds_recv_reg_c.issedt=[%ld]\n",ps->issedt);
	vtcp_log("ecds_recv_reg_c.duedt=[%ld]\n",ps->duedt);
	vtcp_log("ecds_recv_reg_c.tag_name=[%s]\n",ps->tag_name);
	vtcp_log("ecds_recv_reg_c.sts=[%s]\n",ps->sts);
	vtcp_log("ecds_recv_reg_c.check_flag=[%s]\n",ps->check_flag);
	vtcp_log("ecds_recv_reg_c.bf_flag=[%s]\n",ps->bf_flag);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Ecds_recv_reg_Sel(reply,ecds_recv_reg_c,fmtstr,va_alist)
char    *reply;
struct  ecds_recv_reg_c *ecds_recv_reg_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Ecds_recv_reg_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Ecds_recv_reg_Fet_Sel( ecds_recv_reg_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Ecds_recv_reg_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Ecds_recv_reg_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,ecds_recv_reg.* FROM ecds_recv_reg WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE ecds_recv_reg_sel FROM :comm;
	EXEC SQL DECLARE sel_ecds_recv_reg CURSOR FOR ecds_recv_reg_sel;

	EXEC SQL OPEN sel_ecds_recv_reg;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN ecds_recv_reg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Ecds_recv_reg_Fet_Sel ( struct ecds_recv_reg_c *ecds_recv_reg_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_ecds_recv_reg INTO :ecds_recv_reg_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch ecds_recv_reg error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch ecds_recv_reg finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(ecds_recv_reg_c);

	return 0;
}

int Ecds_recv_reg_Clo_Sel (){
	EXEC SQL CLOSE sel_ecds_recv_reg;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Ecds_recv_reg_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,ecds_recv_reg.* FROM ecds_recv_reg WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE ecds_recv_reg_upd FROM :comm;

	EXEC SQL DECLARE upd_ecds_recv_reg CURSOR FOR ecds_recv_reg_upd;

	EXEC SQL OPEN upd_ecds_recv_reg;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open ecds_recv_reg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Ecds_recv_reg_Fet_Upd( struct ecds_recv_reg_c *ecds_recv_reg_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_ecds_recv_reg INTO :ecds_recv_reg_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd ecds_recv_reg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH ecds_recv_reg finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(ecds_recv_reg_c);

	return 0;
}

int Ecds_recv_reg_Upd_Upd( struct ecds_recv_reg_c ecds_recv_reg_c , char * reply){
	int ret;

	EXEC SQL UPDATE ecds_recv_reg SET ecds_tx_date=:ecds_recv_reg_c.ecds_tx_date,
			ecds_trace_no=:ecds_recv_reg_c.ecds_trace_no,
			trace_no=:ecds_recv_reg_c.trace_no,
			tx_date=:ecds_recv_reg_c.tx_date,
			drftcls=:ecds_recv_reg_c.drftcls,
			drfttyp=:ecds_recv_reg_c.drfttyp,
			drftnb=:ecds_recv_reg_c.drftnb,
			issedt=:ecds_recv_reg_c.issedt,
			duedt=:ecds_recv_reg_c.duedt,
			tag_name=:ecds_recv_reg_c.tag_name,
			sts=:ecds_recv_reg_c.sts,
			check_flag=:ecds_recv_reg_c.check_flag,
			bf_flag=:ecds_recv_reg_c.bf_flag
	WHERE rowid=:ecds_recv_reg_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE ecds_recv_reg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Ecds_recv_reg_Del_Upd(struct ecds_recv_reg_c ecds_recv_reg_c , char * reply  ){

	EXEC SQL DELETE FROM ecds_recv_reg WHERE rowid=:ecds_recv_reg_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE ecds_recv_reg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Ecds_recv_reg_Clo_Upd( ){
	EXEC SQL CLOSE upd_ecds_recv_reg;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Ecds_recv_reg_Ins( struct ecds_recv_reg_c ecds_recv_reg_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO ecds_recv_reg VALUES (:ecds_recv_reg_c.ecds_tx_date,
			:ecds_recv_reg_c.ecds_trace_no,
			:ecds_recv_reg_c.trace_no,
			:ecds_recv_reg_c.tx_date,
			:ecds_recv_reg_c.drftcls,
			:ecds_recv_reg_c.drfttyp,
			:ecds_recv_reg_c.drftnb,
			:ecds_recv_reg_c.issedt,
			:ecds_recv_reg_c.duedt,
			:ecds_recv_reg_c.tag_name,
			:ecds_recv_reg_c.sts,
			:ecds_recv_reg_c.check_flag,
			:ecds_recv_reg_c.bf_flag);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT ecds_recv_reg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT ecds_recv_reg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
