#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"new_jz_prdt_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int new_jz_prdt_con ( struct new_jz_prdt_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct new_jz_prdt_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->pact_no);
	zip_tail(ps->ac_no);
	zip_tail(ps->ac_name);
	zip_tail(ps->old_prdt_no);
	zip_tail(ps->old_prdt_name);
	zip_tail(ps->new_prdt_no);
	zip_tail(ps->new_prdt_name);
	zip_tail(ps->id_no);
	zip_tail(ps->sts);
	zip_tail(ps->tel);
	zip_tail(ps->tx_br_no);
	zip_tail(ps->code1);
	zip_tail(ps->code2);
}
int New_jz_prdt_Debug(struct new_jz_prdt_c *ps){
	vtcp_log("new_jz_prdt_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("new_jz_prdt_c.pact_no=[%s]\n",ps->pact_no);
	vtcp_log("new_jz_prdt_c.ac_no=[%s]\n",ps->ac_no);
	vtcp_log("new_jz_prdt_c.ac_name=[%s]\n",ps->ac_name);
	vtcp_log("new_jz_prdt_c.old_prdt_no=[%s]\n",ps->old_prdt_no);
	vtcp_log("new_jz_prdt_c.old_prdt_name=[%s]\n",ps->old_prdt_name);
	vtcp_log("new_jz_prdt_c.new_prdt_no=[%s]\n",ps->new_prdt_no);
	vtcp_log("new_jz_prdt_c.new_prdt_name=[%s]\n",ps->new_prdt_name);
	vtcp_log("new_jz_prdt_c.id_no=[%s]\n",ps->id_no);
	vtcp_log("new_jz_prdt_c.bj_amt=[%f]\n",ps->bj_amt);
	vtcp_log("new_jz_prdt_c.in_lo_intst=[%f]\n",ps->in_lo_intst);
	vtcp_log("new_jz_prdt_c.out_lo_intst=[%f]\n",ps->out_lo_intst);
	vtcp_log("new_jz_prdt_c.sts=[%s]\n",ps->sts);
	vtcp_log("new_jz_prdt_c.ac_id=[%ld]\n",ps->ac_id);
	vtcp_log("new_jz_prdt_c.tx_date=[%ld]\n",ps->tx_date);
	vtcp_log("new_jz_prdt_c.tx_time=[%ld]\n",ps->tx_time);
	vtcp_log("new_jz_prdt_c.trace_no=[%ld]\n",ps->trace_no);
	vtcp_log("new_jz_prdt_c.tel=[%s]\n",ps->tel);
	vtcp_log("new_jz_prdt_c.tx_br_no=[%s]\n",ps->tx_br_no);
	vtcp_log("new_jz_prdt_c.amt1=[%f]\n",ps->amt1);
	vtcp_log("new_jz_prdt_c.amt2=[%f]\n",ps->amt2);
	vtcp_log("new_jz_prdt_c.code1=[%s]\n",ps->code1);
	vtcp_log("new_jz_prdt_c.code2=[%s]\n",ps->code2);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int New_jz_prdt_Sel(reply,new_jz_prdt_c,fmtstr,va_alist)
char    *reply;
struct  new_jz_prdt_c *new_jz_prdt_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = New_jz_prdt_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = New_jz_prdt_Fet_Sel( new_jz_prdt_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	New_jz_prdt_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int New_jz_prdt_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,new_jz_prdt.* FROM new_jz_prdt WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE new_jz_prdt_sel FROM :comm;
	EXEC SQL DECLARE sel_new_jz_prdt CURSOR FOR new_jz_prdt_sel;

	EXEC SQL OPEN sel_new_jz_prdt;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN new_jz_prdt error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int New_jz_prdt_Fet_Sel ( struct new_jz_prdt_c *new_jz_prdt_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_new_jz_prdt INTO :new_jz_prdt_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch new_jz_prdt error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch new_jz_prdt finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(new_jz_prdt_c);

	return 0;
}

int New_jz_prdt_Clo_Sel (){
	EXEC SQL CLOSE sel_new_jz_prdt;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int New_jz_prdt_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,new_jz_prdt.* FROM new_jz_prdt WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE new_jz_prdt_upd FROM :comm;

	EXEC SQL DECLARE upd_new_jz_prdt CURSOR FOR new_jz_prdt_upd;

	EXEC SQL OPEN upd_new_jz_prdt;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open new_jz_prdt error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int New_jz_prdt_Fet_Upd( struct new_jz_prdt_c *new_jz_prdt_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_new_jz_prdt INTO :new_jz_prdt_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd new_jz_prdt error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH new_jz_prdt finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(new_jz_prdt_c);

	return 0;
}

int New_jz_prdt_Upd_Upd( struct new_jz_prdt_c new_jz_prdt_c , char * reply){
	int ret;

	EXEC SQL UPDATE new_jz_prdt SET pact_no=:new_jz_prdt_c.pact_no,
			ac_no=:new_jz_prdt_c.ac_no,
			ac_name=:new_jz_prdt_c.ac_name,
			old_prdt_no=:new_jz_prdt_c.old_prdt_no,
			old_prdt_name=:new_jz_prdt_c.old_prdt_name,
			new_prdt_no=:new_jz_prdt_c.new_prdt_no,
			new_prdt_name=:new_jz_prdt_c.new_prdt_name,
			id_no=:new_jz_prdt_c.id_no,
			bj_amt=:new_jz_prdt_c.bj_amt,
			in_lo_intst=:new_jz_prdt_c.in_lo_intst,
			out_lo_intst=:new_jz_prdt_c.out_lo_intst,
			sts=:new_jz_prdt_c.sts,
			ac_id=:new_jz_prdt_c.ac_id,
			tx_date=:new_jz_prdt_c.tx_date,
			tx_time=:new_jz_prdt_c.tx_time,
			trace_no=:new_jz_prdt_c.trace_no,
			tel=:new_jz_prdt_c.tel,
			tx_br_no=:new_jz_prdt_c.tx_br_no,
			amt1=:new_jz_prdt_c.amt1,
			amt2=:new_jz_prdt_c.amt2,
			code1=:new_jz_prdt_c.code1,
			code2=:new_jz_prdt_c.code2
	WHERE rowid=:new_jz_prdt_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE new_jz_prdt error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int New_jz_prdt_Del_Upd(struct new_jz_prdt_c new_jz_prdt_c , char * reply  ){

	EXEC SQL DELETE FROM new_jz_prdt WHERE rowid=:new_jz_prdt_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE new_jz_prdt error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int New_jz_prdt_Clo_Upd( ){
	EXEC SQL CLOSE upd_new_jz_prdt;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int New_jz_prdt_Ins( struct new_jz_prdt_c new_jz_prdt_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO new_jz_prdt VALUES (:new_jz_prdt_c.pact_no,
			:new_jz_prdt_c.ac_no,
			:new_jz_prdt_c.ac_name,
			:new_jz_prdt_c.old_prdt_no,
			:new_jz_prdt_c.old_prdt_name,
			:new_jz_prdt_c.new_prdt_no,
			:new_jz_prdt_c.new_prdt_name,
			:new_jz_prdt_c.id_no,
			:new_jz_prdt_c.bj_amt,
			:new_jz_prdt_c.in_lo_intst,
			:new_jz_prdt_c.out_lo_intst,
			:new_jz_prdt_c.sts,
			:new_jz_prdt_c.ac_id,
			:new_jz_prdt_c.tx_date,
			:new_jz_prdt_c.tx_time,
			:new_jz_prdt_c.trace_no,
			:new_jz_prdt_c.tel,
			:new_jz_prdt_c.tx_br_no,
			:new_jz_prdt_c.amt1,
			:new_jz_prdt_c.amt2,
			:new_jz_prdt_c.code1,
			:new_jz_prdt_c.code2);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT new_jz_prdt error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT new_jz_prdt error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
