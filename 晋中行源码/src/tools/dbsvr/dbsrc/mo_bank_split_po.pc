#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"mo_bank_split_po_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int mo_bank_split_po_con ( struct mo_bank_split_po_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct mo_bank_split_po_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->pact_no);
	zip_tail(ps->tx_br_no);
	zip_tail(ps->payer_name);
	zip_tail(ps->payer_ac_no);
	zip_tail(ps->payer_br_name);
	zip_tail(ps->payee_name);
	zip_tail(ps->payee_ac_no);
	zip_tail(ps->payee_br_name);
	zip_tail(ps->pnote_no);
	zip_tail(ps->bail_ac_no);
	zip_tail(ps->pay_type);
	zip_tail(ps->sts);
}
int Mo_bank_split_po_Debug(struct mo_bank_split_po_c *ps){
	vtcp_log("mo_bank_split_po_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("mo_bank_split_po_c.pact_no=[%s]\n",ps->pact_no);
	vtcp_log("mo_bank_split_po_c.tx_br_no=[%s]\n",ps->tx_br_no);
	vtcp_log("mo_bank_split_po_c.req_date=[%ld]\n",ps->req_date);
	vtcp_log("mo_bank_split_po_c.payer_name=[%s]\n",ps->payer_name);
	vtcp_log("mo_bank_split_po_c.payer_ac_no=[%s]\n",ps->payer_ac_no);
	vtcp_log("mo_bank_split_po_c.payer_br_name=[%s]\n",ps->payer_br_name);
	vtcp_log("mo_bank_split_po_c.payee_name=[%s]\n",ps->payee_name);
	vtcp_log("mo_bank_split_po_c.payee_ac_no=[%s]\n",ps->payee_ac_no);
	vtcp_log("mo_bank_split_po_c.payee_br_name=[%s]\n",ps->payee_br_name);
	vtcp_log("mo_bank_split_po_c.pnote_no=[%s]\n",ps->pnote_no);
	vtcp_log("mo_bank_split_po_c.par_amt=[%f]\n",ps->par_amt);
	vtcp_log("mo_bank_split_po_c.matr_date=[%ld]\n",ps->matr_date);
	vtcp_log("mo_bank_split_po_c.bail_ac_no=[%s]\n",ps->bail_ac_no);
	vtcp_log("mo_bank_split_po_c.pay_type=[%s]\n",ps->pay_type);
	vtcp_log("mo_bank_split_po_c.sts=[%s]\n",ps->sts);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Mo_bank_split_po_Sel(reply,mo_bank_split_po_c,fmtstr,va_alist)
char    *reply;
struct  mo_bank_split_po_c *mo_bank_split_po_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Mo_bank_split_po_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Mo_bank_split_po_Fet_Sel( mo_bank_split_po_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Mo_bank_split_po_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Mo_bank_split_po_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,mo_bank_split_po.* FROM mo_bank_split_po WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mo_bank_split_po_sel FROM :comm;
	EXEC SQL DECLARE sel_mo_bank_split_po CURSOR FOR mo_bank_split_po_sel;

	EXEC SQL OPEN sel_mo_bank_split_po;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN mo_bank_split_po error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_bank_split_po_Fet_Sel ( struct mo_bank_split_po_c *mo_bank_split_po_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_mo_bank_split_po INTO :mo_bank_split_po_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch mo_bank_split_po error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch mo_bank_split_po finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(mo_bank_split_po_c);

	return 0;
}

int Mo_bank_split_po_Clo_Sel (){
	EXEC SQL CLOSE sel_mo_bank_split_po;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Mo_bank_split_po_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,mo_bank_split_po.* FROM mo_bank_split_po WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mo_bank_split_po_upd FROM :comm;

	EXEC SQL DECLARE upd_mo_bank_split_po CURSOR FOR mo_bank_split_po_upd;

	EXEC SQL OPEN upd_mo_bank_split_po;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open mo_bank_split_po error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_bank_split_po_Fet_Upd( struct mo_bank_split_po_c *mo_bank_split_po_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_mo_bank_split_po INTO :mo_bank_split_po_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd mo_bank_split_po error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH mo_bank_split_po finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(mo_bank_split_po_c);

	return 0;
}

int Mo_bank_split_po_Upd_Upd( struct mo_bank_split_po_c mo_bank_split_po_c , char * reply){
	int ret;

	EXEC SQL UPDATE mo_bank_split_po SET pact_no=:mo_bank_split_po_c.pact_no,
			tx_br_no=:mo_bank_split_po_c.tx_br_no,
			req_date=:mo_bank_split_po_c.req_date,
			payer_name=:mo_bank_split_po_c.payer_name,
			payer_ac_no=:mo_bank_split_po_c.payer_ac_no,
			payer_br_name=:mo_bank_split_po_c.payer_br_name,
			payee_name=:mo_bank_split_po_c.payee_name,
			payee_ac_no=:mo_bank_split_po_c.payee_ac_no,
			payee_br_name=:mo_bank_split_po_c.payee_br_name,
			pnote_no=:mo_bank_split_po_c.pnote_no,
			par_amt=:mo_bank_split_po_c.par_amt,
			matr_date=:mo_bank_split_po_c.matr_date,
			bail_ac_no=:mo_bank_split_po_c.bail_ac_no,
			pay_type=:mo_bank_split_po_c.pay_type,
			sts=:mo_bank_split_po_c.sts
	WHERE rowid=:mo_bank_split_po_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE mo_bank_split_po error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Mo_bank_split_po_Del_Upd(struct mo_bank_split_po_c mo_bank_split_po_c , char * reply  ){

	EXEC SQL DELETE FROM mo_bank_split_po WHERE rowid=:mo_bank_split_po_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE mo_bank_split_po error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_bank_split_po_Clo_Upd( ){
	EXEC SQL CLOSE upd_mo_bank_split_po;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Mo_bank_split_po_Ins( struct mo_bank_split_po_c mo_bank_split_po_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO mo_bank_split_po VALUES (:mo_bank_split_po_c.pact_no,
			:mo_bank_split_po_c.tx_br_no,
			:mo_bank_split_po_c.req_date,
			:mo_bank_split_po_c.payer_name,
			:mo_bank_split_po_c.payer_ac_no,
			:mo_bank_split_po_c.payer_br_name,
			:mo_bank_split_po_c.payee_name,
			:mo_bank_split_po_c.payee_ac_no,
			:mo_bank_split_po_c.payee_br_name,
			:mo_bank_split_po_c.pnote_no,
			:mo_bank_split_po_c.par_amt,
			:mo_bank_split_po_c.matr_date,
			:mo_bank_split_po_c.bail_ac_no,
			:mo_bank_split_po_c.pay_type,
			:mo_bank_split_po_c.sts);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT mo_bank_split_po error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT mo_bank_split_po error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
