#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"pos_fee_mst_hst_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int pos_fee_mst_hst_con ( struct pos_fee_mst_hst_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct pos_fee_mst_hst_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->area_code);
	zip_tail(ps->deal_sign);
	zip_tail(ps->deal_msg);
}
int Pos_fee_mst_hst_Debug(struct pos_fee_mst_hst_c *ps){
	vtcp_log("pos_fee_mst_hst_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("pos_fee_mst_hst_c.area_code=[%s]\n",ps->area_code);
	vtcp_log("pos_fee_mst_hst_c.tx_date=[%ld]\n",ps->tx_date);
	vtcp_log("pos_fee_mst_hst_c.tx_cnt=[%ld]\n",ps->tx_cnt);
	vtcp_log("pos_fee_mst_hst_c.tx_amt=[%f]\n",ps->tx_amt);
	vtcp_log("pos_fee_mst_hst_c.dr_amt=[%f]\n",ps->dr_amt);
	vtcp_log("pos_fee_mst_hst_c.cr_amt=[%f]\n",ps->cr_amt);
	vtcp_log("pos_fee_mst_hst_c.n_cr_amt=[%f]\n",ps->n_cr_amt);
	vtcp_log("pos_fee_mst_hst_c.adjust_dr_amt=[%f]\n",ps->adjust_dr_amt);
	vtcp_log("pos_fee_mst_hst_c.adjust_cr_amt=[%f]\n",ps->adjust_cr_amt);
	vtcp_log("pos_fee_mst_hst_c.succ_num=[%ld]\n",ps->succ_num);
	vtcp_log("pos_fee_mst_hst_c.mater_amt=[%f]\n",ps->mater_amt);
	vtcp_log("pos_fee_mst_hst_c.clr_amt=[%f]\n",ps->clr_amt);
	vtcp_log("pos_fee_mst_hst_c.settle_date=[%ld]\n",ps->settle_date);
	vtcp_log("pos_fee_mst_hst_c.deal_sign=[%s]\n",ps->deal_sign);
	vtcp_log("pos_fee_mst_hst_c.deal_msg=[%s]\n",ps->deal_msg);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Pos_fee_mst_hst_Sel(reply,pos_fee_mst_hst_c,fmtstr,va_alist)
char    *reply;
struct  pos_fee_mst_hst_c *pos_fee_mst_hst_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Pos_fee_mst_hst_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Pos_fee_mst_hst_Fet_Sel( pos_fee_mst_hst_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Pos_fee_mst_hst_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Pos_fee_mst_hst_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,pos_fee_mst_hst.* FROM pos_fee_mst_hst WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE pos_fee_mst_hst_sel FROM :comm;
	EXEC SQL DECLARE sel_pos_fee_mst_hst CURSOR FOR pos_fee_mst_hst_sel;

	EXEC SQL OPEN sel_pos_fee_mst_hst;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN pos_fee_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Pos_fee_mst_hst_Fet_Sel ( struct pos_fee_mst_hst_c *pos_fee_mst_hst_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_pos_fee_mst_hst INTO :pos_fee_mst_hst_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch pos_fee_mst_hst error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch pos_fee_mst_hst finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(pos_fee_mst_hst_c);

	return 0;
}

int Pos_fee_mst_hst_Clo_Sel (){
	EXEC SQL CLOSE sel_pos_fee_mst_hst;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Pos_fee_mst_hst_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,pos_fee_mst_hst.* FROM pos_fee_mst_hst WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE pos_fee_mst_hst_upd FROM :comm;

	EXEC SQL DECLARE upd_pos_fee_mst_hst CURSOR FOR pos_fee_mst_hst_upd;

	EXEC SQL OPEN upd_pos_fee_mst_hst;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open pos_fee_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Pos_fee_mst_hst_Fet_Upd( struct pos_fee_mst_hst_c *pos_fee_mst_hst_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_pos_fee_mst_hst INTO :pos_fee_mst_hst_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd pos_fee_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH pos_fee_mst_hst finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(pos_fee_mst_hst_c);

	return 0;
}

int Pos_fee_mst_hst_Upd_Upd( struct pos_fee_mst_hst_c pos_fee_mst_hst_c , char * reply){
	int ret;

	EXEC SQL UPDATE pos_fee_mst_hst SET area_code=:pos_fee_mst_hst_c.area_code,
			tx_date=:pos_fee_mst_hst_c.tx_date,
			tx_cnt=:pos_fee_mst_hst_c.tx_cnt,
			tx_amt=:pos_fee_mst_hst_c.tx_amt,
			dr_amt=:pos_fee_mst_hst_c.dr_amt,
			cr_amt=:pos_fee_mst_hst_c.cr_amt,
			n_cr_amt=:pos_fee_mst_hst_c.n_cr_amt,
			adjust_dr_amt=:pos_fee_mst_hst_c.adjust_dr_amt,
			adjust_cr_amt=:pos_fee_mst_hst_c.adjust_cr_amt,
			succ_num=:pos_fee_mst_hst_c.succ_num,
			mater_amt=:pos_fee_mst_hst_c.mater_amt,
			clr_amt=:pos_fee_mst_hst_c.clr_amt,
			settle_date=:pos_fee_mst_hst_c.settle_date,
			deal_sign=:pos_fee_mst_hst_c.deal_sign,
			deal_msg=:pos_fee_mst_hst_c.deal_msg
	WHERE rowid=:pos_fee_mst_hst_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE pos_fee_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Pos_fee_mst_hst_Del_Upd(struct pos_fee_mst_hst_c pos_fee_mst_hst_c , char * reply  ){

	EXEC SQL DELETE FROM pos_fee_mst_hst WHERE rowid=:pos_fee_mst_hst_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE pos_fee_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Pos_fee_mst_hst_Clo_Upd( ){
	EXEC SQL CLOSE upd_pos_fee_mst_hst;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Pos_fee_mst_hst_Ins( struct pos_fee_mst_hst_c pos_fee_mst_hst_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO pos_fee_mst_hst VALUES (:pos_fee_mst_hst_c.area_code,
			:pos_fee_mst_hst_c.tx_date,
			:pos_fee_mst_hst_c.tx_cnt,
			:pos_fee_mst_hst_c.tx_amt,
			:pos_fee_mst_hst_c.dr_amt,
			:pos_fee_mst_hst_c.cr_amt,
			:pos_fee_mst_hst_c.n_cr_amt,
			:pos_fee_mst_hst_c.adjust_dr_amt,
			:pos_fee_mst_hst_c.adjust_cr_amt,
			:pos_fee_mst_hst_c.succ_num,
			:pos_fee_mst_hst_c.mater_amt,
			:pos_fee_mst_hst_c.clr_amt,
			:pos_fee_mst_hst_c.settle_date,
			:pos_fee_mst_hst_c.deal_sign,
			:pos_fee_mst_hst_c.deal_msg);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT pos_fee_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT pos_fee_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
