#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"hv_poinfo_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int hv_poinfo_con ( struct hv_poinfo_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct hv_poinfo_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->po_no);
	zip_tail(ps->br_no);
	zip_tail(ps->bank_type);
	zip_tail(ps->or_br_no);
	zip_tail(ps->pay_qs_no);
	zip_tail(ps->note_type);
	zip_tail(ps->note_no);
	zip_tail(ps->o_note_type);
	zip_tail(ps->o_note_no);
	zip_tail(ps->cur_id);
	zip_tail(ps->pay_br_no);
	zip_tail(ps->pay_ac_no);
	zip_tail(ps->pay_name);
	zip_tail(ps->pay_br_name);
	zip_tail(ps->pay_addr);
	zip_tail(ps->cash_ac_no);
	zip_tail(ps->cash_br_no);
	zip_tail(ps->cash_br_name);
	zip_tail(ps->cash_addr);
	zip_tail(ps->cash_name);
	zip_tail(ps->hold_ac_no);
	zip_tail(ps->hold_name);
	zip_tail(ps->l_po_sts);
	zip_tail(ps->po_sts);
	zip_tail(ps->pwd);
	zip_tail(ps->po_ind);
	zip_tail(ps->deal_mode);
	zip_tail(ps->drsubject);
	zip_tail(ps->crsubject);
	zip_tail(ps->content);
	zip_tail(ps->tx_chrg_type);
	zip_tail(ps->checkflag);
	zip_tail(ps->op_tel);
	zip_tail(ps->chk_tel);
	zip_tail(ps->pass_tel);
	zip_tail(ps->add_pwd_ind);
	zip_tail(ps->brf);
}
int Hv_poinfo_Debug(struct hv_poinfo_c *ps){
	vtcp_log("hv_poinfo_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("hv_poinfo_c.po_no=[%s]\n",ps->po_no);
	vtcp_log("hv_poinfo_c.br_no=[%s]\n",ps->br_no);
	vtcp_log("hv_poinfo_c.bank_type=[%s]\n",ps->bank_type);
	vtcp_log("hv_poinfo_c.or_br_no=[%s]\n",ps->or_br_no);
	vtcp_log("hv_poinfo_c.pay_qs_no=[%s]\n",ps->pay_qs_no);
	vtcp_log("hv_poinfo_c.l_tx_date=[%ld]\n",ps->l_tx_date);
	vtcp_log("hv_poinfo_c.td_cnt=[%ld]\n",ps->td_cnt);
	vtcp_log("hv_poinfo_c.lost_cnt=[%ld]\n",ps->lost_cnt);
	vtcp_log("hv_poinfo_c.note_type=[%s]\n",ps->note_type);
	vtcp_log("hv_poinfo_c.note_no=[%s]\n",ps->note_no);
	vtcp_log("hv_poinfo_c.o_note_type=[%s]\n",ps->o_note_type);
	vtcp_log("hv_poinfo_c.o_note_no=[%s]\n",ps->o_note_no);
	vtcp_log("hv_poinfo_c.po_bal=[%f]\n",ps->po_bal);
	vtcp_log("hv_poinfo_c.cash_amt=[%f]\n",ps->cash_amt);
	vtcp_log("hv_poinfo_c.fee_amt=[%f]\n",ps->fee_amt);
	vtcp_log("hv_poinfo_c.rem_amt=[%f]\n",ps->rem_amt);
	vtcp_log("hv_poinfo_c.cur_id=[%s]\n",ps->cur_id);
	vtcp_log("hv_poinfo_c.pay_br_no=[%s]\n",ps->pay_br_no);
	vtcp_log("hv_poinfo_c.pay_ac_no=[%s]\n",ps->pay_ac_no);
	vtcp_log("hv_poinfo_c.pay_name=[%s]\n",ps->pay_name);
	vtcp_log("hv_poinfo_c.pay_br_name=[%s]\n",ps->pay_br_name);
	vtcp_log("hv_poinfo_c.pay_addr=[%s]\n",ps->pay_addr);
	vtcp_log("hv_poinfo_c.cash_ac_no=[%s]\n",ps->cash_ac_no);
	vtcp_log("hv_poinfo_c.cash_br_no=[%s]\n",ps->cash_br_no);
	vtcp_log("hv_poinfo_c.cash_br_name=[%s]\n",ps->cash_br_name);
	vtcp_log("hv_poinfo_c.cash_addr=[%s]\n",ps->cash_addr);
	vtcp_log("hv_poinfo_c.cash_name=[%s]\n",ps->cash_name);
	vtcp_log("hv_poinfo_c.hold_ac_no=[%s]\n",ps->hold_ac_no);
	vtcp_log("hv_poinfo_c.hold_name=[%s]\n",ps->hold_name);
	vtcp_log("hv_poinfo_c.l_po_sts=[%s]\n",ps->l_po_sts);
	vtcp_log("hv_poinfo_c.po_sts=[%s]\n",ps->po_sts);
	vtcp_log("hv_poinfo_c.reg_date=[%ld]\n",ps->reg_date);
	vtcp_log("hv_poinfo_c.sign_date=[%ld]\n",ps->sign_date);
	vtcp_log("hv_poinfo_c.pay_date=[%ld]\n",ps->pay_date);
	vtcp_log("hv_poinfo_c.pwd=[%s]\n",ps->pwd);
	vtcp_log("hv_poinfo_c.po_ind=[%s]\n",ps->po_ind);
	vtcp_log("hv_poinfo_c.deal_mode=[%s]\n",ps->deal_mode);
	vtcp_log("hv_poinfo_c.drsubject=[%s]\n",ps->drsubject);
	vtcp_log("hv_poinfo_c.crsubject=[%s]\n",ps->crsubject);
	vtcp_log("hv_poinfo_c.content=[%s]\n",ps->content);
	vtcp_log("hv_poinfo_c.tx_chrg_type=[%s]\n",ps->tx_chrg_type);
	vtcp_log("hv_poinfo_c.checkflag=[%s]\n",ps->checkflag);
	vtcp_log("hv_poinfo_c.op_tel=[%s]\n",ps->op_tel);
	vtcp_log("hv_poinfo_c.chk_tel=[%s]\n",ps->chk_tel);
	vtcp_log("hv_poinfo_c.pass_tel=[%s]\n",ps->pass_tel);
	vtcp_log("hv_poinfo_c.add_pwd_ind=[%s]\n",ps->add_pwd_ind);
	vtcp_log("hv_poinfo_c.brf=[%s]\n",ps->brf);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Hv_poinfo_Sel(reply,hv_poinfo_c,fmtstr,va_alist)
char    *reply;
struct  hv_poinfo_c *hv_poinfo_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Hv_poinfo_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Hv_poinfo_Fet_Sel( hv_poinfo_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Hv_poinfo_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Hv_poinfo_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,hv_poinfo.* FROM hv_poinfo WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE hv_poinfo_sel FROM :comm;
	EXEC SQL DECLARE sel_hv_poinfo CURSOR FOR hv_poinfo_sel;

	EXEC SQL OPEN sel_hv_poinfo;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN hv_poinfo error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Hv_poinfo_Fet_Sel ( struct hv_poinfo_c *hv_poinfo_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_hv_poinfo INTO :hv_poinfo_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch hv_poinfo error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch hv_poinfo finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(hv_poinfo_c);

	return 0;
}

int Hv_poinfo_Clo_Sel (){
	EXEC SQL CLOSE sel_hv_poinfo;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Hv_poinfo_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,hv_poinfo.* FROM hv_poinfo WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE hv_poinfo_upd FROM :comm;

	EXEC SQL DECLARE upd_hv_poinfo CURSOR FOR hv_poinfo_upd;

	EXEC SQL OPEN upd_hv_poinfo;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open hv_poinfo error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Hv_poinfo_Fet_Upd( struct hv_poinfo_c *hv_poinfo_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_hv_poinfo INTO :hv_poinfo_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd hv_poinfo error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH hv_poinfo finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(hv_poinfo_c);

	return 0;
}

int Hv_poinfo_Upd_Upd( struct hv_poinfo_c hv_poinfo_c , char * reply){
	int ret;

	EXEC SQL UPDATE hv_poinfo SET po_no=:hv_poinfo_c.po_no,
			br_no=:hv_poinfo_c.br_no,
			bank_type=:hv_poinfo_c.bank_type,
			or_br_no=:hv_poinfo_c.or_br_no,
			pay_qs_no=:hv_poinfo_c.pay_qs_no,
			l_tx_date=:hv_poinfo_c.l_tx_date,
			td_cnt=:hv_poinfo_c.td_cnt,
			lost_cnt=:hv_poinfo_c.lost_cnt,
			note_type=:hv_poinfo_c.note_type,
			note_no=:hv_poinfo_c.note_no,
			o_note_type=:hv_poinfo_c.o_note_type,
			o_note_no=:hv_poinfo_c.o_note_no,
			po_bal=:hv_poinfo_c.po_bal,
			cash_amt=:hv_poinfo_c.cash_amt,
			fee_amt=:hv_poinfo_c.fee_amt,
			rem_amt=:hv_poinfo_c.rem_amt,
			cur_id=:hv_poinfo_c.cur_id,
			pay_br_no=:hv_poinfo_c.pay_br_no,
			pay_ac_no=:hv_poinfo_c.pay_ac_no,
			pay_name=:hv_poinfo_c.pay_name,
			pay_br_name=:hv_poinfo_c.pay_br_name,
			pay_addr=:hv_poinfo_c.pay_addr,
			cash_ac_no=:hv_poinfo_c.cash_ac_no,
			cash_br_no=:hv_poinfo_c.cash_br_no,
			cash_br_name=:hv_poinfo_c.cash_br_name,
			cash_addr=:hv_poinfo_c.cash_addr,
			cash_name=:hv_poinfo_c.cash_name,
			hold_ac_no=:hv_poinfo_c.hold_ac_no,
			hold_name=:hv_poinfo_c.hold_name,
			l_po_sts=:hv_poinfo_c.l_po_sts,
			po_sts=:hv_poinfo_c.po_sts,
			reg_date=:hv_poinfo_c.reg_date,
			sign_date=:hv_poinfo_c.sign_date,
			pay_date=:hv_poinfo_c.pay_date,
			pwd=:hv_poinfo_c.pwd,
			po_ind=:hv_poinfo_c.po_ind,
			deal_mode=:hv_poinfo_c.deal_mode,
			drsubject=:hv_poinfo_c.drsubject,
			crsubject=:hv_poinfo_c.crsubject,
			content=:hv_poinfo_c.content,
			tx_chrg_type=:hv_poinfo_c.tx_chrg_type,
			checkflag=:hv_poinfo_c.checkflag,
			op_tel=:hv_poinfo_c.op_tel,
			chk_tel=:hv_poinfo_c.chk_tel,
			pass_tel=:hv_poinfo_c.pass_tel,
			add_pwd_ind=:hv_poinfo_c.add_pwd_ind,
			brf=:hv_poinfo_c.brf
	WHERE rowid=:hv_poinfo_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE hv_poinfo error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Hv_poinfo_Del_Upd(struct hv_poinfo_c hv_poinfo_c , char * reply  ){

	EXEC SQL DELETE FROM hv_poinfo WHERE rowid=:hv_poinfo_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE hv_poinfo error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Hv_poinfo_Clo_Upd( ){
	EXEC SQL CLOSE upd_hv_poinfo;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Hv_poinfo_Ins( struct hv_poinfo_c hv_poinfo_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO hv_poinfo VALUES (:hv_poinfo_c.po_no,
			:hv_poinfo_c.br_no,
			:hv_poinfo_c.bank_type,
			:hv_poinfo_c.or_br_no,
			:hv_poinfo_c.pay_qs_no,
			:hv_poinfo_c.l_tx_date,
			:hv_poinfo_c.td_cnt,
			:hv_poinfo_c.lost_cnt,
			:hv_poinfo_c.note_type,
			:hv_poinfo_c.note_no,
			:hv_poinfo_c.o_note_type,
			:hv_poinfo_c.o_note_no,
			:hv_poinfo_c.po_bal,
			:hv_poinfo_c.cash_amt,
			:hv_poinfo_c.fee_amt,
			:hv_poinfo_c.rem_amt,
			:hv_poinfo_c.cur_id,
			:hv_poinfo_c.pay_br_no,
			:hv_poinfo_c.pay_ac_no,
			:hv_poinfo_c.pay_name,
			:hv_poinfo_c.pay_br_name,
			:hv_poinfo_c.pay_addr,
			:hv_poinfo_c.cash_ac_no,
			:hv_poinfo_c.cash_br_no,
			:hv_poinfo_c.cash_br_name,
			:hv_poinfo_c.cash_addr,
			:hv_poinfo_c.cash_name,
			:hv_poinfo_c.hold_ac_no,
			:hv_poinfo_c.hold_name,
			:hv_poinfo_c.l_po_sts,
			:hv_poinfo_c.po_sts,
			:hv_poinfo_c.reg_date,
			:hv_poinfo_c.sign_date,
			:hv_poinfo_c.pay_date,
			:hv_poinfo_c.pwd,
			:hv_poinfo_c.po_ind,
			:hv_poinfo_c.deal_mode,
			:hv_poinfo_c.drsubject,
			:hv_poinfo_c.crsubject,
			:hv_poinfo_c.content,
			:hv_poinfo_c.tx_chrg_type,
			:hv_poinfo_c.checkflag,
			:hv_poinfo_c.op_tel,
			:hv_poinfo_c.chk_tel,
			:hv_poinfo_c.pass_tel,
			:hv_poinfo_c.add_pwd_ind,
			:hv_poinfo_c.brf);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT hv_poinfo error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT hv_poinfo error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
