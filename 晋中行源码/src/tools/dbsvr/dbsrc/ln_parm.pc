#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"ln_parm_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int ln_parm_con ( struct ln_parm_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct ln_parm_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->prdt_no);
	zip_tail(ps->title);
	zip_tail(ps->cif_type);
	zip_tail(ps->cur_no);
	zip_tail(ps->time_type);
	zip_tail(ps->term_type);
	zip_tail(ps->intst_days_type);
	zip_tail(ps->intst_type);
	zip_tail(ps->rate_no);
	zip_tail(ps->get_rate_type);
	zip_tail(ps->over_rate_type);
	zip_tail(ps->over_rate_no);
	zip_tail(ps->fine_rate_type);
	zip_tail(ps->fine_rate_no);
	zip_tail(ps->exp_ind);
	zip_tail(ps->intst_use_ind);
	zip_tail(ps->cmpd_intst_ind);
	zip_tail(ps->cmpd_intst_type);
	zip_tail(ps->ac_sts);
	zip_tail(ps->auto_cls);
	zip_tail(ps->prm_chrg_ind);
	zip_tail(ps->prm_chrg_type);
	zip_tail(ps->prm_chrg_no);
	zip_tail(ps->fdrp_chrg_ind);
	zip_tail(ps->fdrp_chrg_type);
	zip_tail(ps->fdrp_chrg_no);
	zip_tail(ps->holi_ind);
	zip_tail(ps->int_type);
	zip_tail(ps->pay_pln_type);
	zip_tail(ps->ln_pay_type);
	zip_tail(ps->pay_pln_crt);
	zip_tail(ps->pay_term_type);
	zip_tail(ps->fst_pay_ind);
	zip_tail(ps->fst_pay_ints_ind);
	zip_tail(ps->intst_recalc_ind);
	zip_tail(ps->intst_recalc_type);
	zip_tail(ps->fwdrp_recalc_ind);
	zip_tail(ps->fwdrp_recalc_type);
	zip_tail(ps->intst_chg_mtr);
	zip_tail(ps->repay_chg_mtr);
	zip_tail(ps->contln_type);
	zip_tail(ps->trust_prot_ind);
	zip_tail(ps->ln_type);
	zip_tail(ps->turn_ill_ind);
	zip_tail(ps->repay_ind);
	zip_tail(ps->auto_pay_ind);
	zip_tail(ps->pay_seq_code);
	zip_tail(ps->dc_code);
	zip_tail(ps->over_dc_code);
	zip_tail(ps->sla_dc_code);
	zip_tail(ps->bad_dc_code);
	zip_tail(ps->over90_dc_code);
	zip_tail(ps->filler);
}
int Ln_parm_Debug(struct ln_parm_c *ps){
	vtcp_log("ln_parm_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("ln_parm_c.prdt_no=[%s]\n",ps->prdt_no);
	vtcp_log("ln_parm_c.title=[%s]\n",ps->title);
	vtcp_log("ln_parm_c.beg_date=[%ld]\n",ps->beg_date);
	vtcp_log("ln_parm_c.end_date=[%ld]\n",ps->end_date);
	vtcp_log("ln_parm_c.cif_type=[%s]\n",ps->cif_type);
	vtcp_log("ln_parm_c.cur_no=[%s]\n",ps->cur_no);
	vtcp_log("ln_parm_c.time_type=[%s]\n",ps->time_type);
	vtcp_log("ln_parm_c.min_term=[%ld]\n",ps->min_term);
	vtcp_log("ln_parm_c.max_term=[%ld]\n",ps->max_term);
	vtcp_log("ln_parm_c.term_type=[%s]\n",ps->term_type);
	vtcp_log("ln_parm_c.min_bal=[%f]\n",ps->min_bal);
	vtcp_log("ln_parm_c.max_bal=[%f]\n",ps->max_bal);
	vtcp_log("ln_parm_c.intst_days_type=[%s]\n",ps->intst_days_type);
	vtcp_log("ln_parm_c.intst_type=[%s]\n",ps->intst_type);
	vtcp_log("ln_parm_c.rate_no=[%s]\n",ps->rate_no);
	vtcp_log("ln_parm_c.get_rate_type=[%s]\n",ps->get_rate_type);
	vtcp_log("ln_parm_c.over_rate_type=[%s]\n",ps->over_rate_type);
	vtcp_log("ln_parm_c.over_rate_no=[%s]\n",ps->over_rate_no);
	vtcp_log("ln_parm_c.min_flt_ratio=[%ld]\n",ps->min_flt_ratio);
	vtcp_log("ln_parm_c.max_flt_ratio=[%ld]\n",ps->max_flt_ratio);
	vtcp_log("ln_parm_c.over_rate_min=[%ld]\n",ps->over_rate_min);
	vtcp_log("ln_parm_c.over_rate_max=[%ld]\n",ps->over_rate_max);
	vtcp_log("ln_parm_c.over_rate_def=[%ld]\n",ps->over_rate_def);
	vtcp_log("ln_parm_c.fine_rate_type=[%s]\n",ps->fine_rate_type);
	vtcp_log("ln_parm_c.fine_rate_no=[%s]\n",ps->fine_rate_no);
	vtcp_log("ln_parm_c.fine_rate_min=[%ld]\n",ps->fine_rate_min);
	vtcp_log("ln_parm_c.fine_rate_max=[%ld]\n",ps->fine_rate_max);
	vtcp_log("ln_parm_c.fine_rate_def=[%ld]\n",ps->fine_rate_def);
	vtcp_log("ln_parm_c.exp_ind=[%s]\n",ps->exp_ind);
	vtcp_log("ln_parm_c.intst_use_ind=[%s]\n",ps->intst_use_ind);
	vtcp_log("ln_parm_c.min_intst=[%f]\n",ps->min_intst);
	vtcp_log("ln_parm_c.cmpd_intst_ind=[%s]\n",ps->cmpd_intst_ind);
	vtcp_log("ln_parm_c.cmpd_intst_type=[%s]\n",ps->cmpd_intst_type);
	vtcp_log("ln_parm_c.ac_sts=[%s]\n",ps->ac_sts);
	vtcp_log("ln_parm_c.auto_cls=[%s]\n",ps->auto_cls);
	vtcp_log("ln_parm_c.prm_chrg_ind=[%s]\n",ps->prm_chrg_ind);
	vtcp_log("ln_parm_c.prm_chrg_type=[%s]\n",ps->prm_chrg_type);
	vtcp_log("ln_parm_c.prm_chrg_no=[%s]\n",ps->prm_chrg_no);
	vtcp_log("ln_parm_c.fdrp_inf_days=[%ld]\n",ps->fdrp_inf_days);
	vtcp_log("ln_parm_c.fdrq_lmt_amt=[%f]\n",ps->fdrq_lmt_amt);
	vtcp_log("ln_parm_c.fdrp_chrg_ind=[%s]\n",ps->fdrp_chrg_ind);
	vtcp_log("ln_parm_c.fdrp_chrg_type=[%s]\n",ps->fdrp_chrg_type);
	vtcp_log("ln_parm_c.fdrp_chrg_no=[%s]\n",ps->fdrp_chrg_no);
	vtcp_log("ln_parm_c.fdrp_chrg_term=[%ld]\n",ps->fdrp_chrg_term);
	vtcp_log("ln_parm_c.holi_ind=[%s]\n",ps->holi_ind);
	vtcp_log("ln_parm_c.int_type=[%s]\n",ps->int_type);
	vtcp_log("ln_parm_c.int_unit=[%ld]\n",ps->int_unit);
	vtcp_log("ln_parm_c.pay_pln_type=[%s]\n",ps->pay_pln_type);
	vtcp_log("ln_parm_c.ln_pay_type=[%s]\n",ps->ln_pay_type);
	vtcp_log("ln_parm_c.pay_pln_crt=[%s]\n",ps->pay_pln_crt);
	vtcp_log("ln_parm_c.pay_term_type=[%s]\n",ps->pay_term_type);
	vtcp_log("ln_parm_c.pay_amt_term=[%ld]\n",ps->pay_amt_term);
	vtcp_log("ln_parm_c.fst_pay_ind=[%s]\n",ps->fst_pay_ind);
	vtcp_log("ln_parm_c.fst_pay_day=[%ld]\n",ps->fst_pay_day);
	vtcp_log("ln_parm_c.mon_pay_day=[%ld]\n",ps->mon_pay_day);
	vtcp_log("ln_parm_c.fst_pay_ints_ind=[%s]\n",ps->fst_pay_ints_ind);
	vtcp_log("ln_parm_c.fst_pay_ints_day=[%ld]\n",ps->fst_pay_ints_day);
	vtcp_log("ln_parm_c.intst_recalc_ind=[%s]\n",ps->intst_recalc_ind);
	vtcp_log("ln_parm_c.intst_recalc_type=[%s]\n",ps->intst_recalc_type);
	vtcp_log("ln_parm_c.fwdrp_recalc_ind=[%s]\n",ps->fwdrp_recalc_ind);
	vtcp_log("ln_parm_c.fwdrp_recalc_type=[%s]\n",ps->fwdrp_recalc_type);
	vtcp_log("ln_parm_c.intst_chg_mtr=[%s]\n",ps->intst_chg_mtr);
	vtcp_log("ln_parm_c.repay_chg_mtr=[%s]\n",ps->repay_chg_mtr);
	vtcp_log("ln_parm_c.contln_type=[%s]\n",ps->contln_type);
	vtcp_log("ln_parm_c.trust_prot_ind=[%s]\n",ps->trust_prot_ind);
	vtcp_log("ln_parm_c.ln_type=[%s]\n",ps->ln_type);
	vtcp_log("ln_parm_c.turn_ill_ind=[%s]\n",ps->turn_ill_ind);
	vtcp_log("ln_parm_c.turn_ill_term=[%ld]\n",ps->turn_ill_term);
	vtcp_log("ln_parm_c.repay_ind=[%s]\n",ps->repay_ind);
	vtcp_log("ln_parm_c.auto_pay_ind=[%s]\n",ps->auto_pay_ind);
	vtcp_log("ln_parm_c.pay_seq_code=[%s]\n",ps->pay_seq_code);
	vtcp_log("ln_parm_c.opn_lmt=[%ld]\n",ps->opn_lmt);
	vtcp_log("ln_parm_c.cls_lmt=[%ld]\n",ps->cls_lmt);
	vtcp_log("ln_parm_c.dc_code=[%s]\n",ps->dc_code);
	vtcp_log("ln_parm_c.over_dc_code=[%s]\n",ps->over_dc_code);
	vtcp_log("ln_parm_c.sla_dc_code=[%s]\n",ps->sla_dc_code);
	vtcp_log("ln_parm_c.bad_dc_code=[%s]\n",ps->bad_dc_code);
	vtcp_log("ln_parm_c.over90_dc_code=[%s]\n",ps->over90_dc_code);
	vtcp_log("ln_parm_c.filler=[%s]\n",ps->filler);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Ln_parm_Sel(reply,ln_parm_c,fmtstr,va_alist)
char    *reply;
struct  ln_parm_c *ln_parm_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Ln_parm_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Ln_parm_Fet_Sel( ln_parm_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Ln_parm_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Ln_parm_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,ln_parm.* FROM ln_parm WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE ln_parm_sel FROM :comm;
	EXEC SQL DECLARE sel_ln_parm CURSOR FOR ln_parm_sel;

	EXEC SQL OPEN sel_ln_parm;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN ln_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Ln_parm_Fet_Sel ( struct ln_parm_c *ln_parm_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_ln_parm INTO :ln_parm_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch ln_parm error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch ln_parm finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(ln_parm_c);

	return 0;
}

int Ln_parm_Clo_Sel (){
	EXEC SQL CLOSE sel_ln_parm;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Ln_parm_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,ln_parm.* FROM ln_parm WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE ln_parm_upd FROM :comm;

	EXEC SQL DECLARE upd_ln_parm CURSOR FOR ln_parm_upd;

	EXEC SQL OPEN upd_ln_parm;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open ln_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Ln_parm_Fet_Upd( struct ln_parm_c *ln_parm_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_ln_parm INTO :ln_parm_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd ln_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH ln_parm finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(ln_parm_c);

	return 0;
}

int Ln_parm_Upd_Upd( struct ln_parm_c ln_parm_c , char * reply){
	int ret;

	EXEC SQL UPDATE ln_parm SET prdt_no=:ln_parm_c.prdt_no,
			title=:ln_parm_c.title,
			beg_date=:ln_parm_c.beg_date,
			end_date=:ln_parm_c.end_date,
			cif_type=:ln_parm_c.cif_type,
			cur_no=:ln_parm_c.cur_no,
			time_type=:ln_parm_c.time_type,
			min_term=:ln_parm_c.min_term,
			max_term=:ln_parm_c.max_term,
			term_type=:ln_parm_c.term_type,
			min_bal=:ln_parm_c.min_bal,
			max_bal=:ln_parm_c.max_bal,
			intst_days_type=:ln_parm_c.intst_days_type,
			intst_type=:ln_parm_c.intst_type,
			rate_no=:ln_parm_c.rate_no,
			get_rate_type=:ln_parm_c.get_rate_type,
			over_rate_type=:ln_parm_c.over_rate_type,
			over_rate_no=:ln_parm_c.over_rate_no,
			min_flt_ratio=:ln_parm_c.min_flt_ratio,
			max_flt_ratio=:ln_parm_c.max_flt_ratio,
			over_rate_min=:ln_parm_c.over_rate_min,
			over_rate_max=:ln_parm_c.over_rate_max,
			over_rate_def=:ln_parm_c.over_rate_def,
			fine_rate_type=:ln_parm_c.fine_rate_type,
			fine_rate_no=:ln_parm_c.fine_rate_no,
			fine_rate_min=:ln_parm_c.fine_rate_min,
			fine_rate_max=:ln_parm_c.fine_rate_max,
			fine_rate_def=:ln_parm_c.fine_rate_def,
			exp_ind=:ln_parm_c.exp_ind,
			intst_use_ind=:ln_parm_c.intst_use_ind,
			min_intst=:ln_parm_c.min_intst,
			cmpd_intst_ind=:ln_parm_c.cmpd_intst_ind,
			cmpd_intst_type=:ln_parm_c.cmpd_intst_type,
			ac_sts=:ln_parm_c.ac_sts,
			auto_cls=:ln_parm_c.auto_cls,
			prm_chrg_ind=:ln_parm_c.prm_chrg_ind,
			prm_chrg_type=:ln_parm_c.prm_chrg_type,
			prm_chrg_no=:ln_parm_c.prm_chrg_no,
			fdrp_inf_days=:ln_parm_c.fdrp_inf_days,
			fdrq_lmt_amt=:ln_parm_c.fdrq_lmt_amt,
			fdrp_chrg_ind=:ln_parm_c.fdrp_chrg_ind,
			fdrp_chrg_type=:ln_parm_c.fdrp_chrg_type,
			fdrp_chrg_no=:ln_parm_c.fdrp_chrg_no,
			fdrp_chrg_term=:ln_parm_c.fdrp_chrg_term,
			holi_ind=:ln_parm_c.holi_ind,
			int_type=:ln_parm_c.int_type,
			int_unit=:ln_parm_c.int_unit,
			pay_pln_type=:ln_parm_c.pay_pln_type,
			ln_pay_type=:ln_parm_c.ln_pay_type,
			pay_pln_crt=:ln_parm_c.pay_pln_crt,
			pay_term_type=:ln_parm_c.pay_term_type,
			pay_amt_term=:ln_parm_c.pay_amt_term,
			fst_pay_ind=:ln_parm_c.fst_pay_ind,
			fst_pay_day=:ln_parm_c.fst_pay_day,
			mon_pay_day=:ln_parm_c.mon_pay_day,
			fst_pay_ints_ind=:ln_parm_c.fst_pay_ints_ind,
			fst_pay_ints_day=:ln_parm_c.fst_pay_ints_day,
			intst_recalc_ind=:ln_parm_c.intst_recalc_ind,
			intst_recalc_type=:ln_parm_c.intst_recalc_type,
			fwdrp_recalc_ind=:ln_parm_c.fwdrp_recalc_ind,
			fwdrp_recalc_type=:ln_parm_c.fwdrp_recalc_type,
			intst_chg_mtr=:ln_parm_c.intst_chg_mtr,
			repay_chg_mtr=:ln_parm_c.repay_chg_mtr,
			contln_type=:ln_parm_c.contln_type,
			trust_prot_ind=:ln_parm_c.trust_prot_ind,
			ln_type=:ln_parm_c.ln_type,
			turn_ill_ind=:ln_parm_c.turn_ill_ind,
			turn_ill_term=:ln_parm_c.turn_ill_term,
			repay_ind=:ln_parm_c.repay_ind,
			auto_pay_ind=:ln_parm_c.auto_pay_ind,
			pay_seq_code=:ln_parm_c.pay_seq_code,
			opn_lmt=:ln_parm_c.opn_lmt,
			cls_lmt=:ln_parm_c.cls_lmt,
			dc_code=:ln_parm_c.dc_code,
			over_dc_code=:ln_parm_c.over_dc_code,
			sla_dc_code=:ln_parm_c.sla_dc_code,
			bad_dc_code=:ln_parm_c.bad_dc_code,
			over90_dc_code=:ln_parm_c.over90_dc_code,
			filler=:ln_parm_c.filler
	WHERE rowid=:ln_parm_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE ln_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Ln_parm_Del_Upd(struct ln_parm_c ln_parm_c , char * reply  ){

	EXEC SQL DELETE FROM ln_parm WHERE rowid=:ln_parm_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE ln_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Ln_parm_Clo_Upd( ){
	EXEC SQL CLOSE upd_ln_parm;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Ln_parm_Ins( struct ln_parm_c ln_parm_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO ln_parm VALUES (:ln_parm_c.prdt_no,
			:ln_parm_c.title,
			:ln_parm_c.beg_date,
			:ln_parm_c.end_date,
			:ln_parm_c.cif_type,
			:ln_parm_c.cur_no,
			:ln_parm_c.time_type,
			:ln_parm_c.min_term,
			:ln_parm_c.max_term,
			:ln_parm_c.term_type,
			:ln_parm_c.min_bal,
			:ln_parm_c.max_bal,
			:ln_parm_c.intst_days_type,
			:ln_parm_c.intst_type,
			:ln_parm_c.rate_no,
			:ln_parm_c.get_rate_type,
			:ln_parm_c.over_rate_type,
			:ln_parm_c.over_rate_no,
			:ln_parm_c.min_flt_ratio,
			:ln_parm_c.max_flt_ratio,
			:ln_parm_c.over_rate_min,
			:ln_parm_c.over_rate_max,
			:ln_parm_c.over_rate_def,
			:ln_parm_c.fine_rate_type,
			:ln_parm_c.fine_rate_no,
			:ln_parm_c.fine_rate_min,
			:ln_parm_c.fine_rate_max,
			:ln_parm_c.fine_rate_def,
			:ln_parm_c.exp_ind,
			:ln_parm_c.intst_use_ind,
			:ln_parm_c.min_intst,
			:ln_parm_c.cmpd_intst_ind,
			:ln_parm_c.cmpd_intst_type,
			:ln_parm_c.ac_sts,
			:ln_parm_c.auto_cls,
			:ln_parm_c.prm_chrg_ind,
			:ln_parm_c.prm_chrg_type,
			:ln_parm_c.prm_chrg_no,
			:ln_parm_c.fdrp_inf_days,
			:ln_parm_c.fdrq_lmt_amt,
			:ln_parm_c.fdrp_chrg_ind,
			:ln_parm_c.fdrp_chrg_type,
			:ln_parm_c.fdrp_chrg_no,
			:ln_parm_c.fdrp_chrg_term,
			:ln_parm_c.holi_ind,
			:ln_parm_c.int_type,
			:ln_parm_c.int_unit,
			:ln_parm_c.pay_pln_type,
			:ln_parm_c.ln_pay_type,
			:ln_parm_c.pay_pln_crt,
			:ln_parm_c.pay_term_type,
			:ln_parm_c.pay_amt_term,
			:ln_parm_c.fst_pay_ind,
			:ln_parm_c.fst_pay_day,
			:ln_parm_c.mon_pay_day,
			:ln_parm_c.fst_pay_ints_ind,
			:ln_parm_c.fst_pay_ints_day,
			:ln_parm_c.intst_recalc_ind,
			:ln_parm_c.intst_recalc_type,
			:ln_parm_c.fwdrp_recalc_ind,
			:ln_parm_c.fwdrp_recalc_type,
			:ln_parm_c.intst_chg_mtr,
			:ln_parm_c.repay_chg_mtr,
			:ln_parm_c.contln_type,
			:ln_parm_c.trust_prot_ind,
			:ln_parm_c.ln_type,
			:ln_parm_c.turn_ill_ind,
			:ln_parm_c.turn_ill_term,
			:ln_parm_c.repay_ind,
			:ln_parm_c.auto_pay_ind,
			:ln_parm_c.pay_seq_code,
			:ln_parm_c.opn_lmt,
			:ln_parm_c.cls_lmt,
			:ln_parm_c.dc_code,
			:ln_parm_c.over_dc_code,
			:ln_parm_c.sla_dc_code,
			:ln_parm_c.bad_dc_code,
			:ln_parm_c.over90_dc_code,
			:ln_parm_c.filler);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT ln_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT ln_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
