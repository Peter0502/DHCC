#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"auth_code_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int auth_code_con ( struct auth_code_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct auth_code_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->br_no);
	zip_tail(ps->tx_code);
	zip_tail(ps->lvl);
	zip_tail(ps->auth_ind);
	zip_tail(ps->sts);
	zip_tail(ps->tel);
	zip_tail(ps->auth);
	zip_tail(ps->aud);
	zip_tail(ps->chk);
}
int Auth_code_Debug(struct auth_code_c *ps){
	vtcp_log("auth_code_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("auth_code_c.br_no=[%s]\n",ps->br_no);
	vtcp_log("auth_code_c.auth_no=[%ld]\n",ps->auth_no);
	vtcp_log("auth_code_c.trace_no=[%ld]\n",ps->trace_no);
	vtcp_log("auth_code_c.done_trace_no=[%ld]\n",ps->done_trace_no);
	vtcp_log("auth_code_c.tx_code=[%s]\n",ps->tx_code);
	vtcp_log("auth_code_c.cond_seqn=[%ld]\n",ps->cond_seqn);
	vtcp_log("auth_code_c.lvl=[%s]\n",ps->lvl);
	vtcp_log("auth_code_c.auth_ind=[%s]\n",ps->auth_ind);
	vtcp_log("auth_code_c.sts=[%s]\n",ps->sts);
	vtcp_log("auth_code_c.tel=[%s]\n",ps->tel);
	vtcp_log("auth_code_c.auth=[%s]\n",ps->auth);
	vtcp_log("auth_code_c.aud=[%s]\n",ps->aud);
	vtcp_log("auth_code_c.chk=[%s]\n",ps->chk);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Auth_code_Sel(reply,auth_code_c,fmtstr,va_alist)
char    *reply;
struct  auth_code_c *auth_code_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Auth_code_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Auth_code_Fet_Sel( auth_code_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Auth_code_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Auth_code_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,auth_code.* FROM auth_code WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE auth_code_sel FROM :comm;
	EXEC SQL DECLARE sel_auth_code CURSOR FOR auth_code_sel;

	EXEC SQL OPEN sel_auth_code;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN auth_code error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Auth_code_Fet_Sel ( struct auth_code_c *auth_code_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_auth_code INTO :auth_code_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch auth_code error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch auth_code finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(auth_code_c);

	return 0;
}

int Auth_code_Clo_Sel (){
	EXEC SQL CLOSE sel_auth_code;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Auth_code_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,auth_code.* FROM auth_code WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE auth_code_upd FROM :comm;

	EXEC SQL DECLARE upd_auth_code CURSOR FOR auth_code_upd;

	EXEC SQL OPEN upd_auth_code;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open auth_code error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Auth_code_Fet_Upd( struct auth_code_c *auth_code_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_auth_code INTO :auth_code_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd auth_code error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH auth_code finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(auth_code_c);

	return 0;
}

int Auth_code_Upd_Upd( struct auth_code_c auth_code_c , char * reply){
	int ret;

	EXEC SQL UPDATE auth_code SET br_no=:auth_code_c.br_no,
			auth_no=:auth_code_c.auth_no,
			trace_no=:auth_code_c.trace_no,
			done_trace_no=:auth_code_c.done_trace_no,
			tx_code=:auth_code_c.tx_code,
			cond_seqn=:auth_code_c.cond_seqn,
			lvl=:auth_code_c.lvl,
			auth_ind=:auth_code_c.auth_ind,
			sts=:auth_code_c.sts,
			tel=:auth_code_c.tel,
			auth=:auth_code_c.auth,
			aud=:auth_code_c.aud,
			chk=:auth_code_c.chk
	WHERE rowid=:auth_code_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE auth_code error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Auth_code_Del_Upd(struct auth_code_c auth_code_c , char * reply  ){

	EXEC SQL DELETE FROM auth_code WHERE rowid=:auth_code_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE auth_code error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Auth_code_Clo_Upd( ){
	EXEC SQL CLOSE upd_auth_code;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Auth_code_Ins( struct auth_code_c auth_code_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO auth_code VALUES (:auth_code_c.br_no,
			:auth_code_c.auth_no,
			:auth_code_c.trace_no,
			:auth_code_c.done_trace_no,
			:auth_code_c.tx_code,
			:auth_code_c.cond_seqn,
			:auth_code_c.lvl,
			:auth_code_c.auth_ind,
			:auth_code_c.sts,
			:auth_code_c.tel,
			:auth_code_c.auth,
			:auth_code_c.aud,
			:auth_code_c.chk);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT auth_code error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT auth_code error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
