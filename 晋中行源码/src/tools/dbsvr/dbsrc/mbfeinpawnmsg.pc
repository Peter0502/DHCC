#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"mbfeinpawnmsg_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int mbfeinpawnmsg_con ( struct mbfeinpawnmsg_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct mbfeinpawnmsg_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->spjoincode);
	zip_tail(ps->txssno);
	zip_tail(ps->osdficodeccpc);
	zip_tail(ps->osdficode);
	zip_tail(ps->isdficodeccpc);
	zip_tail(ps->isdficode);
	zip_tail(ps->procstate);
	zip_tail(ps->checkstate);
	zip_tail(ps->statetime);
	zip_tail(ps->errcode);
	zip_tail(ps->errdesc);
	zip_tail(ps->strinfo);
}
int Mbfeinpawnmsg_Debug(struct mbfeinpawnmsg_c *ps){
	vtcp_log("mbfeinpawnmsg_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("mbfeinpawnmsg_c.consigndate=[%ld]\n",ps->consigndate);
	vtcp_log("mbfeinpawnmsg_c.spjoincode=[%s]\n",ps->spjoincode);
	vtcp_log("mbfeinpawnmsg_c.txssno=[%s]\n",ps->txssno);
	vtcp_log("mbfeinpawnmsg_c.amount=[%f]\n",ps->amount);
	vtcp_log("mbfeinpawnmsg_c.osdficodeccpc=[%s]\n",ps->osdficodeccpc);
	vtcp_log("mbfeinpawnmsg_c.osdficode=[%s]\n",ps->osdficode);
	vtcp_log("mbfeinpawnmsg_c.isdficodeccpc=[%s]\n",ps->isdficodeccpc);
	vtcp_log("mbfeinpawnmsg_c.isdficode=[%s]\n",ps->isdficode);
	vtcp_log("mbfeinpawnmsg_c.procstate=[%s]\n",ps->procstate);
	vtcp_log("mbfeinpawnmsg_c.checkstate=[%s]\n",ps->checkstate);
	vtcp_log("mbfeinpawnmsg_c.statetime=[%s]\n",ps->statetime);
	vtcp_log("mbfeinpawnmsg_c.printno=[%ld]\n",ps->printno);
	vtcp_log("mbfeinpawnmsg_c.flowno=[%ld]\n",ps->flowno);
	vtcp_log("mbfeinpawnmsg_c.errcode=[%s]\n",ps->errcode);
	vtcp_log("mbfeinpawnmsg_c.errdesc=[%s]\n",ps->errdesc);
	vtcp_log("mbfeinpawnmsg_c.strinfo=[%s]\n",ps->strinfo);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Mbfeinpawnmsg_Sel(reply,mbfeinpawnmsg_c,fmtstr,va_alist)
char    *reply;
struct  mbfeinpawnmsg_c *mbfeinpawnmsg_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Mbfeinpawnmsg_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Mbfeinpawnmsg_Fet_Sel( mbfeinpawnmsg_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Mbfeinpawnmsg_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Mbfeinpawnmsg_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,mbfeinpawnmsg.* FROM mbfeinpawnmsg WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mbfeinpawnmsg_sel FROM :comm;
	EXEC SQL DECLARE sel_mbfeinpawnmsg CURSOR FOR mbfeinpawnmsg_sel;

	EXEC SQL OPEN sel_mbfeinpawnmsg;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN mbfeinpawnmsg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mbfeinpawnmsg_Fet_Sel ( struct mbfeinpawnmsg_c *mbfeinpawnmsg_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_mbfeinpawnmsg INTO :mbfeinpawnmsg_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch mbfeinpawnmsg error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch mbfeinpawnmsg finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(mbfeinpawnmsg_c);

	return 0;
}

int Mbfeinpawnmsg_Clo_Sel (){
	EXEC SQL CLOSE sel_mbfeinpawnmsg;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Mbfeinpawnmsg_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,mbfeinpawnmsg.* FROM mbfeinpawnmsg WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mbfeinpawnmsg_upd FROM :comm;

	EXEC SQL DECLARE upd_mbfeinpawnmsg CURSOR FOR mbfeinpawnmsg_upd;

	EXEC SQL OPEN upd_mbfeinpawnmsg;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open mbfeinpawnmsg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mbfeinpawnmsg_Fet_Upd( struct mbfeinpawnmsg_c *mbfeinpawnmsg_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_mbfeinpawnmsg INTO :mbfeinpawnmsg_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd mbfeinpawnmsg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH mbfeinpawnmsg finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(mbfeinpawnmsg_c);

	return 0;
}

int Mbfeinpawnmsg_Upd_Upd( struct mbfeinpawnmsg_c mbfeinpawnmsg_c , char * reply){
	int ret;

	EXEC SQL UPDATE mbfeinpawnmsg SET consigndate=:mbfeinpawnmsg_c.consigndate,
			spjoincode=:mbfeinpawnmsg_c.spjoincode,
			txssno=:mbfeinpawnmsg_c.txssno,
			amount=:mbfeinpawnmsg_c.amount,
			osdficodeccpc=:mbfeinpawnmsg_c.osdficodeccpc,
			osdficode=:mbfeinpawnmsg_c.osdficode,
			isdficodeccpc=:mbfeinpawnmsg_c.isdficodeccpc,
			isdficode=:mbfeinpawnmsg_c.isdficode,
			procstate=:mbfeinpawnmsg_c.procstate,
			checkstate=:mbfeinpawnmsg_c.checkstate,
			statetime=:mbfeinpawnmsg_c.statetime,
			printno=:mbfeinpawnmsg_c.printno,
			flowno=:mbfeinpawnmsg_c.flowno,
			errcode=:mbfeinpawnmsg_c.errcode,
			errdesc=:mbfeinpawnmsg_c.errdesc,
			strinfo=:mbfeinpawnmsg_c.strinfo
	WHERE rowid=:mbfeinpawnmsg_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE mbfeinpawnmsg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Mbfeinpawnmsg_Del_Upd(struct mbfeinpawnmsg_c mbfeinpawnmsg_c , char * reply  ){

	EXEC SQL DELETE FROM mbfeinpawnmsg WHERE rowid=:mbfeinpawnmsg_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE mbfeinpawnmsg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mbfeinpawnmsg_Clo_Upd( ){
	EXEC SQL CLOSE upd_mbfeinpawnmsg;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Mbfeinpawnmsg_Ins( struct mbfeinpawnmsg_c mbfeinpawnmsg_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO mbfeinpawnmsg VALUES (:mbfeinpawnmsg_c.consigndate,
			:mbfeinpawnmsg_c.spjoincode,
			:mbfeinpawnmsg_c.txssno,
			:mbfeinpawnmsg_c.amount,
			:mbfeinpawnmsg_c.osdficodeccpc,
			:mbfeinpawnmsg_c.osdficode,
			:mbfeinpawnmsg_c.isdficodeccpc,
			:mbfeinpawnmsg_c.isdficode,
			:mbfeinpawnmsg_c.procstate,
			:mbfeinpawnmsg_c.checkstate,
			:mbfeinpawnmsg_c.statetime,
			:mbfeinpawnmsg_c.printno,
			:mbfeinpawnmsg_c.flowno,
			:mbfeinpawnmsg_c.errcode,
			:mbfeinpawnmsg_c.errdesc,
			:mbfeinpawnmsg_c.strinfo);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT mbfeinpawnmsg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT mbfeinpawnmsg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
