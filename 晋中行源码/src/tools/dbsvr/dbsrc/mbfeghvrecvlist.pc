#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"mbfeghvrecvlist_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int mbfeghvrecvlist_con ( struct mbfeghvrecvlist_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct mbfeghvrecvlist_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->txssno);
	zip_tail(ps->cmtno);
	zip_tail(ps->odficode);
	zip_tail(ps->isdficode);
	zip_tail(ps->odficenter);
	zip_tail(ps->payeropenaccbkcode);
	zip_tail(ps->payeracc);
	zip_tail(ps->payername);
	zip_tail(ps->payeraddr);
	zip_tail(ps->cnapsrdfi);
	zip_tail(ps->rdficode);
	zip_tail(ps->osdficode);
	zip_tail(ps->rdficenter);
	zip_tail(ps->recipientopenaccbk);
	zip_tail(ps->recipientacc);
	zip_tail(ps->recipientname);
	zip_tail(ps->recipientaddr);
	zip_tail(ps->oprttype);
	zip_tail(ps->warrantno);
	zip_tail(ps->prilevel);
	zip_tail(ps->procstate);
	zip_tail(ps->hang_reply);
	zip_tail(ps->statetime);
	zip_tail(ps->rectime);
	zip_tail(ps->billofxchngseal);
	zip_tail(ps->checkstate);
	zip_tail(ps->incomeacno);
	zip_tail(ps->incomebkcode);
	zip_tail(ps->incometime);
	zip_tail(ps->incometel);
	zip_tail(ps->strinfo);
	zip_tail(ps->content);
}
int Mbfeghvrecvlist_Debug(struct mbfeghvrecvlist_c *ps){
	vtcp_log("mbfeghvrecvlist_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("mbfeghvrecvlist_c.txssno=[%s]\n",ps->txssno);
	vtcp_log("mbfeghvrecvlist_c.consigndate=[%ld]\n",ps->consigndate);
	vtcp_log("mbfeghvrecvlist_c.cmtno=[%s]\n",ps->cmtno);
	vtcp_log("mbfeghvrecvlist_c.amount=[%f]\n",ps->amount);
	vtcp_log("mbfeghvrecvlist_c.odficode=[%s]\n",ps->odficode);
	vtcp_log("mbfeghvrecvlist_c.isdficode=[%s]\n",ps->isdficode);
	vtcp_log("mbfeghvrecvlist_c.odficenter=[%s]\n",ps->odficenter);
	vtcp_log("mbfeghvrecvlist_c.payeropenaccbkcode=[%s]\n",ps->payeropenaccbkcode);
	vtcp_log("mbfeghvrecvlist_c.payeracc=[%s]\n",ps->payeracc);
	vtcp_log("mbfeghvrecvlist_c.payername=[%s]\n",ps->payername);
	vtcp_log("mbfeghvrecvlist_c.payeraddr=[%s]\n",ps->payeraddr);
	vtcp_log("mbfeghvrecvlist_c.cnapsrdfi=[%s]\n",ps->cnapsrdfi);
	vtcp_log("mbfeghvrecvlist_c.rdficode=[%s]\n",ps->rdficode);
	vtcp_log("mbfeghvrecvlist_c.osdficode=[%s]\n",ps->osdficode);
	vtcp_log("mbfeghvrecvlist_c.rdficenter=[%s]\n",ps->rdficenter);
	vtcp_log("mbfeghvrecvlist_c.recipientopenaccbk=[%s]\n",ps->recipientopenaccbk);
	vtcp_log("mbfeghvrecvlist_c.recipientacc=[%s]\n",ps->recipientacc);
	vtcp_log("mbfeghvrecvlist_c.recipientname=[%s]\n",ps->recipientname);
	vtcp_log("mbfeghvrecvlist_c.recipientaddr=[%s]\n",ps->recipientaddr);
	vtcp_log("mbfeghvrecvlist_c.oprttype=[%s]\n",ps->oprttype);
	vtcp_log("mbfeghvrecvlist_c.warrantdate=[%ld]\n",ps->warrantdate);
	vtcp_log("mbfeghvrecvlist_c.warrantno=[%s]\n",ps->warrantno);
	vtcp_log("mbfeghvrecvlist_c.compensationamnt=[%f]\n",ps->compensationamnt);
	vtcp_log("mbfeghvrecvlist_c.repudiationamnt=[%f]\n",ps->repudiationamnt);
	vtcp_log("mbfeghvrecvlist_c.prmptpaydate=[%ld]\n",ps->prmptpaydate);
	vtcp_log("mbfeghvrecvlist_c.prilevel=[%s]\n",ps->prilevel);
	vtcp_log("mbfeghvrecvlist_c.printno=[%ld]\n",ps->printno);
	vtcp_log("mbfeghvrecvlist_c.procstate=[%s]\n",ps->procstate);
	vtcp_log("mbfeghvrecvlist_c.hang_reply=[%s]\n",ps->hang_reply);
	vtcp_log("mbfeghvrecvlist_c.statetime=[%s]\n",ps->statetime);
	vtcp_log("mbfeghvrecvlist_c.rectime=[%s]\n",ps->rectime);
	vtcp_log("mbfeghvrecvlist_c.billofxchngseal=[%s]\n",ps->billofxchngseal);
	vtcp_log("mbfeghvrecvlist_c.checkstate=[%s]\n",ps->checkstate);
	vtcp_log("mbfeghvrecvlist_c.flowno=[%ld]\n",ps->flowno);
	vtcp_log("mbfeghvrecvlist_c.incomeacno=[%s]\n",ps->incomeacno);
	vtcp_log("mbfeghvrecvlist_c.incomebkcode=[%s]\n",ps->incomebkcode);
	vtcp_log("mbfeghvrecvlist_c.incometime=[%s]\n",ps->incometime);
	vtcp_log("mbfeghvrecvlist_c.incomeflowno=[%ld]\n",ps->incomeflowno);
	vtcp_log("mbfeghvrecvlist_c.incometel=[%s]\n",ps->incometel);
	vtcp_log("mbfeghvrecvlist_c.strinfo=[%s]\n",ps->strinfo);
	vtcp_log("mbfeghvrecvlist_c.content=[%s]\n",ps->content);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Mbfeghvrecvlist_Sel(reply,mbfeghvrecvlist_c,fmtstr,va_alist)
char    *reply;
struct  mbfeghvrecvlist_c *mbfeghvrecvlist_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Mbfeghvrecvlist_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Mbfeghvrecvlist_Fet_Sel( mbfeghvrecvlist_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Mbfeghvrecvlist_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Mbfeghvrecvlist_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,mbfeghvrecvlist.* FROM mbfeghvrecvlist WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mbfeghvrecvlist_sel FROM :comm;
	EXEC SQL DECLARE sel_mbfeghvrecvlist CURSOR FOR mbfeghvrecvlist_sel;

	EXEC SQL OPEN sel_mbfeghvrecvlist;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN mbfeghvrecvlist error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mbfeghvrecvlist_Fet_Sel ( struct mbfeghvrecvlist_c *mbfeghvrecvlist_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_mbfeghvrecvlist INTO :mbfeghvrecvlist_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch mbfeghvrecvlist error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch mbfeghvrecvlist finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(mbfeghvrecvlist_c);

	return 0;
}

int Mbfeghvrecvlist_Clo_Sel (){
	EXEC SQL CLOSE sel_mbfeghvrecvlist;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Mbfeghvrecvlist_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,mbfeghvrecvlist.* FROM mbfeghvrecvlist WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mbfeghvrecvlist_upd FROM :comm;

	EXEC SQL DECLARE upd_mbfeghvrecvlist CURSOR FOR mbfeghvrecvlist_upd;

	EXEC SQL OPEN upd_mbfeghvrecvlist;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open mbfeghvrecvlist error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mbfeghvrecvlist_Fet_Upd( struct mbfeghvrecvlist_c *mbfeghvrecvlist_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_mbfeghvrecvlist INTO :mbfeghvrecvlist_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd mbfeghvrecvlist error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH mbfeghvrecvlist finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(mbfeghvrecvlist_c);

	return 0;
}

int Mbfeghvrecvlist_Upd_Upd( struct mbfeghvrecvlist_c mbfeghvrecvlist_c , char * reply){
	int ret;

	EXEC SQL UPDATE mbfeghvrecvlist SET txssno=:mbfeghvrecvlist_c.txssno,
			consigndate=:mbfeghvrecvlist_c.consigndate,
			cmtno=:mbfeghvrecvlist_c.cmtno,
			amount=:mbfeghvrecvlist_c.amount,
			odficode=:mbfeghvrecvlist_c.odficode,
			isdficode=:mbfeghvrecvlist_c.isdficode,
			odficenter=:mbfeghvrecvlist_c.odficenter,
			payeropenaccbkcode=:mbfeghvrecvlist_c.payeropenaccbkcode,
			payeracc=:mbfeghvrecvlist_c.payeracc,
			payername=:mbfeghvrecvlist_c.payername,
			payeraddr=:mbfeghvrecvlist_c.payeraddr,
			cnapsrdfi=:mbfeghvrecvlist_c.cnapsrdfi,
			rdficode=:mbfeghvrecvlist_c.rdficode,
			osdficode=:mbfeghvrecvlist_c.osdficode,
			rdficenter=:mbfeghvrecvlist_c.rdficenter,
			recipientopenaccbk=:mbfeghvrecvlist_c.recipientopenaccbk,
			recipientacc=:mbfeghvrecvlist_c.recipientacc,
			recipientname=:mbfeghvrecvlist_c.recipientname,
			recipientaddr=:mbfeghvrecvlist_c.recipientaddr,
			oprttype=:mbfeghvrecvlist_c.oprttype,
			warrantdate=:mbfeghvrecvlist_c.warrantdate,
			warrantno=:mbfeghvrecvlist_c.warrantno,
			compensationamnt=:mbfeghvrecvlist_c.compensationamnt,
			repudiationamnt=:mbfeghvrecvlist_c.repudiationamnt,
			prmptpaydate=:mbfeghvrecvlist_c.prmptpaydate,
			prilevel=:mbfeghvrecvlist_c.prilevel,
			printno=:mbfeghvrecvlist_c.printno,
			procstate=:mbfeghvrecvlist_c.procstate,
			hang_reply=:mbfeghvrecvlist_c.hang_reply,
			statetime=:mbfeghvrecvlist_c.statetime,
			rectime=:mbfeghvrecvlist_c.rectime,
			billofxchngseal=:mbfeghvrecvlist_c.billofxchngseal,
			checkstate=:mbfeghvrecvlist_c.checkstate,
			flowno=:mbfeghvrecvlist_c.flowno,
			incomeacno=:mbfeghvrecvlist_c.incomeacno,
			incomebkcode=:mbfeghvrecvlist_c.incomebkcode,
			incometime=:mbfeghvrecvlist_c.incometime,
			incomeflowno=:mbfeghvrecvlist_c.incomeflowno,
			incometel=:mbfeghvrecvlist_c.incometel,
			strinfo=:mbfeghvrecvlist_c.strinfo,
			content=:mbfeghvrecvlist_c.content
	WHERE rowid=:mbfeghvrecvlist_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE mbfeghvrecvlist error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Mbfeghvrecvlist_Del_Upd(struct mbfeghvrecvlist_c mbfeghvrecvlist_c , char * reply  ){

	EXEC SQL DELETE FROM mbfeghvrecvlist WHERE rowid=:mbfeghvrecvlist_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE mbfeghvrecvlist error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mbfeghvrecvlist_Clo_Upd( ){
	EXEC SQL CLOSE upd_mbfeghvrecvlist;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Mbfeghvrecvlist_Ins( struct mbfeghvrecvlist_c mbfeghvrecvlist_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO mbfeghvrecvlist VALUES (:mbfeghvrecvlist_c.txssno,
			:mbfeghvrecvlist_c.consigndate,
			:mbfeghvrecvlist_c.cmtno,
			:mbfeghvrecvlist_c.amount,
			:mbfeghvrecvlist_c.odficode,
			:mbfeghvrecvlist_c.isdficode,
			:mbfeghvrecvlist_c.odficenter,
			:mbfeghvrecvlist_c.payeropenaccbkcode,
			:mbfeghvrecvlist_c.payeracc,
			:mbfeghvrecvlist_c.payername,
			:mbfeghvrecvlist_c.payeraddr,
			:mbfeghvrecvlist_c.cnapsrdfi,
			:mbfeghvrecvlist_c.rdficode,
			:mbfeghvrecvlist_c.osdficode,
			:mbfeghvrecvlist_c.rdficenter,
			:mbfeghvrecvlist_c.recipientopenaccbk,
			:mbfeghvrecvlist_c.recipientacc,
			:mbfeghvrecvlist_c.recipientname,
			:mbfeghvrecvlist_c.recipientaddr,
			:mbfeghvrecvlist_c.oprttype,
			:mbfeghvrecvlist_c.warrantdate,
			:mbfeghvrecvlist_c.warrantno,
			:mbfeghvrecvlist_c.compensationamnt,
			:mbfeghvrecvlist_c.repudiationamnt,
			:mbfeghvrecvlist_c.prmptpaydate,
			:mbfeghvrecvlist_c.prilevel,
			:mbfeghvrecvlist_c.printno,
			:mbfeghvrecvlist_c.procstate,
			:mbfeghvrecvlist_c.hang_reply,
			:mbfeghvrecvlist_c.statetime,
			:mbfeghvrecvlist_c.rectime,
			:mbfeghvrecvlist_c.billofxchngseal,
			:mbfeghvrecvlist_c.checkstate,
			:mbfeghvrecvlist_c.flowno,
			:mbfeghvrecvlist_c.incomeacno,
			:mbfeghvrecvlist_c.incomebkcode,
			:mbfeghvrecvlist_c.incometime,
			:mbfeghvrecvlist_c.incomeflowno,
			:mbfeghvrecvlist_c.incometel,
			:mbfeghvrecvlist_c.strinfo,
			:mbfeghvrecvlist_c.content);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT mbfeghvrecvlist error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT mbfeghvrecvlist error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
