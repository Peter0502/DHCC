#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"mob_acct_type_dele_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int mob_acct_type_dele_con ( struct mob_acct_type_dele_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct mob_acct_type_dele_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->mobile);
	zip_tail(ps->acct_no);
	zip_tail(ps->server_type);
	zip_tail(ps->trn_date);
	zip_tail(ps->oper_no);
	zip_tail(ps->sfbz);
	zip_tail(ps->card_no);
	zip_tail(ps->no_mark);
}
int Mob_acct_type_dele_Debug(struct mob_acct_type_dele_c *ps){
	vtcp_log("mob_acct_type_dele_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("mob_acct_type_dele_c.mobile=[%s]\n",ps->mobile);
	vtcp_log("mob_acct_type_dele_c.acct_no=[%s]\n",ps->acct_no);
	vtcp_log("mob_acct_type_dele_c.server_type=[%s]\n",ps->server_type);
	vtcp_log("mob_acct_type_dele_c.trn_date=[%s]\n",ps->trn_date);
	vtcp_log("mob_acct_type_dele_c.oper_no=[%s]\n",ps->oper_no);
	vtcp_log("mob_acct_type_dele_c.sfbz=[%s]\n",ps->sfbz);
	vtcp_log("mob_acct_type_dele_c.card_no=[%s]\n",ps->card_no);
	vtcp_log("mob_acct_type_dele_c.number=[%ld]\n",ps->number);
	vtcp_log("mob_acct_type_dele_c.no_mark=[%s]\n",ps->no_mark);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Mob_acct_type_dele_Sel(reply,mob_acct_type_dele_c,fmtstr,va_alist)
char    *reply;
struct  mob_acct_type_dele_c *mob_acct_type_dele_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Mob_acct_type_dele_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Mob_acct_type_dele_Fet_Sel( mob_acct_type_dele_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Mob_acct_type_dele_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Mob_acct_type_dele_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,mob_acct_type_dele.* FROM mob_acct_type_dele WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mob_acct_type_dele_sel FROM :comm;
	EXEC SQL DECLARE sel_mob_acct_type_dele CURSOR FOR mob_acct_type_dele_sel;

	EXEC SQL OPEN sel_mob_acct_type_dele;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN mob_acct_type_dele error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mob_acct_type_dele_Fet_Sel ( struct mob_acct_type_dele_c *mob_acct_type_dele_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_mob_acct_type_dele INTO :mob_acct_type_dele_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch mob_acct_type_dele error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch mob_acct_type_dele finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(mob_acct_type_dele_c);

	return 0;
}

int Mob_acct_type_dele_Clo_Sel (){
	EXEC SQL CLOSE sel_mob_acct_type_dele;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Mob_acct_type_dele_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,mob_acct_type_dele.* FROM mob_acct_type_dele WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mob_acct_type_dele_upd FROM :comm;

	EXEC SQL DECLARE upd_mob_acct_type_dele CURSOR FOR mob_acct_type_dele_upd;

	EXEC SQL OPEN upd_mob_acct_type_dele;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open mob_acct_type_dele error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mob_acct_type_dele_Fet_Upd( struct mob_acct_type_dele_c *mob_acct_type_dele_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_mob_acct_type_dele INTO :mob_acct_type_dele_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd mob_acct_type_dele error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH mob_acct_type_dele finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(mob_acct_type_dele_c);

	return 0;
}

int Mob_acct_type_dele_Upd_Upd( struct mob_acct_type_dele_c mob_acct_type_dele_c , char * reply){
	int ret;

	EXEC SQL UPDATE mob_acct_type_dele SET mobile=:mob_acct_type_dele_c.mobile,
			acct_no=:mob_acct_type_dele_c.acct_no,
			server_type=:mob_acct_type_dele_c.server_type,
			trn_date=:mob_acct_type_dele_c.trn_date,
			oper_no=:mob_acct_type_dele_c.oper_no,
			sfbz=:mob_acct_type_dele_c.sfbz,
			card_no=:mob_acct_type_dele_c.card_no,
			"number"=:mob_acct_type_dele_c.number,
			no_mark=:mob_acct_type_dele_c.no_mark
	WHERE rowid=:mob_acct_type_dele_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE mob_acct_type_dele error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Mob_acct_type_dele_Del_Upd(struct mob_acct_type_dele_c mob_acct_type_dele_c , char * reply  ){

	EXEC SQL DELETE FROM mob_acct_type_dele WHERE rowid=:mob_acct_type_dele_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE mob_acct_type_dele error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mob_acct_type_dele_Clo_Upd( ){
	EXEC SQL CLOSE upd_mob_acct_type_dele;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Mob_acct_type_dele_Ins( struct mob_acct_type_dele_c mob_acct_type_dele_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO mob_acct_type_dele VALUES (:mob_acct_type_dele_c.mobile,
			:mob_acct_type_dele_c.acct_no,
			:mob_acct_type_dele_c.server_type,
			:mob_acct_type_dele_c.trn_date,
			:mob_acct_type_dele_c.oper_no,
			:mob_acct_type_dele_c.sfbz,
			:mob_acct_type_dele_c.card_no,
			:mob_acct_type_dele_c.number,
			:mob_acct_type_dele_c.no_mark);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT mob_acct_type_dele error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT mob_acct_type_dele error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
