#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"sub_com_sect_acm_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int sub_com_sect_acm_con ( struct sub_com_sect_acm_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct sub_com_sect_acm_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->ac_no);
	zip_tail(ps->sub_ac_no);
	zip_tail(ps->intst_type);
	zip_tail(ps->sts);
}
int Sub_com_sect_acm_Debug(struct sub_com_sect_acm_c *ps){
	vtcp_log("sub_com_sect_acm_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("sub_com_sect_acm_c.ac_no=[%s]\n",ps->ac_no);
	vtcp_log("sub_com_sect_acm_c.sub_ac_seqn=[%ld]\n",ps->sub_ac_seqn);
	vtcp_log("sub_com_sect_acm_c.sub_ac_no=[%s]\n",ps->sub_ac_no);
	vtcp_log("sub_com_sect_acm_c.beg_date=[%ld]\n",ps->beg_date);
	vtcp_log("sub_com_sect_acm_c.end_date=[%ld]\n",ps->end_date);
	vtcp_log("sub_com_sect_acm_c.rate=[%f]\n",ps->rate);
	vtcp_log("sub_com_sect_acm_c.intst_acm=[%f]\n",ps->intst_acm);
	vtcp_log("sub_com_sect_acm_c.intst_type=[%s]\n",ps->intst_type);
	vtcp_log("sub_com_sect_acm_c.sts=[%s]\n",ps->sts);
	vtcp_log("sub_com_sect_acm_c.jz_date=[%ld]\n",ps->jz_date);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Sub_com_sect_acm_Sel(reply,sub_com_sect_acm_c,fmtstr,va_alist)
char    *reply;
struct  sub_com_sect_acm_c *sub_com_sect_acm_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Sub_com_sect_acm_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Sub_com_sect_acm_Fet_Sel( sub_com_sect_acm_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Sub_com_sect_acm_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Sub_com_sect_acm_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,sub_com_sect_acm.* FROM sub_com_sect_acm WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE sub_com_sect_acm_sel FROM :comm;
	EXEC SQL DECLARE sel_sub_com_sect_acm CURSOR FOR sub_com_sect_acm_sel;

	EXEC SQL OPEN sel_sub_com_sect_acm;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN sub_com_sect_acm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Sub_com_sect_acm_Fet_Sel ( struct sub_com_sect_acm_c *sub_com_sect_acm_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_sub_com_sect_acm INTO :sub_com_sect_acm_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch sub_com_sect_acm error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch sub_com_sect_acm finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(sub_com_sect_acm_c);

	return 0;
}

int Sub_com_sect_acm_Clo_Sel (){
	EXEC SQL CLOSE sel_sub_com_sect_acm;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Sub_com_sect_acm_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,sub_com_sect_acm.* FROM sub_com_sect_acm WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE sub_com_sect_acm_upd FROM :comm;

	EXEC SQL DECLARE upd_sub_com_sect_acm CURSOR FOR sub_com_sect_acm_upd;

	EXEC SQL OPEN upd_sub_com_sect_acm;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open sub_com_sect_acm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Sub_com_sect_acm_Fet_Upd( struct sub_com_sect_acm_c *sub_com_sect_acm_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_sub_com_sect_acm INTO :sub_com_sect_acm_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd sub_com_sect_acm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH sub_com_sect_acm finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(sub_com_sect_acm_c);

	return 0;
}

int Sub_com_sect_acm_Upd_Upd( struct sub_com_sect_acm_c sub_com_sect_acm_c , char * reply){
	int ret;

	EXEC SQL UPDATE sub_com_sect_acm SET ac_no=:sub_com_sect_acm_c.ac_no,
			sub_ac_seqn=:sub_com_sect_acm_c.sub_ac_seqn,
			sub_ac_no=:sub_com_sect_acm_c.sub_ac_no,
			beg_date=:sub_com_sect_acm_c.beg_date,
			end_date=:sub_com_sect_acm_c.end_date,
			rate=:sub_com_sect_acm_c.rate,
			intst_acm=:sub_com_sect_acm_c.intst_acm,
			intst_type=:sub_com_sect_acm_c.intst_type,
			sts=:sub_com_sect_acm_c.sts,
			jz_date=:sub_com_sect_acm_c.jz_date
	WHERE rowid=:sub_com_sect_acm_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE sub_com_sect_acm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Sub_com_sect_acm_Del_Upd(struct sub_com_sect_acm_c sub_com_sect_acm_c , char * reply  ){

	EXEC SQL DELETE FROM sub_com_sect_acm WHERE rowid=:sub_com_sect_acm_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE sub_com_sect_acm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Sub_com_sect_acm_Clo_Upd( ){
	EXEC SQL CLOSE upd_sub_com_sect_acm;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Sub_com_sect_acm_Ins( struct sub_com_sect_acm_c sub_com_sect_acm_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO sub_com_sect_acm VALUES (:sub_com_sect_acm_c.ac_no,
			:sub_com_sect_acm_c.sub_ac_seqn,
			:sub_com_sect_acm_c.sub_ac_no,
			:sub_com_sect_acm_c.beg_date,
			:sub_com_sect_acm_c.end_date,
			:sub_com_sect_acm_c.rate,
			:sub_com_sect_acm_c.intst_acm,
			:sub_com_sect_acm_c.intst_type,
			:sub_com_sect_acm_c.sts,
			:sub_com_sect_acm_c.jz_date);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT sub_com_sect_acm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT sub_com_sect_acm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
