#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"march_info_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int march_info_con ( struct march_info_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct march_info_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->mrchno);
	zip_tail(ps->mrchnm);
	zip_tail(ps->br_no);
	zip_tail(ps->mrchtype);
	zip_tail(ps->mrchstat);
	zip_tail(ps->mrchacno);
	zip_tail(ps->mrchacno_ls);
	zip_tail(ps->mrchaddr);
	zip_tail(ps->mrchtel);
	zip_tail(ps->mrchman);
}
int March_info_Debug(struct march_info_c *ps){
	vtcp_log("march_info_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("march_info_c.mrchno=[%s]\n",ps->mrchno);
	vtcp_log("march_info_c.mrchnm=[%s]\n",ps->mrchnm);
	vtcp_log("march_info_c.br_no=[%s]\n",ps->br_no);
	vtcp_log("march_info_c.mrchtype=[%s]\n",ps->mrchtype);
	vtcp_log("march_info_c.mrchstat=[%s]\n",ps->mrchstat);
	vtcp_log("march_info_c.mrchacno=[%s]\n",ps->mrchacno);
	vtcp_log("march_info_c.mrchacno_ls=[%s]\n",ps->mrchacno_ls);
	vtcp_log("march_info_c.mrchaddr=[%s]\n",ps->mrchaddr);
	vtcp_log("march_info_c.mrchtel=[%s]\n",ps->mrchtel);
	vtcp_log("march_info_c.mrchman=[%s]\n",ps->mrchman);
	vtcp_log("march_info_c.chrg=[%f]\n",ps->chrg);
	vtcp_log("march_info_c.reg_date=[%ld]\n",ps->reg_date);
	vtcp_log("march_info_c.beg_date=[%ld]\n",ps->beg_date);
	vtcp_log("march_info_c.end_date=[%ld]\n",ps->end_date);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int March_info_Sel(reply,march_info_c,fmtstr,va_alist)
char    *reply;
struct  march_info_c *march_info_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = March_info_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = March_info_Fet_Sel( march_info_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	March_info_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int March_info_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,march_info.* FROM march_info WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE march_info_sel FROM :comm;
	EXEC SQL DECLARE sel_march_info CURSOR FOR march_info_sel;

	EXEC SQL OPEN sel_march_info;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN march_info error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int March_info_Fet_Sel ( struct march_info_c *march_info_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_march_info INTO :march_info_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch march_info error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch march_info finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(march_info_c);

	return 0;
}

int March_info_Clo_Sel (){
	EXEC SQL CLOSE sel_march_info;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int March_info_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,march_info.* FROM march_info WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE march_info_upd FROM :comm;

	EXEC SQL DECLARE upd_march_info CURSOR FOR march_info_upd;

	EXEC SQL OPEN upd_march_info;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open march_info error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int March_info_Fet_Upd( struct march_info_c *march_info_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_march_info INTO :march_info_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd march_info error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH march_info finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(march_info_c);

	return 0;
}

int March_info_Upd_Upd( struct march_info_c march_info_c , char * reply){
	int ret;

	EXEC SQL UPDATE march_info SET mrchno=:march_info_c.mrchno,
			mrchnm=:march_info_c.mrchnm,
			br_no=:march_info_c.br_no,
			mrchtype=:march_info_c.mrchtype,
			mrchstat=:march_info_c.mrchstat,
			mrchacno=:march_info_c.mrchacno,
			mrchacno_ls=:march_info_c.mrchacno_ls,
			mrchaddr=:march_info_c.mrchaddr,
			mrchtel=:march_info_c.mrchtel,
			mrchman=:march_info_c.mrchman,
			chrg=:march_info_c.chrg,
			reg_date=:march_info_c.reg_date,
			beg_date=:march_info_c.beg_date,
			end_date=:march_info_c.end_date
	WHERE rowid=:march_info_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE march_info error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int March_info_Del_Upd(struct march_info_c march_info_c , char * reply  ){

	EXEC SQL DELETE FROM march_info WHERE rowid=:march_info_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE march_info error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int March_info_Clo_Upd( ){
	EXEC SQL CLOSE upd_march_info;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int March_info_Ins( struct march_info_c march_info_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO march_info VALUES (:march_info_c.mrchno,
			:march_info_c.mrchnm,
			:march_info_c.br_no,
			:march_info_c.mrchtype,
			:march_info_c.mrchstat,
			:march_info_c.mrchacno,
			:march_info_c.mrchacno_ls,
			:march_info_c.mrchaddr,
			:march_info_c.mrchtel,
			:march_info_c.mrchman,
			:march_info_c.chrg,
			:march_info_c.reg_date,
			:march_info_c.beg_date,
			:march_info_c.end_date);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT march_info error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT march_info error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
