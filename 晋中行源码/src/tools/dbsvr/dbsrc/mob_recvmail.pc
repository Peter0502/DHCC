#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"mob_recvmail_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int mob_recvmail_con ( struct mob_recvmail_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct mob_recvmail_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->opt_code);
	zip_tail(ps->mobile);
	zip_tail(ps->message);
	zip_tail(ps->proc_flag);
}
int Mob_recvmail_Debug(struct mob_recvmail_c *ps){
	vtcp_log("mob_recvmail_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("mob_recvmail_c.tx_date=[%ld]\n",ps->tx_date);
	vtcp_log("mob_recvmail_c.tx_time=[%ld]\n",ps->tx_time);
	vtcp_log("mob_recvmail_c.opt_code=[%s]\n",ps->opt_code);
	vtcp_log("mob_recvmail_c.mobile=[%s]\n",ps->mobile);
	vtcp_log("mob_recvmail_c.message=[%s]\n",ps->message);
	vtcp_log("mob_recvmail_c.proc_flag=[%s]\n",ps->proc_flag);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Mob_recvmail_Sel(reply,mob_recvmail_c,fmtstr,va_alist)
char    *reply;
struct  mob_recvmail_c *mob_recvmail_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Mob_recvmail_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Mob_recvmail_Fet_Sel( mob_recvmail_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Mob_recvmail_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Mob_recvmail_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,mob_recvmail.* FROM mob_recvmail WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mob_recvmail_sel FROM :comm;
	EXEC SQL DECLARE sel_mob_recvmail CURSOR FOR mob_recvmail_sel;

	EXEC SQL OPEN sel_mob_recvmail;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN mob_recvmail error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mob_recvmail_Fet_Sel ( struct mob_recvmail_c *mob_recvmail_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_mob_recvmail INTO :mob_recvmail_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch mob_recvmail error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch mob_recvmail finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(mob_recvmail_c);

	return 0;
}

int Mob_recvmail_Clo_Sel (){
	EXEC SQL CLOSE sel_mob_recvmail;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Mob_recvmail_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,mob_recvmail.* FROM mob_recvmail WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mob_recvmail_upd FROM :comm;

	EXEC SQL DECLARE upd_mob_recvmail CURSOR FOR mob_recvmail_upd;

	EXEC SQL OPEN upd_mob_recvmail;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open mob_recvmail error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mob_recvmail_Fet_Upd( struct mob_recvmail_c *mob_recvmail_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_mob_recvmail INTO :mob_recvmail_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd mob_recvmail error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH mob_recvmail finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(mob_recvmail_c);

	return 0;
}

int Mob_recvmail_Upd_Upd( struct mob_recvmail_c mob_recvmail_c , char * reply){
	int ret;

	EXEC SQL UPDATE mob_recvmail SET tx_date=:mob_recvmail_c.tx_date,
			tx_time=:mob_recvmail_c.tx_time,
			opt_code=:mob_recvmail_c.opt_code,
			mobile=:mob_recvmail_c.mobile,
			message=:mob_recvmail_c.message,
			proc_flag=:mob_recvmail_c.proc_flag
	WHERE rowid=:mob_recvmail_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE mob_recvmail error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Mob_recvmail_Del_Upd(struct mob_recvmail_c mob_recvmail_c , char * reply  ){

	EXEC SQL DELETE FROM mob_recvmail WHERE rowid=:mob_recvmail_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE mob_recvmail error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mob_recvmail_Clo_Upd( ){
	EXEC SQL CLOSE upd_mob_recvmail;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Mob_recvmail_Ins( struct mob_recvmail_c mob_recvmail_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO mob_recvmail VALUES (:mob_recvmail_c.tx_date,
			:mob_recvmail_c.tx_time,
			:mob_recvmail_c.opt_code,
			:mob_recvmail_c.mobile,
			:mob_recvmail_c.message,
			:mob_recvmail_c.proc_flag);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT mob_recvmail error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT mob_recvmail error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
