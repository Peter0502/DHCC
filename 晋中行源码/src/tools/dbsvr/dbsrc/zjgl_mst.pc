#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"zjgl_mst_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int zjgl_mst_con ( struct zjgl_mst_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct zjgl_mst_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->opn_br_no);
	zip_tail(ps->cur_no);
	zip_tail(ps->acc_no);
	zip_tail(ps->acc_hrt);
	zip_tail(ps->sts);
	zip_tail(ps->intst_knd);
	zip_tail(ps->over_rate_type);
	zip_tail(ps->rate_type);
	zip_tail(ps->od_ind);
	zip_tail(ps->name);
	zip_tail(ps->lim_term);
	zip_tail(ps->tmp1);
	zip_tail(ps->tmp2);
}
int Zjgl_mst_Debug(struct zjgl_mst_c *ps){
	vtcp_log("zjgl_mst_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("zjgl_mst_c.opn_br_no=[%s]\n",ps->opn_br_no);
	vtcp_log("zjgl_mst_c.cur_no=[%s]\n",ps->cur_no);
	vtcp_log("zjgl_mst_c.acc_no=[%s]\n",ps->acc_no);
	vtcp_log("zjgl_mst_c.acc_hrt=[%s]\n",ps->acc_hrt);
	vtcp_log("zjgl_mst_c.dr_bal=[%f]\n",ps->dr_bal);
	vtcp_log("zjgl_mst_c.cr_bal=[%f]\n",ps->cr_bal);
	vtcp_log("zjgl_mst_c.ys_dr_bal=[%f]\n",ps->ys_dr_bal);
	vtcp_log("zjgl_mst_c.ys_cr_bal=[%f]\n",ps->ys_cr_bal);
	vtcp_log("zjgl_mst_c.sts=[%s]\n",ps->sts);
	vtcp_log("zjgl_mst_c.opn_date=[%ld]\n",ps->opn_date);
	vtcp_log("zjgl_mst_c.ic_date=[%ld]\n",ps->ic_date);
	vtcp_log("zjgl_mst_c.end_date=[%ld]\n",ps->end_date);
	vtcp_log("zjgl_mst_c.cls_date=[%ld]\n",ps->cls_date);
	vtcp_log("zjgl_mst_c.lst_date=[%ld]\n",ps->lst_date);
	vtcp_log("zjgl_mst_c.intst_knd=[%s]\n",ps->intst_knd);
	vtcp_log("zjgl_mst_c.over_rate_type=[%s]\n",ps->over_rate_type);
	vtcp_log("zjgl_mst_c.rate_type=[%s]\n",ps->rate_type);
	vtcp_log("zjgl_mst_c.rate=[%f]\n",ps->rate);
	vtcp_log("zjgl_mst_c.over_rate=[%f]\n",ps->over_rate);
	vtcp_log("zjgl_mst_c.dr_intst_acm=[%f]\n",ps->dr_intst_acm);
	vtcp_log("zjgl_mst_c.cr_intst_acm=[%f]\n",ps->cr_intst_acm);
	vtcp_log("zjgl_mst_c.hst_cnt=[%ld]\n",ps->hst_cnt);
	vtcp_log("zjgl_mst_c.hst_pg=[%ld]\n",ps->hst_pg);
	vtcp_log("zjgl_mst_c.od_ind=[%s]\n",ps->od_ind);
	vtcp_log("zjgl_mst_c.name=[%s]\n",ps->name);
	vtcp_log("zjgl_mst_c.lim_amt=[%f]\n",ps->lim_amt);
	vtcp_log("zjgl_mst_c.lim_bal=[%f]\n",ps->lim_bal);
	vtcp_log("zjgl_mst_c.lim_term=[%s]\n",ps->lim_term);
	vtcp_log("zjgl_mst_c.lim_beg_date=[%ld]\n",ps->lim_beg_date);
	vtcp_log("zjgl_mst_c.lim_end_date=[%ld]\n",ps->lim_end_date);
	vtcp_log("zjgl_mst_c.tmp1=[%s]\n",ps->tmp1);
	vtcp_log("zjgl_mst_c.tmp2=[%s]\n",ps->tmp2);
	vtcp_log("zjgl_mst_c.tmp_amt1=[%f]\n",ps->tmp_amt1);
	vtcp_log("zjgl_mst_c.tmp_amt2=[%f]\n",ps->tmp_amt2);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Zjgl_mst_Sel(reply,zjgl_mst_c,fmtstr,va_alist)
char    *reply;
struct  zjgl_mst_c *zjgl_mst_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Zjgl_mst_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Zjgl_mst_Fet_Sel( zjgl_mst_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Zjgl_mst_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Zjgl_mst_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,zjgl_mst.* FROM zjgl_mst WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE zjgl_mst_sel FROM :comm;
	EXEC SQL DECLARE sel_zjgl_mst CURSOR FOR zjgl_mst_sel;

	EXEC SQL OPEN sel_zjgl_mst;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN zjgl_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Zjgl_mst_Fet_Sel ( struct zjgl_mst_c *zjgl_mst_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_zjgl_mst INTO :zjgl_mst_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch zjgl_mst error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch zjgl_mst finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(zjgl_mst_c);

	return 0;
}

int Zjgl_mst_Clo_Sel (){
	EXEC SQL CLOSE sel_zjgl_mst;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Zjgl_mst_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,zjgl_mst.* FROM zjgl_mst WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE zjgl_mst_upd FROM :comm;

	EXEC SQL DECLARE upd_zjgl_mst CURSOR FOR zjgl_mst_upd;

	EXEC SQL OPEN upd_zjgl_mst;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open zjgl_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Zjgl_mst_Fet_Upd( struct zjgl_mst_c *zjgl_mst_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_zjgl_mst INTO :zjgl_mst_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd zjgl_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH zjgl_mst finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(zjgl_mst_c);

	return 0;
}

int Zjgl_mst_Upd_Upd( struct zjgl_mst_c zjgl_mst_c , char * reply){
	int ret;

	EXEC SQL UPDATE zjgl_mst SET opn_br_no=:zjgl_mst_c.opn_br_no,
			cur_no=:zjgl_mst_c.cur_no,
			acc_no=:zjgl_mst_c.acc_no,
			acc_hrt=:zjgl_mst_c.acc_hrt,
			dr_bal=:zjgl_mst_c.dr_bal,
			cr_bal=:zjgl_mst_c.cr_bal,
			ys_dr_bal=:zjgl_mst_c.ys_dr_bal,
			ys_cr_bal=:zjgl_mst_c.ys_cr_bal,
			sts=:zjgl_mst_c.sts,
			opn_date=:zjgl_mst_c.opn_date,
			ic_date=:zjgl_mst_c.ic_date,
			end_date=:zjgl_mst_c.end_date,
			cls_date=:zjgl_mst_c.cls_date,
			lst_date=:zjgl_mst_c.lst_date,
			intst_knd=:zjgl_mst_c.intst_knd,
			over_rate_type=:zjgl_mst_c.over_rate_type,
			rate_type=:zjgl_mst_c.rate_type,
			rate=:zjgl_mst_c.rate,
			over_rate=:zjgl_mst_c.over_rate,
			dr_intst_acm=:zjgl_mst_c.dr_intst_acm,
			cr_intst_acm=:zjgl_mst_c.cr_intst_acm,
			hst_cnt=:zjgl_mst_c.hst_cnt,
			hst_pg=:zjgl_mst_c.hst_pg,
			od_ind=:zjgl_mst_c.od_ind,
			name=:zjgl_mst_c.name,
			lim_amt=:zjgl_mst_c.lim_amt,
			lim_bal=:zjgl_mst_c.lim_bal,
			lim_term=:zjgl_mst_c.lim_term,
			lim_beg_date=:zjgl_mst_c.lim_beg_date,
			lim_end_date=:zjgl_mst_c.lim_end_date,
			tmp1=:zjgl_mst_c.tmp1,
			tmp2=:zjgl_mst_c.tmp2,
			tmp_amt1=:zjgl_mst_c.tmp_amt1,
			tmp_amt2=:zjgl_mst_c.tmp_amt2
	WHERE rowid=:zjgl_mst_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE zjgl_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Zjgl_mst_Del_Upd(struct zjgl_mst_c zjgl_mst_c , char * reply  ){

	EXEC SQL DELETE FROM zjgl_mst WHERE rowid=:zjgl_mst_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE zjgl_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Zjgl_mst_Clo_Upd( ){
	EXEC SQL CLOSE upd_zjgl_mst;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Zjgl_mst_Ins( struct zjgl_mst_c zjgl_mst_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO zjgl_mst VALUES (:zjgl_mst_c.opn_br_no,
			:zjgl_mst_c.cur_no,
			:zjgl_mst_c.acc_no,
			:zjgl_mst_c.acc_hrt,
			:zjgl_mst_c.dr_bal,
			:zjgl_mst_c.cr_bal,
			:zjgl_mst_c.ys_dr_bal,
			:zjgl_mst_c.ys_cr_bal,
			:zjgl_mst_c.sts,
			:zjgl_mst_c.opn_date,
			:zjgl_mst_c.ic_date,
			:zjgl_mst_c.end_date,
			:zjgl_mst_c.cls_date,
			:zjgl_mst_c.lst_date,
			:zjgl_mst_c.intst_knd,
			:zjgl_mst_c.over_rate_type,
			:zjgl_mst_c.rate_type,
			:zjgl_mst_c.rate,
			:zjgl_mst_c.over_rate,
			:zjgl_mst_c.dr_intst_acm,
			:zjgl_mst_c.cr_intst_acm,
			:zjgl_mst_c.hst_cnt,
			:zjgl_mst_c.hst_pg,
			:zjgl_mst_c.od_ind,
			:zjgl_mst_c.name,
			:zjgl_mst_c.lim_amt,
			:zjgl_mst_c.lim_bal,
			:zjgl_mst_c.lim_term,
			:zjgl_mst_c.lim_beg_date,
			:zjgl_mst_c.lim_end_date,
			:zjgl_mst_c.tmp1,
			:zjgl_mst_c.tmp2,
			:zjgl_mst_c.tmp_amt1,
			:zjgl_mst_c.tmp_amt2);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT zjgl_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT zjgl_mst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
