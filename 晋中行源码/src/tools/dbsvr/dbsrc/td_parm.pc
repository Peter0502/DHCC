#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"td_parm_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int td_parm_con ( struct td_parm_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct td_parm_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->prdt_no);
	zip_tail(ps->title);
	zip_tail(ps->term_type);
	zip_tail(ps->cif_type);
	zip_tail(ps->cur_no);
	zip_tail(ps->bal_type);
	zip_tail(ps->td_type);
	zip_tail(ps->rate_no);
	zip_tail(ps->rate_type);
	zip_tail(ps->rate_mode);
	zip_tail(ps->rate_func_code);
	zip_tail(ps->intst_term_type);
	zip_tail(ps->keep_ind);
	zip_tail(ps->ovrd_intst_ind);
	zip_tail(ps->ovrd_rate_no);
	zip_tail(ps->felbck_rate_no);
	zip_tail(ps->intst_type);
	zip_tail(ps->acm_calc_mode);
	zip_tail(ps->tfr_lmt_ind);
	zip_tail(ps->tfr_prt_ind);
	zip_tail(ps->atterm_prt_ind);
	zip_tail(ps->atterm_date_ind);
	zip_tail(ps->intst_tax_no);
	zip_tail(ps->cash_ind);
	zip_tail(ps->dpst_ind);
	zip_tail(ps->wdr_ind);
	zip_tail(ps->fwd_draw_ind);
	zip_tail(ps->thr_dpst_ind);
	zip_tail(ps->thr_draw_ind);
	zip_tail(ps->thr_opn_ind);
	zip_tail(ps->thr_cls_ind);
	zip_tail(ps->intvl_type);
	zip_tail(ps->edu_pro_ind);
	zip_tail(ps->holi_ind);
	zip_tail(ps->dc_code);
	zip_tail(ps->put_ind);
	zip_tail(ps->br_no);
}
int Td_parm_Debug(struct td_parm_c *ps){
	vtcp_log("td_parm_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("td_parm_c.prdt_no=[%s]\n",ps->prdt_no);
	vtcp_log("td_parm_c.title=[%s]\n",ps->title);
	vtcp_log("td_parm_c.beg_date=[%ld]\n",ps->beg_date);
	vtcp_log("td_parm_c.end_date=[%ld]\n",ps->end_date);
	vtcp_log("td_parm_c.term=[%ld]\n",ps->term);
	vtcp_log("td_parm_c.term_type=[%s]\n",ps->term_type);
	vtcp_log("td_parm_c.cif_type=[%s]\n",ps->cif_type);
	vtcp_log("td_parm_c.cur_no=[%s]\n",ps->cur_no);
	vtcp_log("td_parm_c.bal_type=[%s]\n",ps->bal_type);
	vtcp_log("td_parm_c.min_bal=[%f]\n",ps->min_bal);
	vtcp_log("td_parm_c.max_bal=[%f]\n",ps->max_bal);
	vtcp_log("td_parm_c.min_opn_amt=[%f]\n",ps->min_opn_amt);
	vtcp_log("td_parm_c.max_opn_amt=[%f]\n",ps->max_opn_amt);
	vtcp_log("td_parm_c.td_type=[%s]\n",ps->td_type);
	vtcp_log("td_parm_c.rate_no=[%s]\n",ps->rate_no);
	vtcp_log("td_parm_c.rate_type=[%s]\n",ps->rate_type);
	vtcp_log("td_parm_c.rate_mode=[%s]\n",ps->rate_mode);
	vtcp_log("td_parm_c.rate_func_code=[%s]\n",ps->rate_func_code);
	vtcp_log("td_parm_c.min_flt_ratio=[%f]\n",ps->min_flt_ratio);
	vtcp_log("td_parm_c.max_flt_ratio=[%f]\n",ps->max_flt_ratio);
	vtcp_log("td_parm_c.intst_term_type=[%s]\n",ps->intst_term_type);
	vtcp_log("td_parm_c.keep_ind=[%s]\n",ps->keep_ind);
	vtcp_log("td_parm_c.ovrd_intst_ind=[%s]\n",ps->ovrd_intst_ind);
	vtcp_log("td_parm_c.ovrd_rate_no=[%s]\n",ps->ovrd_rate_no);
	vtcp_log("td_parm_c.felbck_rate_no=[%s]\n",ps->felbck_rate_no);
	vtcp_log("td_parm_c.intst_type=[%s]\n",ps->intst_type);
	vtcp_log("td_parm_c.acm_calc_mode=[%s]\n",ps->acm_calc_mode);
	vtcp_log("td_parm_c.intst_mon=[%ld]\n",ps->intst_mon);
	vtcp_log("td_parm_c.intst_day=[%ld]\n",ps->intst_day);
	vtcp_log("td_parm_c.tfr_lmt_ind=[%s]\n",ps->tfr_lmt_ind);
	vtcp_log("td_parm_c.tfr_prt_ind=[%s]\n",ps->tfr_prt_ind);
	vtcp_log("td_parm_c.atterm_prt_ind=[%s]\n",ps->atterm_prt_ind);
	vtcp_log("td_parm_c.atterm_date_ind=[%s]\n",ps->atterm_date_ind);
	vtcp_log("td_parm_c.intst_tax_no=[%s]\n",ps->intst_tax_no);
	vtcp_log("td_parm_c.cash_ind=[%s]\n",ps->cash_ind);
	vtcp_log("td_parm_c.dpst_ind=[%s]\n",ps->dpst_ind);
	vtcp_log("td_parm_c.dpst_min_amt=[%f]\n",ps->dpst_min_amt);
	vtcp_log("td_parm_c.draw_min_amt=[%f]\n",ps->draw_min_amt);
	vtcp_log("td_parm_c.wdr_ind=[%s]\n",ps->wdr_ind);
	vtcp_log("td_parm_c.fwd_draw_ind=[%s]\n",ps->fwd_draw_ind);
	vtcp_log("td_parm_c.wdr_lmt_cnt=[%ld]\n",ps->wdr_lmt_cnt);
	vtcp_log("td_parm_c.thr_dpst_ind=[%s]\n",ps->thr_dpst_ind);
	vtcp_log("td_parm_c.thr_draw_ind=[%s]\n",ps->thr_draw_ind);
	vtcp_log("td_parm_c.thr_opn_ind=[%s]\n",ps->thr_opn_ind);
	vtcp_log("td_parm_c.thr_cls_ind=[%s]\n",ps->thr_cls_ind);
	vtcp_log("td_parm_c.dedr_intvl=[%ld]\n",ps->dedr_intvl);
	vtcp_log("td_parm_c.intvl_type=[%s]\n",ps->intvl_type);
	vtcp_log("td_parm_c.edu_pro_ind=[%s]\n",ps->edu_pro_ind);
	vtcp_log("td_parm_c.holi_ind=[%s]\n",ps->holi_ind);
	vtcp_log("td_parm_c.opn_lmt=[%ld]\n",ps->opn_lmt);
	vtcp_log("td_parm_c.cls_lmt=[%ld]\n",ps->cls_lmt);
	vtcp_log("td_parm_c.dc_code=[%s]\n",ps->dc_code);
	vtcp_log("td_parm_c.put_ind=[%s]\n",ps->put_ind);
	vtcp_log("td_parm_c.br_no=[%s]\n",ps->br_no);
	vtcp_log("td_parm_c.prt_no=[%ld]\n",ps->prt_no);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Td_parm_Sel(reply,td_parm_c,fmtstr,va_alist)
char    *reply;
struct  td_parm_c *td_parm_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Td_parm_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Td_parm_Fet_Sel( td_parm_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Td_parm_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Td_parm_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,td_parm.* FROM td_parm WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE td_parm_sel FROM :comm;
	EXEC SQL DECLARE sel_td_parm CURSOR FOR td_parm_sel;

	EXEC SQL OPEN sel_td_parm;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN td_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Td_parm_Fet_Sel ( struct td_parm_c *td_parm_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_td_parm INTO :td_parm_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch td_parm error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch td_parm finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(td_parm_c);

	return 0;
}

int Td_parm_Clo_Sel (){
	EXEC SQL CLOSE sel_td_parm;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Td_parm_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,td_parm.* FROM td_parm WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE td_parm_upd FROM :comm;

	EXEC SQL DECLARE upd_td_parm CURSOR FOR td_parm_upd;

	EXEC SQL OPEN upd_td_parm;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open td_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Td_parm_Fet_Upd( struct td_parm_c *td_parm_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_td_parm INTO :td_parm_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd td_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH td_parm finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(td_parm_c);

	return 0;
}

int Td_parm_Upd_Upd( struct td_parm_c td_parm_c , char * reply){
	int ret;

	EXEC SQL UPDATE td_parm SET prdt_no=:td_parm_c.prdt_no,
			title=:td_parm_c.title,
			beg_date=:td_parm_c.beg_date,
			end_date=:td_parm_c.end_date,
			term=:td_parm_c.term,
			term_type=:td_parm_c.term_type,
			cif_type=:td_parm_c.cif_type,
			cur_no=:td_parm_c.cur_no,
			bal_type=:td_parm_c.bal_type,
			min_bal=:td_parm_c.min_bal,
			max_bal=:td_parm_c.max_bal,
			min_opn_amt=:td_parm_c.min_opn_amt,
			max_opn_amt=:td_parm_c.max_opn_amt,
			td_type=:td_parm_c.td_type,
			rate_no=:td_parm_c.rate_no,
			rate_type=:td_parm_c.rate_type,
			rate_mode=:td_parm_c.rate_mode,
			rate_func_code=:td_parm_c.rate_func_code,
			min_flt_ratio=:td_parm_c.min_flt_ratio,
			max_flt_ratio=:td_parm_c.max_flt_ratio,
			intst_term_type=:td_parm_c.intst_term_type,
			keep_ind=:td_parm_c.keep_ind,
			ovrd_intst_ind=:td_parm_c.ovrd_intst_ind,
			ovrd_rate_no=:td_parm_c.ovrd_rate_no,
			felbck_rate_no=:td_parm_c.felbck_rate_no,
			intst_type=:td_parm_c.intst_type,
			acm_calc_mode=:td_parm_c.acm_calc_mode,
			intst_mon=:td_parm_c.intst_mon,
			intst_day=:td_parm_c.intst_day,
			tfr_lmt_ind=:td_parm_c.tfr_lmt_ind,
			tfr_prt_ind=:td_parm_c.tfr_prt_ind,
			atterm_prt_ind=:td_parm_c.atterm_prt_ind,
			atterm_date_ind=:td_parm_c.atterm_date_ind,
			intst_tax_no=:td_parm_c.intst_tax_no,
			cash_ind=:td_parm_c.cash_ind,
			dpst_ind=:td_parm_c.dpst_ind,
			dpst_min_amt=:td_parm_c.dpst_min_amt,
			draw_min_amt=:td_parm_c.draw_min_amt,
			wdr_ind=:td_parm_c.wdr_ind,
			fwd_draw_ind=:td_parm_c.fwd_draw_ind,
			wdr_lmt_cnt=:td_parm_c.wdr_lmt_cnt,
			thr_dpst_ind=:td_parm_c.thr_dpst_ind,
			thr_draw_ind=:td_parm_c.thr_draw_ind,
			thr_opn_ind=:td_parm_c.thr_opn_ind,
			thr_cls_ind=:td_parm_c.thr_cls_ind,
			dedr_intvl=:td_parm_c.dedr_intvl,
			intvl_type=:td_parm_c.intvl_type,
			edu_pro_ind=:td_parm_c.edu_pro_ind,
			holi_ind=:td_parm_c.holi_ind,
			opn_lmt=:td_parm_c.opn_lmt,
			cls_lmt=:td_parm_c.cls_lmt,
			dc_code=:td_parm_c.dc_code,
			put_ind=:td_parm_c.put_ind,
			br_no=:td_parm_c.br_no,
			prt_no=:td_parm_c.prt_no
	WHERE rowid=:td_parm_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE td_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Td_parm_Del_Upd(struct td_parm_c td_parm_c , char * reply  ){

	EXEC SQL DELETE FROM td_parm WHERE rowid=:td_parm_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE td_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Td_parm_Clo_Upd( ){
	EXEC SQL CLOSE upd_td_parm;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Td_parm_Ins( struct td_parm_c td_parm_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO td_parm VALUES (:td_parm_c.prdt_no,
			:td_parm_c.title,
			:td_parm_c.beg_date,
			:td_parm_c.end_date,
			:td_parm_c.term,
			:td_parm_c.term_type,
			:td_parm_c.cif_type,
			:td_parm_c.cur_no,
			:td_parm_c.bal_type,
			:td_parm_c.min_bal,
			:td_parm_c.max_bal,
			:td_parm_c.min_opn_amt,
			:td_parm_c.max_opn_amt,
			:td_parm_c.td_type,
			:td_parm_c.rate_no,
			:td_parm_c.rate_type,
			:td_parm_c.rate_mode,
			:td_parm_c.rate_func_code,
			:td_parm_c.min_flt_ratio,
			:td_parm_c.max_flt_ratio,
			:td_parm_c.intst_term_type,
			:td_parm_c.keep_ind,
			:td_parm_c.ovrd_intst_ind,
			:td_parm_c.ovrd_rate_no,
			:td_parm_c.felbck_rate_no,
			:td_parm_c.intst_type,
			:td_parm_c.acm_calc_mode,
			:td_parm_c.intst_mon,
			:td_parm_c.intst_day,
			:td_parm_c.tfr_lmt_ind,
			:td_parm_c.tfr_prt_ind,
			:td_parm_c.atterm_prt_ind,
			:td_parm_c.atterm_date_ind,
			:td_parm_c.intst_tax_no,
			:td_parm_c.cash_ind,
			:td_parm_c.dpst_ind,
			:td_parm_c.dpst_min_amt,
			:td_parm_c.draw_min_amt,
			:td_parm_c.wdr_ind,
			:td_parm_c.fwd_draw_ind,
			:td_parm_c.wdr_lmt_cnt,
			:td_parm_c.thr_dpst_ind,
			:td_parm_c.thr_draw_ind,
			:td_parm_c.thr_opn_ind,
			:td_parm_c.thr_cls_ind,
			:td_parm_c.dedr_intvl,
			:td_parm_c.intvl_type,
			:td_parm_c.edu_pro_ind,
			:td_parm_c.holi_ind,
			:td_parm_c.opn_lmt,
			:td_parm_c.cls_lmt,
			:td_parm_c.dc_code,
			:td_parm_c.put_ind,
			:td_parm_c.br_no,
			:td_parm_c.prt_no);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT td_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT td_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
