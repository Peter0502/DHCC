#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"correl_brf_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int correl_brf_con ( struct correl_brf_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct correl_brf_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->brf);
	zip_tail(ps->target_no);
}
int Correl_brf_Debug(struct correl_brf_c *ps){
	vtcp_log("correl_brf_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("correl_brf_c.brf=[%s]\n",ps->brf);
	vtcp_log("correl_brf_c.target_no=[%s]\n",ps->target_no);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Correl_brf_Sel(reply,correl_brf_c,fmtstr,va_alist)
char    *reply;
struct  correl_brf_c *correl_brf_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Correl_brf_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Correl_brf_Fet_Sel( correl_brf_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Correl_brf_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Correl_brf_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,correl_brf.* FROM correl_brf WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE correl_brf_sel FROM :comm;
	EXEC SQL DECLARE sel_correl_brf CURSOR FOR correl_brf_sel;

	EXEC SQL OPEN sel_correl_brf;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN correl_brf error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Correl_brf_Fet_Sel ( struct correl_brf_c *correl_brf_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_correl_brf INTO :correl_brf_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch correl_brf error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch correl_brf finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(correl_brf_c);

	return 0;
}

int Correl_brf_Clo_Sel (){
	EXEC SQL CLOSE sel_correl_brf;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Correl_brf_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,correl_brf.* FROM correl_brf WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE correl_brf_upd FROM :comm;

	EXEC SQL DECLARE upd_correl_brf CURSOR FOR correl_brf_upd;

	EXEC SQL OPEN upd_correl_brf;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open correl_brf error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Correl_brf_Fet_Upd( struct correl_brf_c *correl_brf_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_correl_brf INTO :correl_brf_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd correl_brf error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH correl_brf finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(correl_brf_c);

	return 0;
}

int Correl_brf_Upd_Upd( struct correl_brf_c correl_brf_c , char * reply){
	int ret;

	EXEC SQL UPDATE correl_brf SET brf=:correl_brf_c.brf,
			target_no=:correl_brf_c.target_no
	WHERE rowid=:correl_brf_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE correl_brf error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Correl_brf_Del_Upd(struct correl_brf_c correl_brf_c , char * reply  ){

	EXEC SQL DELETE FROM correl_brf WHERE rowid=:correl_brf_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE correl_brf error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Correl_brf_Clo_Upd( ){
	EXEC SQL CLOSE upd_correl_brf;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Correl_brf_Ins( struct correl_brf_c correl_brf_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO correl_brf VALUES (:correl_brf_c.brf,
			:correl_brf_c.target_no);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT correl_brf error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT correl_brf error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
