#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"dd_mst_hst_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int dd_mst_hst_con ( struct dd_mst_hst_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct dd_mst_hst_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->opn_br_no);
	zip_tail(ps->tx_br_no);
	zip_tail(ps->tx_code);
	zip_tail(ps->sub_tx_code);
	zip_tail(ps->add_ind);
	zip_tail(ps->ct_ind);
	zip_tail(ps->note_type);
	zip_tail(ps->note_no);
	zip_tail(ps->brf);
	zip_tail(ps->tel);
	zip_tail(ps->chk);
	zip_tail(ps->auth);
}
int Dd_mst_hst_Debug(struct dd_mst_hst_c *ps){
	vtcp_log("dd_mst_hst_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("dd_mst_hst_c.trace_no=[%ld]\n",ps->trace_no);
	vtcp_log("dd_mst_hst_c.trace_cnt=[%ld]\n",ps->trace_cnt);
	vtcp_log("dd_mst_hst_c.opn_br_no=[%s]\n",ps->opn_br_no);
	vtcp_log("dd_mst_hst_c.tx_br_no=[%s]\n",ps->tx_br_no);
	vtcp_log("dd_mst_hst_c.ac_id=[%ld]\n",ps->ac_id);
	vtcp_log("dd_mst_hst_c.ac_seqn=[%ld]\n",ps->ac_seqn);
	vtcp_log("dd_mst_hst_c.tx_code=[%s]\n",ps->tx_code);
	vtcp_log("dd_mst_hst_c.sub_tx_code=[%s]\n",ps->sub_tx_code);
	vtcp_log("dd_mst_hst_c.add_ind=[%s]\n",ps->add_ind);
	vtcp_log("dd_mst_hst_c.ct_ind=[%s]\n",ps->ct_ind);
	vtcp_log("dd_mst_hst_c.tx_amt=[%f]\n",ps->tx_amt);
	vtcp_log("dd_mst_hst_c.bal=[%f]\n",ps->bal);
	vtcp_log("dd_mst_hst_c.acbo_bal=[%f]\n",ps->acbo_bal);
	vtcp_log("dd_mst_hst_c.intst_acm=[%f]\n",ps->intst_acm);
	vtcp_log("dd_mst_hst_c.tx_date=[%ld]\n",ps->tx_date);
	vtcp_log("dd_mst_hst_c.tx_time=[%ld]\n",ps->tx_time);
	vtcp_log("dd_mst_hst_c.note_type=[%s]\n",ps->note_type);
	vtcp_log("dd_mst_hst_c.note_no=[%s]\n",ps->note_no);
	vtcp_log("dd_mst_hst_c.hst_cnt=[%ld]\n",ps->hst_cnt);
	vtcp_log("dd_mst_hst_c.brf=[%s]\n",ps->brf);
	vtcp_log("dd_mst_hst_c.tel=[%s]\n",ps->tel);
	vtcp_log("dd_mst_hst_c.chk=[%s]\n",ps->chk);
	vtcp_log("dd_mst_hst_c.auth=[%s]\n",ps->auth);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Dd_mst_hst_Sel(reply,dd_mst_hst_c,fmtstr,va_alist)
char    *reply;
struct  dd_mst_hst_c *dd_mst_hst_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Dd_mst_hst_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Dd_mst_hst_Fet_Sel( dd_mst_hst_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Dd_mst_hst_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Dd_mst_hst_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,dd_mst_hst.* FROM dd_mst_hst WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE dd_mst_hst_sel FROM :comm;
	EXEC SQL DECLARE sel_dd_mst_hst CURSOR FOR dd_mst_hst_sel;

	EXEC SQL OPEN sel_dd_mst_hst;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN dd_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Dd_mst_hst_Fet_Sel ( struct dd_mst_hst_c *dd_mst_hst_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_dd_mst_hst INTO :dd_mst_hst_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch dd_mst_hst error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch dd_mst_hst finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(dd_mst_hst_c);

	return 0;
}

int Dd_mst_hst_Clo_Sel (){
	EXEC SQL CLOSE sel_dd_mst_hst;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Dd_mst_hst_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,dd_mst_hst.* FROM dd_mst_hst WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE dd_mst_hst_upd FROM :comm;

	EXEC SQL DECLARE upd_dd_mst_hst CURSOR FOR dd_mst_hst_upd;

	EXEC SQL OPEN upd_dd_mst_hst;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open dd_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Dd_mst_hst_Fet_Upd( struct dd_mst_hst_c *dd_mst_hst_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_dd_mst_hst INTO :dd_mst_hst_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd dd_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH dd_mst_hst finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(dd_mst_hst_c);

	return 0;
}

int Dd_mst_hst_Upd_Upd( struct dd_mst_hst_c dd_mst_hst_c , char * reply){
	int ret;

	EXEC SQL UPDATE dd_mst_hst SET trace_no=:dd_mst_hst_c.trace_no,
			trace_cnt=:dd_mst_hst_c.trace_cnt,
			opn_br_no=:dd_mst_hst_c.opn_br_no,
			tx_br_no=:dd_mst_hst_c.tx_br_no,
			ac_id=:dd_mst_hst_c.ac_id,
			ac_seqn=:dd_mst_hst_c.ac_seqn,
			tx_code=:dd_mst_hst_c.tx_code,
			sub_tx_code=:dd_mst_hst_c.sub_tx_code,
			add_ind=:dd_mst_hst_c.add_ind,
			ct_ind=:dd_mst_hst_c.ct_ind,
			tx_amt=:dd_mst_hst_c.tx_amt,
			bal=:dd_mst_hst_c.bal,
			acbo_bal=:dd_mst_hst_c.acbo_bal,
			intst_acm=:dd_mst_hst_c.intst_acm,
			tx_date=:dd_mst_hst_c.tx_date,
			tx_time=:dd_mst_hst_c.tx_time,
			note_type=:dd_mst_hst_c.note_type,
			note_no=:dd_mst_hst_c.note_no,
			hst_cnt=:dd_mst_hst_c.hst_cnt,
			brf=:dd_mst_hst_c.brf,
			tel=:dd_mst_hst_c.tel,
			chk=:dd_mst_hst_c.chk,
			auth=:dd_mst_hst_c.auth
	WHERE rowid=:dd_mst_hst_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE dd_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Dd_mst_hst_Del_Upd(struct dd_mst_hst_c dd_mst_hst_c , char * reply  ){

	EXEC SQL DELETE FROM dd_mst_hst WHERE rowid=:dd_mst_hst_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE dd_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Dd_mst_hst_Clo_Upd( ){
	EXEC SQL CLOSE upd_dd_mst_hst;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Dd_mst_hst_Ins( struct dd_mst_hst_c dd_mst_hst_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO dd_mst_hst VALUES (:dd_mst_hst_c.trace_no,
			:dd_mst_hst_c.trace_cnt,
			:dd_mst_hst_c.opn_br_no,
			:dd_mst_hst_c.tx_br_no,
			:dd_mst_hst_c.ac_id,
			:dd_mst_hst_c.ac_seqn,
			:dd_mst_hst_c.tx_code,
			:dd_mst_hst_c.sub_tx_code,
			:dd_mst_hst_c.add_ind,
			:dd_mst_hst_c.ct_ind,
			:dd_mst_hst_c.tx_amt,
			:dd_mst_hst_c.bal,
			:dd_mst_hst_c.acbo_bal,
			:dd_mst_hst_c.intst_acm,
			:dd_mst_hst_c.tx_date,
			:dd_mst_hst_c.tx_time,
			:dd_mst_hst_c.note_type,
			:dd_mst_hst_c.note_no,
			:dd_mst_hst_c.hst_cnt,
			:dd_mst_hst_c.brf,
			:dd_mst_hst_c.tel,
			:dd_mst_hst_c.chk,
			:dd_mst_hst_c.auth);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT dd_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT dd_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
/*****************************************************************************/
/****                              查询函数部分[1]                       ****/
/*****************************************************************************/
int Dd_mst_hst_Sel1(reply,dd_mst_hst_c,fmtstr,va_alist)
char    *reply;
struct  dd_mst_hst_c *dd_mst_hst_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Dd_mst_hst_Dec_Sel1( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Dd_mst_hst_Fet_Sel1( dd_mst_hst_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Dd_mst_hst_Clo_Sel1();

	return 0;
}



char *key_strcat(char *,char *);
int Dd_mst_hst_Dec_Sel1 ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,dd_mst_hst.* FROM dd_mst_hst WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE dd_mst_hst_sel1 FROM :comm;
	EXEC SQL DECLARE sel_dd_mst_hst1 CURSOR FOR dd_mst_hst_sel1;

	EXEC SQL OPEN sel_dd_mst_hst1;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN dd_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Dd_mst_hst_Fet_Sel1 ( struct dd_mst_hst_c *dd_mst_hst_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_dd_mst_hst1 INTO :dd_mst_hst_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch dd_mst_hst error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch dd_mst_hst finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(dd_mst_hst_c);

	return 0;
}

int Dd_mst_hst_Clo_Sel1 (){
	EXEC SQL CLOSE sel_dd_mst_hst1;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Dd_mst_hst_Dec_Upd1( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,dd_mst_hst.* FROM dd_mst_hst WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE dd_mst_hst_upd1 FROM :comm;

	EXEC SQL DECLARE upd_dd_mst_hst1 CURSOR FOR dd_mst_hst_upd1;

	EXEC SQL OPEN upd_dd_mst_hst1;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open dd_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Dd_mst_hst_Fet_Upd1( struct dd_mst_hst_c *dd_mst_hst_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_dd_mst_hst1 INTO :dd_mst_hst_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd dd_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH dd_mst_hst finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(dd_mst_hst_c);

	return 0;
}

int Dd_mst_hst_Clo_Upd1( ){
	EXEC SQL CLOSE upd_dd_mst_hst1;
	return 0;
}

/*****************************************************************************/
/****                              查询函数部分[2]                       ****/
/*****************************************************************************/
int Dd_mst_hst_Sel2(reply,dd_mst_hst_c,fmtstr,va_alist)
char    *reply;
struct  dd_mst_hst_c *dd_mst_hst_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Dd_mst_hst_Dec_Sel2( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Dd_mst_hst_Fet_Sel2( dd_mst_hst_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Dd_mst_hst_Clo_Sel2();

	return 0;
}



char *key_strcat(char *,char *);
int Dd_mst_hst_Dec_Sel2 ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,dd_mst_hst.* FROM dd_mst_hst WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE dd_mst_hst_sel2 FROM :comm;
	EXEC SQL DECLARE sel_dd_mst_hst2 CURSOR FOR dd_mst_hst_sel2;

	EXEC SQL OPEN sel_dd_mst_hst2;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN dd_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Dd_mst_hst_Fet_Sel2 ( struct dd_mst_hst_c *dd_mst_hst_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_dd_mst_hst2 INTO :dd_mst_hst_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch dd_mst_hst error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch dd_mst_hst finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(dd_mst_hst_c);

	return 0;
}

int Dd_mst_hst_Clo_Sel2 (){
	EXEC SQL CLOSE sel_dd_mst_hst2;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Dd_mst_hst_Dec_Upd2( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,dd_mst_hst.* FROM dd_mst_hst WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE dd_mst_hst_upd2 FROM :comm;

	EXEC SQL DECLARE upd_dd_mst_hst2 CURSOR FOR dd_mst_hst_upd2;

	EXEC SQL OPEN upd_dd_mst_hst2;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open dd_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Dd_mst_hst_Fet_Upd2( struct dd_mst_hst_c *dd_mst_hst_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_dd_mst_hst2 INTO :dd_mst_hst_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd dd_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH dd_mst_hst finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(dd_mst_hst_c);

	return 0;
}

int Dd_mst_hst_Clo_Upd2( ){
	EXEC SQL CLOSE upd_dd_mst_hst2;
	return 0;
}

