#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"mbfereturnrply_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int mbfereturnrply_con ( struct mbfereturnrply_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct mbfereturnrply_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->origrtnappno);
	zip_tail(ps->odficenter);
	zip_tail(ps->isdficode);
	zip_tail(ps->rtnrplybkcode);
	zip_tail(ps->rdficenter);
	zip_tail(ps->osdficode);
	zip_tail(ps->rdficode);
	zip_tail(ps->origtxtype);
	zip_tail(ps->origtxssno);
	zip_tail(ps->rtnrplyuser);
	zip_tail(ps->rtnrplyrus);
	zip_tail(ps->procstate);
	zip_tail(ps->statetime);
	zip_tail(ps->errcode);
	zip_tail(ps->errdesc);
	zip_tail(ps->rtnrplysource);
	zip_tail(ps->strinfo);
}
int Mbfereturnrply_Debug(struct mbfereturnrply_c *ps){
	vtcp_log("mbfereturnrply_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("mbfereturnrply_c.consigndate=[%ld]\n",ps->consigndate);
	vtcp_log("mbfereturnrply_c.origrtnappdate=[%ld]\n",ps->origrtnappdate);
	vtcp_log("mbfereturnrply_c.origrtnappno=[%s]\n",ps->origrtnappno);
	vtcp_log("mbfereturnrply_c.odficenter=[%s]\n",ps->odficenter);
	vtcp_log("mbfereturnrply_c.isdficode=[%s]\n",ps->isdficode);
	vtcp_log("mbfereturnrply_c.rtnrplybkcode=[%s]\n",ps->rtnrplybkcode);
	vtcp_log("mbfereturnrply_c.rdficenter=[%s]\n",ps->rdficenter);
	vtcp_log("mbfereturnrply_c.osdficode=[%s]\n",ps->osdficode);
	vtcp_log("mbfereturnrply_c.rdficode=[%s]\n",ps->rdficode);
	vtcp_log("mbfereturnrply_c.origconsigndate=[%ld]\n",ps->origconsigndate);
	vtcp_log("mbfereturnrply_c.origtxtype=[%s]\n",ps->origtxtype);
	vtcp_log("mbfereturnrply_c.origtxssno=[%s]\n",ps->origtxssno);
	vtcp_log("mbfereturnrply_c.origamount=[%f]\n",ps->origamount);
	vtcp_log("mbfereturnrply_c.rtnrplyuser=[%s]\n",ps->rtnrplyuser);
	vtcp_log("mbfereturnrply_c.rtnrplyrus=[%s]\n",ps->rtnrplyrus);
	vtcp_log("mbfereturnrply_c.procstate=[%s]\n",ps->procstate);
	vtcp_log("mbfereturnrply_c.statetime=[%s]\n",ps->statetime);
	vtcp_log("mbfereturnrply_c.errcode=[%s]\n",ps->errcode);
	vtcp_log("mbfereturnrply_c.errdesc=[%s]\n",ps->errdesc);
	vtcp_log("mbfereturnrply_c.printno=[%ld]\n",ps->printno);
	vtcp_log("mbfereturnrply_c.rtnrplysource=[%s]\n",ps->rtnrplysource);
	vtcp_log("mbfereturnrply_c.strinfo=[%s]\n",ps->strinfo);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Mbfereturnrply_Sel(reply,mbfereturnrply_c,fmtstr,va_alist)
char    *reply;
struct  mbfereturnrply_c *mbfereturnrply_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Mbfereturnrply_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Mbfereturnrply_Fet_Sel( mbfereturnrply_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Mbfereturnrply_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Mbfereturnrply_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,mbfereturnrply.* FROM mbfereturnrply WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mbfereturnrply_sel FROM :comm;
	EXEC SQL DECLARE sel_mbfereturnrply CURSOR FOR mbfereturnrply_sel;

	EXEC SQL OPEN sel_mbfereturnrply;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN mbfereturnrply error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mbfereturnrply_Fet_Sel ( struct mbfereturnrply_c *mbfereturnrply_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_mbfereturnrply INTO :mbfereturnrply_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch mbfereturnrply error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch mbfereturnrply finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(mbfereturnrply_c);

	return 0;
}

int Mbfereturnrply_Clo_Sel (){
	EXEC SQL CLOSE sel_mbfereturnrply;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Mbfereturnrply_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,mbfereturnrply.* FROM mbfereturnrply WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mbfereturnrply_upd FROM :comm;

	EXEC SQL DECLARE upd_mbfereturnrply CURSOR FOR mbfereturnrply_upd;

	EXEC SQL OPEN upd_mbfereturnrply;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open mbfereturnrply error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mbfereturnrply_Fet_Upd( struct mbfereturnrply_c *mbfereturnrply_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_mbfereturnrply INTO :mbfereturnrply_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd mbfereturnrply error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH mbfereturnrply finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(mbfereturnrply_c);

	return 0;
}

int Mbfereturnrply_Upd_Upd( struct mbfereturnrply_c mbfereturnrply_c , char * reply){
	int ret;

	EXEC SQL UPDATE mbfereturnrply SET consigndate=:mbfereturnrply_c.consigndate,
			origrtnappdate=:mbfereturnrply_c.origrtnappdate,
			origrtnappno=:mbfereturnrply_c.origrtnappno,
			odficenter=:mbfereturnrply_c.odficenter,
			isdficode=:mbfereturnrply_c.isdficode,
			rtnrplybkcode=:mbfereturnrply_c.rtnrplybkcode,
			rdficenter=:mbfereturnrply_c.rdficenter,
			osdficode=:mbfereturnrply_c.osdficode,
			rdficode=:mbfereturnrply_c.rdficode,
			origconsigndate=:mbfereturnrply_c.origconsigndate,
			origtxtype=:mbfereturnrply_c.origtxtype,
			origtxssno=:mbfereturnrply_c.origtxssno,
			origamount=:mbfereturnrply_c.origamount,
			rtnrplyuser=:mbfereturnrply_c.rtnrplyuser,
			rtnrplyrus=:mbfereturnrply_c.rtnrplyrus,
			procstate=:mbfereturnrply_c.procstate,
			statetime=:mbfereturnrply_c.statetime,
			errcode=:mbfereturnrply_c.errcode,
			errdesc=:mbfereturnrply_c.errdesc,
			printno=:mbfereturnrply_c.printno,
			rtnrplysource=:mbfereturnrply_c.rtnrplysource,
			strinfo=:mbfereturnrply_c.strinfo
	WHERE rowid=:mbfereturnrply_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE mbfereturnrply error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Mbfereturnrply_Del_Upd(struct mbfereturnrply_c mbfereturnrply_c , char * reply  ){

	EXEC SQL DELETE FROM mbfereturnrply WHERE rowid=:mbfereturnrply_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE mbfereturnrply error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mbfereturnrply_Clo_Upd( ){
	EXEC SQL CLOSE upd_mbfereturnrply;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Mbfereturnrply_Ins( struct mbfereturnrply_c mbfereturnrply_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO mbfereturnrply VALUES (:mbfereturnrply_c.consigndate,
			:mbfereturnrply_c.origrtnappdate,
			:mbfereturnrply_c.origrtnappno,
			:mbfereturnrply_c.odficenter,
			:mbfereturnrply_c.isdficode,
			:mbfereturnrply_c.rtnrplybkcode,
			:mbfereturnrply_c.rdficenter,
			:mbfereturnrply_c.osdficode,
			:mbfereturnrply_c.rdficode,
			:mbfereturnrply_c.origconsigndate,
			:mbfereturnrply_c.origtxtype,
			:mbfereturnrply_c.origtxssno,
			:mbfereturnrply_c.origamount,
			:mbfereturnrply_c.rtnrplyuser,
			:mbfereturnrply_c.rtnrplyrus,
			:mbfereturnrply_c.procstate,
			:mbfereturnrply_c.statetime,
			:mbfereturnrply_c.errcode,
			:mbfereturnrply_c.errdesc,
			:mbfereturnrply_c.printno,
			:mbfereturnrply_c.rtnrplysource,
			:mbfereturnrply_c.strinfo);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT mbfereturnrply error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT mbfereturnrply error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
