#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"cupsppfw_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int cupsppfw_con ( struct cupsppfw_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct cupsppfw_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->brtype);
	zip_tail(ps->filename);
	zip_tail(ps->txday);
	zip_tail(ps->brno);
	zip_tail(ps->firstbr);
	zip_tail(ps->cardtype);
	zip_tail(ps->cdtype);
	zip_tail(ps->jyqd);
	zip_tail(ps->cardjz);
	zip_tail(ps->outtxfg);
	zip_tail(ps->mertype);
	zip_tail(ps->secbr);
	zip_tail(ps->dlbrno);
	zip_tail(ps->fsbrno);
	zip_tail(ps->opnbrno);
	zip_tail(ps->isbkno);
	zip_tail(ps->sdbrno);
	zip_tail(ps->msgtype);
	zip_tail(ps->txcode);
	zip_tail(ps->inputcd);
	zip_tail(ps->trseq);
	zip_tail(ps->txtime);
	zip_tail(ps->cardno);
	zip_tail(ps->outcardno);
	zip_tail(ps->incardno);
	zip_tail(ps->otxmsg);
	zip_tail(ps->atmno);
	zip_tail(ps->acbkflg);
	zip_tail(ps->wssrno);
	zip_tail(ps->tmp1);
	zip_tail(ps->tmp2);
}
int Cupsppfw_Debug(struct cupsppfw_c *ps){
	vtcp_log("cupsppfw_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("cupsppfw_c.brtype=[%s]\n",ps->brtype);
	vtcp_log("cupsppfw_c.filename=[%s]\n",ps->filename);
	vtcp_log("cupsppfw_c.txday=[%s]\n",ps->txday);
	vtcp_log("cupsppfw_c.brno=[%s]\n",ps->brno);
	vtcp_log("cupsppfw_c.firstbr=[%s]\n",ps->firstbr);
	vtcp_log("cupsppfw_c.cardtype=[%s]\n",ps->cardtype);
	vtcp_log("cupsppfw_c.cdtype=[%s]\n",ps->cdtype);
	vtcp_log("cupsppfw_c.jyqd=[%s]\n",ps->jyqd);
	vtcp_log("cupsppfw_c.cardjz=[%s]\n",ps->cardjz);
	vtcp_log("cupsppfw_c.outtxfg=[%s]\n",ps->outtxfg);
	vtcp_log("cupsppfw_c.mertype=[%s]\n",ps->mertype);
	vtcp_log("cupsppfw_c.secbr=[%s]\n",ps->secbr);
	vtcp_log("cupsppfw_c.dlbrno=[%s]\n",ps->dlbrno);
	vtcp_log("cupsppfw_c.fsbrno=[%s]\n",ps->fsbrno);
	vtcp_log("cupsppfw_c.opnbrno=[%s]\n",ps->opnbrno);
	vtcp_log("cupsppfw_c.isbkno=[%s]\n",ps->isbkno);
	vtcp_log("cupsppfw_c.sdbrno=[%s]\n",ps->sdbrno);
	vtcp_log("cupsppfw_c.msgtype=[%s]\n",ps->msgtype);
	vtcp_log("cupsppfw_c.txcode=[%s]\n",ps->txcode);
	vtcp_log("cupsppfw_c.inputcd=[%s]\n",ps->inputcd);
	vtcp_log("cupsppfw_c.trseq=[%s]\n",ps->trseq);
	vtcp_log("cupsppfw_c.txtime=[%s]\n",ps->txtime);
	vtcp_log("cupsppfw_c.cardno=[%s]\n",ps->cardno);
	vtcp_log("cupsppfw_c.outcardno=[%s]\n",ps->outcardno);
	vtcp_log("cupsppfw_c.incardno=[%s]\n",ps->incardno);
	vtcp_log("cupsppfw_c.otxmsg=[%s]\n",ps->otxmsg);
	vtcp_log("cupsppfw_c.atmno=[%s]\n",ps->atmno);
	vtcp_log("cupsppfw_c.acbkflg=[%s]\n",ps->acbkflg);
	vtcp_log("cupsppfw_c.wssrno=[%s]\n",ps->wssrno);
	vtcp_log("cupsppfw_c.txamt=[%f]\n",ps->txamt);
	vtcp_log("cupsppfw_c.slfee=[%f]\n",ps->slfee);
	vtcp_log("cupsppfw_c.pinpfee=[%f]\n",ps->pinpfee);
	vtcp_log("cupsppfw_c.jamt=[%f]\n",ps->jamt);
	vtcp_log("cupsppfw_c.tmp1=[%s]\n",ps->tmp1);
	vtcp_log("cupsppfw_c.tmp2=[%s]\n",ps->tmp2);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Cupsppfw_Sel(reply,cupsppfw_c,fmtstr,va_alist)
char    *reply;
struct  cupsppfw_c *cupsppfw_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Cupsppfw_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Cupsppfw_Fet_Sel( cupsppfw_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Cupsppfw_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Cupsppfw_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,cupsppfw.* FROM cupsppfw WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE cupsppfw_sel FROM :comm;
	EXEC SQL DECLARE sel_cupsppfw CURSOR FOR cupsppfw_sel;

	EXEC SQL OPEN sel_cupsppfw;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN cupsppfw error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Cupsppfw_Fet_Sel ( struct cupsppfw_c *cupsppfw_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_cupsppfw INTO :cupsppfw_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch cupsppfw error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch cupsppfw finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(cupsppfw_c);

	return 0;
}

int Cupsppfw_Clo_Sel (){
	EXEC SQL CLOSE sel_cupsppfw;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Cupsppfw_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,cupsppfw.* FROM cupsppfw WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE cupsppfw_upd FROM :comm;

	EXEC SQL DECLARE upd_cupsppfw CURSOR FOR cupsppfw_upd;

	EXEC SQL OPEN upd_cupsppfw;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open cupsppfw error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Cupsppfw_Fet_Upd( struct cupsppfw_c *cupsppfw_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_cupsppfw INTO :cupsppfw_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd cupsppfw error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH cupsppfw finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(cupsppfw_c);

	return 0;
}

int Cupsppfw_Upd_Upd( struct cupsppfw_c cupsppfw_c , char * reply){
	int ret;

	EXEC SQL UPDATE cupsppfw SET brtype=:cupsppfw_c.brtype,
			filename=:cupsppfw_c.filename,
			txday=:cupsppfw_c.txday,
			brno=:cupsppfw_c.brno,
			firstbr=:cupsppfw_c.firstbr,
			cardtype=:cupsppfw_c.cardtype,
			cdtype=:cupsppfw_c.cdtype,
			jyqd=:cupsppfw_c.jyqd,
			cardjz=:cupsppfw_c.cardjz,
			outtxfg=:cupsppfw_c.outtxfg,
			mertype=:cupsppfw_c.mertype,
			secbr=:cupsppfw_c.secbr,
			dlbrno=:cupsppfw_c.dlbrno,
			fsbrno=:cupsppfw_c.fsbrno,
			opnbrno=:cupsppfw_c.opnbrno,
			isbkno=:cupsppfw_c.isbkno,
			sdbrno=:cupsppfw_c.sdbrno,
			msgtype=:cupsppfw_c.msgtype,
			txcode=:cupsppfw_c.txcode,
			inputcd=:cupsppfw_c.inputcd,
			trseq=:cupsppfw_c.trseq,
			txtime=:cupsppfw_c.txtime,
			cardno=:cupsppfw_c.cardno,
			outcardno=:cupsppfw_c.outcardno,
			incardno=:cupsppfw_c.incardno,
			otxmsg=:cupsppfw_c.otxmsg,
			atmno=:cupsppfw_c.atmno,
			acbkflg=:cupsppfw_c.acbkflg,
			wssrno=:cupsppfw_c.wssrno,
			txamt=:cupsppfw_c.txamt,
			slfee=:cupsppfw_c.slfee,
			pinpfee=:cupsppfw_c.pinpfee,
			jamt=:cupsppfw_c.jamt,
			tmp1=:cupsppfw_c.tmp1,
			tmp2=:cupsppfw_c.tmp2
	WHERE rowid=:cupsppfw_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE cupsppfw error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Cupsppfw_Del_Upd(struct cupsppfw_c cupsppfw_c , char * reply  ){

	EXEC SQL DELETE FROM cupsppfw WHERE rowid=:cupsppfw_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE cupsppfw error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Cupsppfw_Clo_Upd( ){
	EXEC SQL CLOSE upd_cupsppfw;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Cupsppfw_Ins( struct cupsppfw_c cupsppfw_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO cupsppfw VALUES (:cupsppfw_c.brtype,
			:cupsppfw_c.filename,
			:cupsppfw_c.txday,
			:cupsppfw_c.brno,
			:cupsppfw_c.firstbr,
			:cupsppfw_c.cardtype,
			:cupsppfw_c.cdtype,
			:cupsppfw_c.jyqd,
			:cupsppfw_c.cardjz,
			:cupsppfw_c.outtxfg,
			:cupsppfw_c.mertype,
			:cupsppfw_c.secbr,
			:cupsppfw_c.dlbrno,
			:cupsppfw_c.fsbrno,
			:cupsppfw_c.opnbrno,
			:cupsppfw_c.isbkno,
			:cupsppfw_c.sdbrno,
			:cupsppfw_c.msgtype,
			:cupsppfw_c.txcode,
			:cupsppfw_c.inputcd,
			:cupsppfw_c.trseq,
			:cupsppfw_c.txtime,
			:cupsppfw_c.cardno,
			:cupsppfw_c.outcardno,
			:cupsppfw_c.incardno,
			:cupsppfw_c.otxmsg,
			:cupsppfw_c.atmno,
			:cupsppfw_c.acbkflg,
			:cupsppfw_c.wssrno,
			:cupsppfw_c.txamt,
			:cupsppfw_c.slfee,
			:cupsppfw_c.pinpfee,
			:cupsppfw_c.jamt,
			:cupsppfw_c.tmp1,
			:cupsppfw_c.tmp2);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT cupsppfw error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT cupsppfw error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
