#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"fn_parm_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int fn_parm_con ( struct fn_parm_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct fn_parm_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->prdt_code);
	zip_tail(ps->title);
	zip_tail(ps->prdt_type);
	zip_tail(ps->intst_type);
	zip_tail(ps->term_type);
	zip_tail(ps->cif_type);
	zip_tail(ps->cur_no);
	zip_tail(ps->chnl_type);
	zip_tail(ps->risk_lvl);
	zip_tail(ps->invest_type);
	zip_tail(ps->float_rate_flag);
	zip_tail(ps->cancel_flag);
	zip_tail(ps->redempt);
	zip_tail(ps->quota_flag);
	zip_tail(ps->per_ac_no);
	zip_tail(ps->com_ac_no);
	zip_tail(ps->stat);
	zip_tail(ps->tel1);
	zip_tail(ps->tel2);
}
int Fn_parm_Debug(struct fn_parm_c *ps){
	vtcp_log("fn_parm_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("fn_parm_c.prdt_code=[%s]\n",ps->prdt_code);
	vtcp_log("fn_parm_c.title=[%s]\n",ps->title);
	vtcp_log("fn_parm_c.prdt_type=[%s]\n",ps->prdt_type);
	vtcp_log("fn_parm_c.intst_type=[%s]\n",ps->intst_type);
	vtcp_log("fn_parm_c.beg_date=[%ld]\n",ps->beg_date);
	vtcp_log("fn_parm_c.end_date=[%ld]\n",ps->end_date);
	vtcp_log("fn_parm_c.ic_date=[%ld]\n",ps->ic_date);
	vtcp_log("fn_parm_c.mtr_date=[%ld]\n",ps->mtr_date);
	vtcp_log("fn_parm_c.return_date=[%ld]\n",ps->return_date);
	vtcp_log("fn_parm_c.term_type=[%s]\n",ps->term_type);
	vtcp_log("fn_parm_c.term=[%ld]\n",ps->term);
	vtcp_log("fn_parm_c.cif_type=[%s]\n",ps->cif_type);
	vtcp_log("fn_parm_c.cur_no=[%s]\n",ps->cur_no);
	vtcp_log("fn_parm_c.chnl_type=[%s]\n",ps->chnl_type);
	vtcp_log("fn_parm_c.risk_lvl=[%s]\n",ps->risk_lvl);
	vtcp_log("fn_parm_c.invest_type=[%s]\n",ps->invest_type);
	vtcp_log("fn_parm_c.rate=[%f]\n",ps->rate);
	vtcp_log("fn_parm_c.fct_rate=[%f]\n",ps->fct_rate);
	vtcp_log("fn_parm_c.float_rate_flag=[%s]\n",ps->float_rate_flag);
	vtcp_log("fn_parm_c.capital_percent=[%f]\n",ps->capital_percent);
	vtcp_log("fn_parm_c.chrg_rate=[%f]\n",ps->chrg_rate);
	vtcp_log("fn_parm_c.trust_rate=[%f]\n",ps->trust_rate);
	vtcp_log("fn_parm_c.manage_rate=[%f]\n",ps->manage_rate);
	vtcp_log("fn_parm_c.profit_rate=[%f]\n",ps->profit_rate);
	vtcp_log("fn_parm_c.min_amt=[%f]\n",ps->min_amt);
	vtcp_log("fn_parm_c.sale_amt=[%f]\n",ps->sale_amt);
	vtcp_log("fn_parm_c.unit_amt=[%f]\n",ps->unit_amt);
	vtcp_log("fn_parm_c.add_amt=[%f]\n",ps->add_amt);
	vtcp_log("fn_parm_c.per_min_amt=[%f]\n",ps->per_min_amt);
	vtcp_log("fn_parm_c.com_min_amt=[%f]\n",ps->com_min_amt);
	vtcp_log("fn_parm_c.cancel_flag=[%s]\n",ps->cancel_flag);
	vtcp_log("fn_parm_c.redempt=[%s]\n",ps->redempt);
	vtcp_log("fn_parm_c.redempt_chrg=[%f]\n",ps->redempt_chrg);
	vtcp_log("fn_parm_c.quota_flag=[%s]\n",ps->quota_flag);
	vtcp_log("fn_parm_c.per_ac_no=[%s]\n",ps->per_ac_no);
	vtcp_log("fn_parm_c.com_ac_no=[%s]\n",ps->com_ac_no);
	vtcp_log("fn_parm_c.stat=[%s]\n",ps->stat);
	vtcp_log("fn_parm_c.tel1=[%s]\n",ps->tel1);
	vtcp_log("fn_parm_c.tel2=[%s]\n",ps->tel2);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Fn_parm_Sel(reply,fn_parm_c,fmtstr,va_alist)
char    *reply;
struct  fn_parm_c *fn_parm_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Fn_parm_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Fn_parm_Fet_Sel( fn_parm_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Fn_parm_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Fn_parm_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,fn_parm.* FROM fn_parm WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE fn_parm_sel FROM :comm;
	EXEC SQL DECLARE sel_fn_parm CURSOR FOR fn_parm_sel;

	EXEC SQL OPEN sel_fn_parm;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN fn_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Fn_parm_Fet_Sel ( struct fn_parm_c *fn_parm_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_fn_parm INTO :fn_parm_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch fn_parm error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch fn_parm finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(fn_parm_c);

	return 0;
}

int Fn_parm_Clo_Sel (){
	EXEC SQL CLOSE sel_fn_parm;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Fn_parm_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,fn_parm.* FROM fn_parm WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE fn_parm_upd FROM :comm;

	EXEC SQL DECLARE upd_fn_parm CURSOR FOR fn_parm_upd;

	EXEC SQL OPEN upd_fn_parm;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open fn_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Fn_parm_Fet_Upd( struct fn_parm_c *fn_parm_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_fn_parm INTO :fn_parm_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd fn_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH fn_parm finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(fn_parm_c);

	return 0;
}

int Fn_parm_Upd_Upd( struct fn_parm_c fn_parm_c , char * reply){
	int ret;

	EXEC SQL UPDATE fn_parm SET prdt_code=:fn_parm_c.prdt_code,
			title=:fn_parm_c.title,
			prdt_type=:fn_parm_c.prdt_type,
			intst_type=:fn_parm_c.intst_type,
			beg_date=:fn_parm_c.beg_date,
			end_date=:fn_parm_c.end_date,
			ic_date=:fn_parm_c.ic_date,
			mtr_date=:fn_parm_c.mtr_date,
			return_date=:fn_parm_c.return_date,
			term_type=:fn_parm_c.term_type,
			term=:fn_parm_c.term,
			cif_type=:fn_parm_c.cif_type,
			cur_no=:fn_parm_c.cur_no,
			chnl_type=:fn_parm_c.chnl_type,
			risk_lvl=:fn_parm_c.risk_lvl,
			invest_type=:fn_parm_c.invest_type,
			rate=:fn_parm_c.rate,
			fct_rate=:fn_parm_c.fct_rate,
			float_rate_flag=:fn_parm_c.float_rate_flag,
			capital_percent=:fn_parm_c.capital_percent,
			chrg_rate=:fn_parm_c.chrg_rate,
			trust_rate=:fn_parm_c.trust_rate,
			manage_rate=:fn_parm_c.manage_rate,
			profit_rate=:fn_parm_c.profit_rate,
			min_amt=:fn_parm_c.min_amt,
			sale_amt=:fn_parm_c.sale_amt,
			unit_amt=:fn_parm_c.unit_amt,
			add_amt=:fn_parm_c.add_amt,
			per_min_amt=:fn_parm_c.per_min_amt,
			com_min_amt=:fn_parm_c.com_min_amt,
			cancel_flag=:fn_parm_c.cancel_flag,
			redempt=:fn_parm_c.redempt,
			redempt_chrg=:fn_parm_c.redempt_chrg,
			quota_flag=:fn_parm_c.quota_flag,
			per_ac_no=:fn_parm_c.per_ac_no,
			com_ac_no=:fn_parm_c.com_ac_no,
			stat=:fn_parm_c.stat,
			tel1=:fn_parm_c.tel1,
			tel2=:fn_parm_c.tel2
	WHERE rowid=:fn_parm_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE fn_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Fn_parm_Del_Upd(struct fn_parm_c fn_parm_c , char * reply  ){

	EXEC SQL DELETE FROM fn_parm WHERE rowid=:fn_parm_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE fn_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Fn_parm_Clo_Upd( ){
	EXEC SQL CLOSE upd_fn_parm;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Fn_parm_Ins( struct fn_parm_c fn_parm_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO fn_parm VALUES (:fn_parm_c.prdt_code,
			:fn_parm_c.title,
			:fn_parm_c.prdt_type,
			:fn_parm_c.intst_type,
			:fn_parm_c.beg_date,
			:fn_parm_c.end_date,
			:fn_parm_c.ic_date,
			:fn_parm_c.mtr_date,
			:fn_parm_c.return_date,
			:fn_parm_c.term_type,
			:fn_parm_c.term,
			:fn_parm_c.cif_type,
			:fn_parm_c.cur_no,
			:fn_parm_c.chnl_type,
			:fn_parm_c.risk_lvl,
			:fn_parm_c.invest_type,
			:fn_parm_c.rate,
			:fn_parm_c.fct_rate,
			:fn_parm_c.float_rate_flag,
			:fn_parm_c.capital_percent,
			:fn_parm_c.chrg_rate,
			:fn_parm_c.trust_rate,
			:fn_parm_c.manage_rate,
			:fn_parm_c.profit_rate,
			:fn_parm_c.min_amt,
			:fn_parm_c.sale_amt,
			:fn_parm_c.unit_amt,
			:fn_parm_c.add_amt,
			:fn_parm_c.per_min_amt,
			:fn_parm_c.com_min_amt,
			:fn_parm_c.cancel_flag,
			:fn_parm_c.redempt,
			:fn_parm_c.redempt_chrg,
			:fn_parm_c.quota_flag,
			:fn_parm_c.per_ac_no,
			:fn_parm_c.com_ac_no,
			:fn_parm_c.stat,
			:fn_parm_c.tel1,
			:fn_parm_c.tel2);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT fn_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT fn_parm error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
