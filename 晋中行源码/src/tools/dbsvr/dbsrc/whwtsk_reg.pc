#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"whwtsk_reg_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int whwtsk_reg_con ( struct whwtsk_reg_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct whwtsk_reg_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->pact_no);
	zip_tail(ps->tx_br_no);
	zip_tail(ps->payer_name);
	zip_tail(ps->payer_ac_no);
	zip_tail(ps->payer_br_no);
	zip_tail(ps->payer_br_name);
	zip_tail(ps->payee_name);
	zip_tail(ps->payee_ac_no);
	zip_tail(ps->payee_br_name);
	zip_tail(ps->bail_ac_no);
	zip_tail(ps->pact_num);
	zip_tail(ps->over_ac_no);
	zip_tail(ps->acc_po_sts);
	zip_tail(ps->acc_po_ind);
	zip_tail(ps->acc_type);
}
int Whwtsk_reg_Debug(struct whwtsk_reg_c *ps){
	vtcp_log("whwtsk_reg_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("whwtsk_reg_c.pact_no=[%s]\n",ps->pact_no);
	vtcp_log("whwtsk_reg_c.tx_br_no=[%s]\n",ps->tx_br_no);
	vtcp_log("whwtsk_reg_c.req_date=[%ld]\n",ps->req_date);
	vtcp_log("whwtsk_reg_c.payer_name=[%s]\n",ps->payer_name);
	vtcp_log("whwtsk_reg_c.payer_ac_no=[%s]\n",ps->payer_ac_no);
	vtcp_log("whwtsk_reg_c.payer_br_no=[%s]\n",ps->payer_br_no);
	vtcp_log("whwtsk_reg_c.payer_br_name=[%s]\n",ps->payer_br_name);
	vtcp_log("whwtsk_reg_c.payee_name=[%s]\n",ps->payee_name);
	vtcp_log("whwtsk_reg_c.payee_ac_no=[%s]\n",ps->payee_ac_no);
	vtcp_log("whwtsk_reg_c.payee_br_name=[%s]\n",ps->payee_br_name);
	vtcp_log("whwtsk_reg_c.sign_amt=[%f]\n",ps->sign_amt);
	vtcp_log("whwtsk_reg_c.matr_date=[%ld]\n",ps->matr_date);
	vtcp_log("whwtsk_reg_c.bail_ac_no=[%s]\n",ps->bail_ac_no);
	vtcp_log("whwtsk_reg_c.bail_amt=[%f]\n",ps->bail_amt);
	vtcp_log("whwtsk_reg_c.bail_amt_ratio=[%f]\n",ps->bail_amt_ratio);
	vtcp_log("whwtsk_reg_c.pact_num=[%s]\n",ps->pact_num);
	vtcp_log("whwtsk_reg_c.tot_mort_amt=[%f]\n",ps->tot_mort_amt);
	vtcp_log("whwtsk_reg_c.advance_amt=[%f]\n",ps->advance_amt);
	vtcp_log("whwtsk_reg_c.over_ac_no=[%s]\n",ps->over_ac_no);
	vtcp_log("whwtsk_reg_c.over_rate=[%f]\n",ps->over_rate);
	vtcp_log("whwtsk_reg_c.acc_po_sts=[%s]\n",ps->acc_po_sts);
	vtcp_log("whwtsk_reg_c.acc_po_ind=[%s]\n",ps->acc_po_ind);
	vtcp_log("whwtsk_reg_c.acc_type=[%s]\n",ps->acc_type);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Whwtsk_reg_Sel(reply,whwtsk_reg_c,fmtstr,va_alist)
char    *reply;
struct  whwtsk_reg_c *whwtsk_reg_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Whwtsk_reg_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Whwtsk_reg_Fet_Sel( whwtsk_reg_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Whwtsk_reg_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Whwtsk_reg_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,whwtsk_reg.* FROM whwtsk_reg WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE whwtsk_reg_sel FROM :comm;
	EXEC SQL DECLARE sel_whwtsk_reg CURSOR FOR whwtsk_reg_sel;

	EXEC SQL OPEN sel_whwtsk_reg;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN whwtsk_reg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Whwtsk_reg_Fet_Sel ( struct whwtsk_reg_c *whwtsk_reg_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_whwtsk_reg INTO :whwtsk_reg_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch whwtsk_reg error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch whwtsk_reg finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(whwtsk_reg_c);

	return 0;
}

int Whwtsk_reg_Clo_Sel (){
	EXEC SQL CLOSE sel_whwtsk_reg;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Whwtsk_reg_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,whwtsk_reg.* FROM whwtsk_reg WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE whwtsk_reg_upd FROM :comm;

	EXEC SQL DECLARE upd_whwtsk_reg CURSOR FOR whwtsk_reg_upd;

	EXEC SQL OPEN upd_whwtsk_reg;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open whwtsk_reg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Whwtsk_reg_Fet_Upd( struct whwtsk_reg_c *whwtsk_reg_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_whwtsk_reg INTO :whwtsk_reg_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd whwtsk_reg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH whwtsk_reg finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(whwtsk_reg_c);

	return 0;
}

int Whwtsk_reg_Upd_Upd( struct whwtsk_reg_c whwtsk_reg_c , char * reply){
	int ret;

	EXEC SQL UPDATE whwtsk_reg SET pact_no=:whwtsk_reg_c.pact_no,
			tx_br_no=:whwtsk_reg_c.tx_br_no,
			req_date=:whwtsk_reg_c.req_date,
			payer_name=:whwtsk_reg_c.payer_name,
			payer_ac_no=:whwtsk_reg_c.payer_ac_no,
			payer_br_no=:whwtsk_reg_c.payer_br_no,
			payer_br_name=:whwtsk_reg_c.payer_br_name,
			payee_name=:whwtsk_reg_c.payee_name,
			payee_ac_no=:whwtsk_reg_c.payee_ac_no,
			payee_br_name=:whwtsk_reg_c.payee_br_name,
			sign_amt=:whwtsk_reg_c.sign_amt,
			matr_date=:whwtsk_reg_c.matr_date,
			bail_ac_no=:whwtsk_reg_c.bail_ac_no,
			bail_amt=:whwtsk_reg_c.bail_amt,
			bail_amt_ratio=:whwtsk_reg_c.bail_amt_ratio,
			pact_num=:whwtsk_reg_c.pact_num,
			tot_mort_amt=:whwtsk_reg_c.tot_mort_amt,
			advance_amt=:whwtsk_reg_c.advance_amt,
			over_ac_no=:whwtsk_reg_c.over_ac_no,
			over_rate=:whwtsk_reg_c.over_rate,
			acc_po_sts=:whwtsk_reg_c.acc_po_sts,
			acc_po_ind=:whwtsk_reg_c.acc_po_ind,
			acc_type=:whwtsk_reg_c.acc_type
	WHERE rowid=:whwtsk_reg_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE whwtsk_reg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Whwtsk_reg_Del_Upd(struct whwtsk_reg_c whwtsk_reg_c , char * reply  ){

	EXEC SQL DELETE FROM whwtsk_reg WHERE rowid=:whwtsk_reg_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE whwtsk_reg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Whwtsk_reg_Clo_Upd( ){
	EXEC SQL CLOSE upd_whwtsk_reg;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Whwtsk_reg_Ins( struct whwtsk_reg_c whwtsk_reg_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO whwtsk_reg VALUES (:whwtsk_reg_c.pact_no,
			:whwtsk_reg_c.tx_br_no,
			:whwtsk_reg_c.req_date,
			:whwtsk_reg_c.payer_name,
			:whwtsk_reg_c.payer_ac_no,
			:whwtsk_reg_c.payer_br_no,
			:whwtsk_reg_c.payer_br_name,
			:whwtsk_reg_c.payee_name,
			:whwtsk_reg_c.payee_ac_no,
			:whwtsk_reg_c.payee_br_name,
			:whwtsk_reg_c.sign_amt,
			:whwtsk_reg_c.matr_date,
			:whwtsk_reg_c.bail_ac_no,
			:whwtsk_reg_c.bail_amt,
			:whwtsk_reg_c.bail_amt_ratio,
			:whwtsk_reg_c.pact_num,
			:whwtsk_reg_c.tot_mort_amt,
			:whwtsk_reg_c.advance_amt,
			:whwtsk_reg_c.over_ac_no,
			:whwtsk_reg_c.over_rate,
			:whwtsk_reg_c.acc_po_sts,
			:whwtsk_reg_c.acc_po_ind,
			:whwtsk_reg_c.acc_type);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT whwtsk_reg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT whwtsk_reg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
