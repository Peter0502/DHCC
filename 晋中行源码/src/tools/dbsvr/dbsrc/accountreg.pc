#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"accountreg_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int accountreg_con ( struct accountreg_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct accountreg_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->br_no);
	zip_tail(ps->change_no);
	zip_tail(ps->br_name);
	zip_tail(ps->note_type);
	zip_tail(ps->note_no);
	zip_tail(ps->pay_ac_no);
	zip_tail(ps->pay_name);
	zip_tail(ps->cash_ac_no);
	zip_tail(ps->cash_name);
	zip_tail(ps->cash_opn_br_no);
	zip_tail(ps->cash_chg_no);
	zip_tail(ps->cash_opn_name);
	zip_tail(ps->put_flag);
	zip_tail(ps->stat);
	zip_tail(ps->tel);
	zip_tail(ps->chk);
	zip_tail(ps->pwd);
}
int Accountreg_Debug(struct accountreg_c *ps){
	vtcp_log("accountreg_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("accountreg_c.br_no=[%s]\n",ps->br_no);
	vtcp_log("accountreg_c.trace_no=[%ld]\n",ps->trace_no);
	vtcp_log("accountreg_c.seqno=[%ld]\n",ps->seqno);
	vtcp_log("accountreg_c.change_no=[%s]\n",ps->change_no);
	vtcp_log("accountreg_c.br_name=[%s]\n",ps->br_name);
	vtcp_log("accountreg_c.note_type=[%s]\n",ps->note_type);
	vtcp_log("accountreg_c.note_no=[%s]\n",ps->note_no);
	vtcp_log("accountreg_c.pay_ac_no=[%s]\n",ps->pay_ac_no);
	vtcp_log("accountreg_c.pay_name=[%s]\n",ps->pay_name);
	vtcp_log("accountreg_c.amt=[%f]\n",ps->amt);
	vtcp_log("accountreg_c.cash_ac_no=[%s]\n",ps->cash_ac_no);
	vtcp_log("accountreg_c.cash_name=[%s]\n",ps->cash_name);
	vtcp_log("accountreg_c.cash_opn_br_no=[%s]\n",ps->cash_opn_br_no);
	vtcp_log("accountreg_c.cash_chg_no=[%s]\n",ps->cash_chg_no);
	vtcp_log("accountreg_c.cash_opn_name=[%s]\n",ps->cash_opn_name);
	vtcp_log("accountreg_c.put_flag=[%s]\n",ps->put_flag);
	vtcp_log("accountreg_c.tx_date=[%ld]\n",ps->tx_date);
	vtcp_log("accountreg_c.tx_time=[%ld]\n",ps->tx_time);
	vtcp_log("accountreg_c.stat=[%s]\n",ps->stat);
	vtcp_log("accountreg_c.tel=[%s]\n",ps->tel);
	vtcp_log("accountreg_c.chk=[%s]\n",ps->chk);
	vtcp_log("accountreg_c.pwd=[%s]\n",ps->pwd);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Accountreg_Sel(reply,accountreg_c,fmtstr,va_alist)
char    *reply;
struct  accountreg_c *accountreg_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Accountreg_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Accountreg_Fet_Sel( accountreg_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Accountreg_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Accountreg_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,accountreg.* FROM accountreg WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE accountreg_sel FROM :comm;
	EXEC SQL DECLARE sel_accountreg CURSOR FOR accountreg_sel;

	EXEC SQL OPEN sel_accountreg;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN accountreg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Accountreg_Fet_Sel ( struct accountreg_c *accountreg_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_accountreg INTO :accountreg_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch accountreg error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch accountreg finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(accountreg_c);

	return 0;
}

int Accountreg_Clo_Sel (){
	EXEC SQL CLOSE sel_accountreg;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Accountreg_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,accountreg.* FROM accountreg WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE accountreg_upd FROM :comm;

	EXEC SQL DECLARE upd_accountreg CURSOR FOR accountreg_upd;

	EXEC SQL OPEN upd_accountreg;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open accountreg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Accountreg_Fet_Upd( struct accountreg_c *accountreg_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_accountreg INTO :accountreg_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd accountreg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH accountreg finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(accountreg_c);

	return 0;
}

int Accountreg_Upd_Upd( struct accountreg_c accountreg_c , char * reply){
	int ret;

	EXEC SQL UPDATE accountreg SET br_no=:accountreg_c.br_no,
			trace_no=:accountreg_c.trace_no,
			seqno=:accountreg_c.seqno,
			change_no=:accountreg_c.change_no,
			br_name=:accountreg_c.br_name,
			note_type=:accountreg_c.note_type,
			note_no=:accountreg_c.note_no,
			pay_ac_no=:accountreg_c.pay_ac_no,
			pay_name=:accountreg_c.pay_name,
			amt=:accountreg_c.amt,
			cash_ac_no=:accountreg_c.cash_ac_no,
			cash_name=:accountreg_c.cash_name,
			cash_opn_br_no=:accountreg_c.cash_opn_br_no,
			cash_chg_no=:accountreg_c.cash_chg_no,
			cash_opn_name=:accountreg_c.cash_opn_name,
			put_flag=:accountreg_c.put_flag,
			tx_date=:accountreg_c.tx_date,
			tx_time=:accountreg_c.tx_time,
			stat=:accountreg_c.stat,
			tel=:accountreg_c.tel,
			chk=:accountreg_c.chk,
			pwd=:accountreg_c.pwd
	WHERE rowid=:accountreg_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE accountreg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Accountreg_Del_Upd(struct accountreg_c accountreg_c , char * reply  ){

	EXEC SQL DELETE FROM accountreg WHERE rowid=:accountreg_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE accountreg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Accountreg_Clo_Upd( ){
	EXEC SQL CLOSE upd_accountreg;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Accountreg_Ins( struct accountreg_c accountreg_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO accountreg VALUES (:accountreg_c.br_no,
			:accountreg_c.trace_no,
			:accountreg_c.seqno,
			:accountreg_c.change_no,
			:accountreg_c.br_name,
			:accountreg_c.note_type,
			:accountreg_c.note_no,
			:accountreg_c.pay_ac_no,
			:accountreg_c.pay_name,
			:accountreg_c.amt,
			:accountreg_c.cash_ac_no,
			:accountreg_c.cash_name,
			:accountreg_c.cash_opn_br_no,
			:accountreg_c.cash_chg_no,
			:accountreg_c.cash_opn_name,
			:accountreg_c.put_flag,
			:accountreg_c.tx_date,
			:accountreg_c.tx_time,
			:accountreg_c.stat,
			:accountreg_c.tel,
			:accountreg_c.chk,
			:accountreg_c.pwd);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT accountreg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT accountreg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
/*****************************************************************************/
/****                              查询函数部分[1]                       ****/
/*****************************************************************************/
int Accountreg_Sel1(reply,accountreg_c,fmtstr,va_alist)
char    *reply;
struct  accountreg_c *accountreg_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Accountreg_Dec_Sel1( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Accountreg_Fet_Sel1( accountreg_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Accountreg_Clo_Sel1();

	return 0;
}



char *key_strcat(char *,char *);
int Accountreg_Dec_Sel1 ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,accountreg.* FROM accountreg WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE accountreg_sel1 FROM :comm;
	EXEC SQL DECLARE sel_accountreg1 CURSOR FOR accountreg_sel1;

	EXEC SQL OPEN sel_accountreg1;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN accountreg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Accountreg_Fet_Sel1 ( struct accountreg_c *accountreg_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_accountreg1 INTO :accountreg_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch accountreg error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch accountreg finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(accountreg_c);

	return 0;
}

int Accountreg_Clo_Sel1 (){
	EXEC SQL CLOSE sel_accountreg1;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Accountreg_Dec_Upd1( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,accountreg.* FROM accountreg WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE accountreg_upd1 FROM :comm;

	EXEC SQL DECLARE upd_accountreg1 CURSOR FOR accountreg_upd1;

	EXEC SQL OPEN upd_accountreg1;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open accountreg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Accountreg_Fet_Upd1( struct accountreg_c *accountreg_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_accountreg1 INTO :accountreg_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd accountreg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH accountreg finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(accountreg_c);

	return 0;
}

int Accountreg_Clo_Upd1( ){
	EXEC SQL CLOSE upd_accountreg1;
	return 0;
}

