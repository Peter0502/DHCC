#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"mo_po_qry_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int mo_po_qry_con ( struct mo_po_qry_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct mo_po_qry_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->po_no);
	zip_tail(ps->qry_typ);
	zip_tail(ps->brf);
	zip_tail(ps->sts);
	zip_tail(ps->tel);
	zip_tail(ps->br_no);
}
int Mo_po_qry_Debug(struct mo_po_qry_c *ps){
	vtcp_log("mo_po_qry_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("mo_po_qry_c.po_no=[%s]\n",ps->po_no);
	vtcp_log("mo_po_qry_c.qry_typ=[%s]\n",ps->qry_typ);
	vtcp_log("mo_po_qry_c.tx_date=[%ld]\n",ps->tx_date);
	vtcp_log("mo_po_qry_c.brf=[%s]\n",ps->brf);
	vtcp_log("mo_po_qry_c.sts=[%s]\n",ps->sts);
	vtcp_log("mo_po_qry_c.tel=[%s]\n",ps->tel);
	vtcp_log("mo_po_qry_c.br_no=[%s]\n",ps->br_no);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Mo_po_qry_Sel(reply,mo_po_qry_c,fmtstr,va_alist)
char    *reply;
struct  mo_po_qry_c *mo_po_qry_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Mo_po_qry_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Mo_po_qry_Fet_Sel( mo_po_qry_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Mo_po_qry_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Mo_po_qry_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,mo_po_qry.* FROM mo_po_qry WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mo_po_qry_sel FROM :comm;
	EXEC SQL DECLARE sel_mo_po_qry CURSOR FOR mo_po_qry_sel;

	EXEC SQL OPEN sel_mo_po_qry;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN mo_po_qry error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_po_qry_Fet_Sel ( struct mo_po_qry_c *mo_po_qry_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_mo_po_qry INTO :mo_po_qry_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch mo_po_qry error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch mo_po_qry finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(mo_po_qry_c);

	return 0;
}

int Mo_po_qry_Clo_Sel (){
	EXEC SQL CLOSE sel_mo_po_qry;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Mo_po_qry_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,mo_po_qry.* FROM mo_po_qry WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mo_po_qry_upd FROM :comm;

	EXEC SQL DECLARE upd_mo_po_qry CURSOR FOR mo_po_qry_upd;

	EXEC SQL OPEN upd_mo_po_qry;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open mo_po_qry error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_po_qry_Fet_Upd( struct mo_po_qry_c *mo_po_qry_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_mo_po_qry INTO :mo_po_qry_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd mo_po_qry error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH mo_po_qry finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(mo_po_qry_c);

	return 0;
}

int Mo_po_qry_Upd_Upd( struct mo_po_qry_c mo_po_qry_c , char * reply){
	int ret;

	EXEC SQL UPDATE mo_po_qry SET po_no=:mo_po_qry_c.po_no,
			qry_typ=:mo_po_qry_c.qry_typ,
			tx_date=:mo_po_qry_c.tx_date,
			brf=:mo_po_qry_c.brf,
			sts=:mo_po_qry_c.sts,
			tel=:mo_po_qry_c.tel,
			br_no=:mo_po_qry_c.br_no
	WHERE rowid=:mo_po_qry_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE mo_po_qry error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Mo_po_qry_Del_Upd(struct mo_po_qry_c mo_po_qry_c , char * reply  ){

	EXEC SQL DELETE FROM mo_po_qry WHERE rowid=:mo_po_qry_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE mo_po_qry error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_po_qry_Clo_Upd( ){
	EXEC SQL CLOSE upd_mo_po_qry;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Mo_po_qry_Ins( struct mo_po_qry_c mo_po_qry_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO mo_po_qry VALUES (:mo_po_qry_c.po_no,
			:mo_po_qry_c.qry_typ,
			:mo_po_qry_c.tx_date,
			:mo_po_qry_c.brf,
			:mo_po_qry_c.sts,
			:mo_po_qry_c.tel,
			:mo_po_qry_c.br_no);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT mo_po_qry error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT mo_po_qry error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
