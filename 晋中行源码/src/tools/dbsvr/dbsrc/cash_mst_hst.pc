#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"cash_mst_hst_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int cash_mst_hst_con ( struct cash_mst_hst_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct cash_mst_hst_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->br_no);
	zip_tail(ps->ac_no);
	zip_tail(ps->tel);
	zip_tail(ps->cur_no);
	zip_tail(ps->add_ind);
	zip_tail(ps->tw_ac_no);
	zip_tail(ps->brf);
	zip_tail(ps->cash_code);
}
int Cash_mst_hst_Debug(struct cash_mst_hst_c *ps){
	vtcp_log("cash_mst_hst_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("cash_mst_hst_c.trace_no=[%ld]\n",ps->trace_no);
	vtcp_log("cash_mst_hst_c.trace_cnt=[%ld]\n",ps->trace_cnt);
	vtcp_log("cash_mst_hst_c.br_no=[%s]\n",ps->br_no);
	vtcp_log("cash_mst_hst_c.ac_no=[%s]\n",ps->ac_no);
	vtcp_log("cash_mst_hst_c.tel=[%s]\n",ps->tel);
	vtcp_log("cash_mst_hst_c.cur_no=[%s]\n",ps->cur_no);
	vtcp_log("cash_mst_hst_c.add_ind=[%s]\n",ps->add_ind);
	vtcp_log("cash_mst_hst_c.tw_ac_no=[%s]\n",ps->tw_ac_no);
	vtcp_log("cash_mst_hst_c.amt=[%f]\n",ps->amt);
	vtcp_log("cash_mst_hst_c.tx_date=[%ld]\n",ps->tx_date);
	vtcp_log("cash_mst_hst_c.tx_time=[%ld]\n",ps->tx_time);
	vtcp_log("cash_mst_hst_c.brf=[%s]\n",ps->brf);
	vtcp_log("cash_mst_hst_c.t10000=[%ld]\n",ps->t10000);
	vtcp_log("cash_mst_hst_c.t5000=[%ld]\n",ps->t5000);
	vtcp_log("cash_mst_hst_c.t2000=[%ld]\n",ps->t2000);
	vtcp_log("cash_mst_hst_c.t1000=[%ld]\n",ps->t1000);
	vtcp_log("cash_mst_hst_c.t500=[%ld]\n",ps->t500);
	vtcp_log("cash_mst_hst_c.t200=[%ld]\n",ps->t200);
	vtcp_log("cash_mst_hst_c.t100=[%ld]\n",ps->t100);
	vtcp_log("cash_mst_hst_c.t50=[%ld]\n",ps->t50);
	vtcp_log("cash_mst_hst_c.t20=[%ld]\n",ps->t20);
	vtcp_log("cash_mst_hst_c.t10=[%ld]\n",ps->t10);
	vtcp_log("cash_mst_hst_c.t5=[%ld]\n",ps->t5);
	vtcp_log("cash_mst_hst_c.t2=[%ld]\n",ps->t2);
	vtcp_log("cash_mst_hst_c.t1=[%ld]\n",ps->t1);
	vtcp_log("cash_mst_hst_c.cash_code=[%s]\n",ps->cash_code);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Cash_mst_hst_Sel(reply,cash_mst_hst_c,fmtstr,va_alist)
char    *reply;
struct  cash_mst_hst_c *cash_mst_hst_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Cash_mst_hst_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Cash_mst_hst_Fet_Sel( cash_mst_hst_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Cash_mst_hst_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Cash_mst_hst_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,cash_mst_hst.* FROM cash_mst_hst WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE cash_mst_hst_sel FROM :comm;
	EXEC SQL DECLARE sel_cash_mst_hst CURSOR FOR cash_mst_hst_sel;

	EXEC SQL OPEN sel_cash_mst_hst;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN cash_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Cash_mst_hst_Fet_Sel ( struct cash_mst_hst_c *cash_mst_hst_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_cash_mst_hst INTO :cash_mst_hst_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch cash_mst_hst error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch cash_mst_hst finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(cash_mst_hst_c);

	return 0;
}

int Cash_mst_hst_Clo_Sel (){
	EXEC SQL CLOSE sel_cash_mst_hst;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Cash_mst_hst_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,cash_mst_hst.* FROM cash_mst_hst WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE cash_mst_hst_upd FROM :comm;

	EXEC SQL DECLARE upd_cash_mst_hst CURSOR FOR cash_mst_hst_upd;

	EXEC SQL OPEN upd_cash_mst_hst;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open cash_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Cash_mst_hst_Fet_Upd( struct cash_mst_hst_c *cash_mst_hst_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_cash_mst_hst INTO :cash_mst_hst_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd cash_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH cash_mst_hst finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(cash_mst_hst_c);

	return 0;
}

int Cash_mst_hst_Upd_Upd( struct cash_mst_hst_c cash_mst_hst_c , char * reply){
	int ret;

	EXEC SQL UPDATE cash_mst_hst SET trace_no=:cash_mst_hst_c.trace_no,
			trace_cnt=:cash_mst_hst_c.trace_cnt,
			br_no=:cash_mst_hst_c.br_no,
			ac_no=:cash_mst_hst_c.ac_no,
			tel=:cash_mst_hst_c.tel,
			cur_no=:cash_mst_hst_c.cur_no,
			add_ind=:cash_mst_hst_c.add_ind,
			tw_ac_no=:cash_mst_hst_c.tw_ac_no,
			amt=:cash_mst_hst_c.amt,
			tx_date=:cash_mst_hst_c.tx_date,
			tx_time=:cash_mst_hst_c.tx_time,
			brf=:cash_mst_hst_c.brf,
			t10000=:cash_mst_hst_c.t10000,
			t5000=:cash_mst_hst_c.t5000,
			t2000=:cash_mst_hst_c.t2000,
			t1000=:cash_mst_hst_c.t1000,
			t500=:cash_mst_hst_c.t500,
			t200=:cash_mst_hst_c.t200,
			t100=:cash_mst_hst_c.t100,
			t50=:cash_mst_hst_c.t50,
			t20=:cash_mst_hst_c.t20,
			t10=:cash_mst_hst_c.t10,
			t5=:cash_mst_hst_c.t5,
			t2=:cash_mst_hst_c.t2,
			t1=:cash_mst_hst_c.t1,
			cash_code=:cash_mst_hst_c.cash_code
	WHERE rowid=:cash_mst_hst_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE cash_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Cash_mst_hst_Del_Upd(struct cash_mst_hst_c cash_mst_hst_c , char * reply  ){

	EXEC SQL DELETE FROM cash_mst_hst WHERE rowid=:cash_mst_hst_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE cash_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Cash_mst_hst_Clo_Upd( ){
	EXEC SQL CLOSE upd_cash_mst_hst;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Cash_mst_hst_Ins( struct cash_mst_hst_c cash_mst_hst_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO cash_mst_hst VALUES (:cash_mst_hst_c.trace_no,
			:cash_mst_hst_c.trace_cnt,
			:cash_mst_hst_c.br_no,
			:cash_mst_hst_c.ac_no,
			:cash_mst_hst_c.tel,
			:cash_mst_hst_c.cur_no,
			:cash_mst_hst_c.add_ind,
			:cash_mst_hst_c.tw_ac_no,
			:cash_mst_hst_c.amt,
			:cash_mst_hst_c.tx_date,
			:cash_mst_hst_c.tx_time,
			:cash_mst_hst_c.brf,
			:cash_mst_hst_c.t10000,
			:cash_mst_hst_c.t5000,
			:cash_mst_hst_c.t2000,
			:cash_mst_hst_c.t1000,
			:cash_mst_hst_c.t500,
			:cash_mst_hst_c.t200,
			:cash_mst_hst_c.t100,
			:cash_mst_hst_c.t50,
			:cash_mst_hst_c.t20,
			:cash_mst_hst_c.t10,
			:cash_mst_hst_c.t5,
			:cash_mst_hst_c.t2,
			:cash_mst_hst_c.t1,
			:cash_mst_hst_c.cash_code);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT cash_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT cash_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
/*****************************************************************************/
/****                              查询函数部分[1]                       ****/
/*****************************************************************************/
int Cash_mst_hst_Sel1(reply,cash_mst_hst_c,fmtstr,va_alist)
char    *reply;
struct  cash_mst_hst_c *cash_mst_hst_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Cash_mst_hst_Dec_Sel1( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Cash_mst_hst_Fet_Sel1( cash_mst_hst_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Cash_mst_hst_Clo_Sel1();

	return 0;
}



char *key_strcat(char *,char *);
int Cash_mst_hst_Dec_Sel1 ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,cash_mst_hst.* FROM cash_mst_hst WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE cash_mst_hst_sel1 FROM :comm;
	EXEC SQL DECLARE sel_cash_mst_hst1 CURSOR FOR cash_mst_hst_sel1;

	EXEC SQL OPEN sel_cash_mst_hst1;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN cash_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Cash_mst_hst_Fet_Sel1 ( struct cash_mst_hst_c *cash_mst_hst_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_cash_mst_hst1 INTO :cash_mst_hst_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch cash_mst_hst error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch cash_mst_hst finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(cash_mst_hst_c);

	return 0;
}

int Cash_mst_hst_Clo_Sel1 (){
	EXEC SQL CLOSE sel_cash_mst_hst1;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Cash_mst_hst_Dec_Upd1( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,cash_mst_hst.* FROM cash_mst_hst WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE cash_mst_hst_upd1 FROM :comm;

	EXEC SQL DECLARE upd_cash_mst_hst1 CURSOR FOR cash_mst_hst_upd1;

	EXEC SQL OPEN upd_cash_mst_hst1;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open cash_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Cash_mst_hst_Fet_Upd1( struct cash_mst_hst_c *cash_mst_hst_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_cash_mst_hst1 INTO :cash_mst_hst_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd cash_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH cash_mst_hst finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(cash_mst_hst_c);

	return 0;
}

int Cash_mst_hst_Clo_Upd1( ){
	EXEC SQL CLOSE upd_cash_mst_hst1;
	return 0;
}

/*****************************************************************************/
/****                              查询函数部分[2]                       ****/
/*****************************************************************************/
int Cash_mst_hst_Sel2(reply,cash_mst_hst_c,fmtstr,va_alist)
char    *reply;
struct  cash_mst_hst_c *cash_mst_hst_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Cash_mst_hst_Dec_Sel2( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Cash_mst_hst_Fet_Sel2( cash_mst_hst_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Cash_mst_hst_Clo_Sel2();

	return 0;
}



char *key_strcat(char *,char *);
int Cash_mst_hst_Dec_Sel2 ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,cash_mst_hst.* FROM cash_mst_hst WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE cash_mst_hst_sel2 FROM :comm;
	EXEC SQL DECLARE sel_cash_mst_hst2 CURSOR FOR cash_mst_hst_sel2;

	EXEC SQL OPEN sel_cash_mst_hst2;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN cash_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Cash_mst_hst_Fet_Sel2 ( struct cash_mst_hst_c *cash_mst_hst_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_cash_mst_hst2 INTO :cash_mst_hst_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch cash_mst_hst error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch cash_mst_hst finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(cash_mst_hst_c);

	return 0;
}

int Cash_mst_hst_Clo_Sel2 (){
	EXEC SQL CLOSE sel_cash_mst_hst2;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Cash_mst_hst_Dec_Upd2( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,cash_mst_hst.* FROM cash_mst_hst WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE cash_mst_hst_upd2 FROM :comm;

	EXEC SQL DECLARE upd_cash_mst_hst2 CURSOR FOR cash_mst_hst_upd2;

	EXEC SQL OPEN upd_cash_mst_hst2;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open cash_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Cash_mst_hst_Fet_Upd2( struct cash_mst_hst_c *cash_mst_hst_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_cash_mst_hst2 INTO :cash_mst_hst_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd cash_mst_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH cash_mst_hst finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(cash_mst_hst_c);

	return 0;
}

int Cash_mst_hst_Clo_Upd2( ){
	EXEC SQL CLOSE upd_cash_mst_hst2;
	return 0;
}

