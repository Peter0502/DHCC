#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"dc_log_bk_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int dc_log_bk_con ( struct dc_log_bk_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct dc_log_bk_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->entry_code);
	zip_tail(ps->opn_br_no);
	zip_tail(ps->tx_br_no);
	zip_tail(ps->tx_opn_br_no);
	zip_tail(ps->tx_tx_br_no);
	zip_tail(ps->cur_no);
	zip_tail(ps->acc_hrt);
	zip_tail(ps->dc_ind);
	zip_tail(ps->ct_ind);
	zip_tail(ps->note_type);
	zip_tail(ps->note_no);
	zip_tail(ps->tel);
	zip_tail(ps->sts);
}
int Dc_log_bk_Debug(struct dc_log_bk_c *ps){
	vtcp_log("dc_log_bk_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("dc_log_bk_c.tx_date=[%ld]\n",ps->tx_date);
	vtcp_log("dc_log_bk_c.trace_no=[%ld]\n",ps->trace_no);
	vtcp_log("dc_log_bk_c.trace_cnt=[%ld]\n",ps->trace_cnt);
	vtcp_log("dc_log_bk_c.entry_code=[%s]\n",ps->entry_code);
	vtcp_log("dc_log_bk_c.dc_seqn=[%ld]\n",ps->dc_seqn);
	vtcp_log("dc_log_bk_c.opn_br_no=[%s]\n",ps->opn_br_no);
	vtcp_log("dc_log_bk_c.tx_br_no=[%s]\n",ps->tx_br_no);
	vtcp_log("dc_log_bk_c.tx_opn_br_no=[%s]\n",ps->tx_opn_br_no);
	vtcp_log("dc_log_bk_c.tx_tx_br_no=[%s]\n",ps->tx_tx_br_no);
	vtcp_log("dc_log_bk_c.cur_no=[%s]\n",ps->cur_no);
	vtcp_log("dc_log_bk_c.acc_hrt=[%s]\n",ps->acc_hrt);
	vtcp_log("dc_log_bk_c.dc_ind=[%s]\n",ps->dc_ind);
	vtcp_log("dc_log_bk_c.ct_ind=[%s]\n",ps->ct_ind);
	vtcp_log("dc_log_bk_c.note_type=[%s]\n",ps->note_type);
	vtcp_log("dc_log_bk_c.note_no=[%s]\n",ps->note_no);
	vtcp_log("dc_log_bk_c.amt=[%f]\n",ps->amt);
	vtcp_log("dc_log_bk_c.tel=[%s]\n",ps->tel);
	vtcp_log("dc_log_bk_c.sts=[%s]\n",ps->sts);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Dc_log_bk_Sel(reply,dc_log_bk_c,fmtstr,va_alist)
char    *reply;
struct  dc_log_bk_c *dc_log_bk_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Dc_log_bk_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Dc_log_bk_Fet_Sel( dc_log_bk_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Dc_log_bk_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Dc_log_bk_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,dc_log_bk.* FROM dc_log_bk WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE dc_log_bk_sel FROM :comm;
	EXEC SQL DECLARE sel_dc_log_bk CURSOR FOR dc_log_bk_sel;

	EXEC SQL OPEN sel_dc_log_bk;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN dc_log_bk error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Dc_log_bk_Fet_Sel ( struct dc_log_bk_c *dc_log_bk_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_dc_log_bk INTO :dc_log_bk_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch dc_log_bk error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch dc_log_bk finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(dc_log_bk_c);

	return 0;
}

int Dc_log_bk_Clo_Sel (){
	EXEC SQL CLOSE sel_dc_log_bk;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Dc_log_bk_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,dc_log_bk.* FROM dc_log_bk WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE dc_log_bk_upd FROM :comm;

	EXEC SQL DECLARE upd_dc_log_bk CURSOR FOR dc_log_bk_upd;

	EXEC SQL OPEN upd_dc_log_bk;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open dc_log_bk error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Dc_log_bk_Fet_Upd( struct dc_log_bk_c *dc_log_bk_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_dc_log_bk INTO :dc_log_bk_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd dc_log_bk error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH dc_log_bk finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(dc_log_bk_c);

	return 0;
}

int Dc_log_bk_Upd_Upd( struct dc_log_bk_c dc_log_bk_c , char * reply){
	int ret;

	EXEC SQL UPDATE dc_log_bk SET tx_date=:dc_log_bk_c.tx_date,
			trace_no=:dc_log_bk_c.trace_no,
			trace_cnt=:dc_log_bk_c.trace_cnt,
			entry_code=:dc_log_bk_c.entry_code,
			dc_seqn=:dc_log_bk_c.dc_seqn,
			opn_br_no=:dc_log_bk_c.opn_br_no,
			tx_br_no=:dc_log_bk_c.tx_br_no,
			tx_opn_br_no=:dc_log_bk_c.tx_opn_br_no,
			tx_tx_br_no=:dc_log_bk_c.tx_tx_br_no,
			cur_no=:dc_log_bk_c.cur_no,
			acc_hrt=:dc_log_bk_c.acc_hrt,
			dc_ind=:dc_log_bk_c.dc_ind,
			ct_ind=:dc_log_bk_c.ct_ind,
			note_type=:dc_log_bk_c.note_type,
			note_no=:dc_log_bk_c.note_no,
			amt=:dc_log_bk_c.amt,
			tel=:dc_log_bk_c.tel,
			sts=:dc_log_bk_c.sts
	WHERE rowid=:dc_log_bk_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE dc_log_bk error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Dc_log_bk_Del_Upd(struct dc_log_bk_c dc_log_bk_c , char * reply  ){

	EXEC SQL DELETE FROM dc_log_bk WHERE rowid=:dc_log_bk_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE dc_log_bk error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Dc_log_bk_Clo_Upd( ){
	EXEC SQL CLOSE upd_dc_log_bk;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Dc_log_bk_Ins( struct dc_log_bk_c dc_log_bk_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO dc_log_bk VALUES (:dc_log_bk_c.tx_date,
			:dc_log_bk_c.trace_no,
			:dc_log_bk_c.trace_cnt,
			:dc_log_bk_c.entry_code,
			:dc_log_bk_c.dc_seqn,
			:dc_log_bk_c.opn_br_no,
			:dc_log_bk_c.tx_br_no,
			:dc_log_bk_c.tx_opn_br_no,
			:dc_log_bk_c.tx_tx_br_no,
			:dc_log_bk_c.cur_no,
			:dc_log_bk_c.acc_hrt,
			:dc_log_bk_c.dc_ind,
			:dc_log_bk_c.ct_ind,
			:dc_log_bk_c.note_type,
			:dc_log_bk_c.note_no,
			:dc_log_bk_c.amt,
			:dc_log_bk_c.tel,
			:dc_log_bk_c.sts);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT dc_log_bk error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT dc_log_bk error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
