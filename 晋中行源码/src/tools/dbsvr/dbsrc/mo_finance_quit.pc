#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"mo_finance_quit_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int mo_finance_quit_con ( struct mo_finance_quit_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct mo_finance_quit_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->tx_br_no);
	zip_tail(ps->tx_code);
	zip_tail(ps->untread_no);
	zip_tail(ps->untread_stat);
	zip_tail(ps->pay_no);
	zip_tail(ps->ct_ind);
	zip_tail(ps->payee_name);
	zip_tail(ps->payee_acno);
	zip_tail(ps->payee_brno);
	zip_tail(ps->payer_name);
	zip_tail(ps->payer_acno);
	zip_tail(ps->payer_brno);
	zip_tail(ps->item_code);
	zip_tail(ps->unit_code);
	zip_tail(ps->untread_cause);
	zip_tail(ps->brf);
	zip_tail(ps->tel);
	zip_tail(ps->chk);
	zip_tail(ps->auth);
}
int Mo_finance_quit_Debug(struct mo_finance_quit_c *ps){
	vtcp_log("mo_finance_quit_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("mo_finance_quit_c.trace_no=[%ld]\n",ps->trace_no);
	vtcp_log("mo_finance_quit_c.trace_cnt=[%ld]\n",ps->trace_cnt);
	vtcp_log("mo_finance_quit_c.mid_trace_no=[%ld]\n",ps->mid_trace_no);
	vtcp_log("mo_finance_quit_c.tx_br_no=[%s]\n",ps->tx_br_no);
	vtcp_log("mo_finance_quit_c.tx_code=[%s]\n",ps->tx_code);
	vtcp_log("mo_finance_quit_c.tx_date=[%ld]\n",ps->tx_date);
	vtcp_log("mo_finance_quit_c.tx_time=[%ld]\n",ps->tx_time);
	vtcp_log("mo_finance_quit_c.untread_no=[%s]\n",ps->untread_no);
	vtcp_log("mo_finance_quit_c.untread_stat=[%s]\n",ps->untread_stat);
	vtcp_log("mo_finance_quit_c.pay_no=[%s]\n",ps->pay_no);
	vtcp_log("mo_finance_quit_c.untread_date=[%ld]\n",ps->untread_date);
	vtcp_log("mo_finance_quit_c.ct_ind=[%s]\n",ps->ct_ind);
	vtcp_log("mo_finance_quit_c.payee_name=[%s]\n",ps->payee_name);
	vtcp_log("mo_finance_quit_c.payee_acno=[%s]\n",ps->payee_acno);
	vtcp_log("mo_finance_quit_c.payee_brno=[%s]\n",ps->payee_brno);
	vtcp_log("mo_finance_quit_c.payer_name=[%s]\n",ps->payer_name);
	vtcp_log("mo_finance_quit_c.payer_acno=[%s]\n",ps->payer_acno);
	vtcp_log("mo_finance_quit_c.payer_brno=[%s]\n",ps->payer_brno);
	vtcp_log("mo_finance_quit_c.item_code=[%s]\n",ps->item_code);
	vtcp_log("mo_finance_quit_c.unit_code=[%s]\n",ps->unit_code);
	vtcp_log("mo_finance_quit_c.amt=[%f]\n",ps->amt);
	vtcp_log("mo_finance_quit_c.untread_cause=[%s]\n",ps->untread_cause);
	vtcp_log("mo_finance_quit_c.brf=[%s]\n",ps->brf);
	vtcp_log("mo_finance_quit_c.tel=[%s]\n",ps->tel);
	vtcp_log("mo_finance_quit_c.chk=[%s]\n",ps->chk);
	vtcp_log("mo_finance_quit_c.auth=[%s]\n",ps->auth);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Mo_finance_quit_Sel(reply,mo_finance_quit_c,fmtstr,va_alist)
char    *reply;
struct  mo_finance_quit_c *mo_finance_quit_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Mo_finance_quit_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Mo_finance_quit_Fet_Sel( mo_finance_quit_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Mo_finance_quit_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Mo_finance_quit_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,mo_finance_quit.* FROM mo_finance_quit WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mo_finance_quit_sel FROM :comm;
	EXEC SQL DECLARE sel_mo_finance_quit CURSOR FOR mo_finance_quit_sel;

	EXEC SQL OPEN sel_mo_finance_quit;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN mo_finance_quit error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_finance_quit_Fet_Sel ( struct mo_finance_quit_c *mo_finance_quit_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_mo_finance_quit INTO :mo_finance_quit_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch mo_finance_quit error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch mo_finance_quit finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(mo_finance_quit_c);

	return 0;
}

int Mo_finance_quit_Clo_Sel (){
	EXEC SQL CLOSE sel_mo_finance_quit;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Mo_finance_quit_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,mo_finance_quit.* FROM mo_finance_quit WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mo_finance_quit_upd FROM :comm;

	EXEC SQL DECLARE upd_mo_finance_quit CURSOR FOR mo_finance_quit_upd;

	EXEC SQL OPEN upd_mo_finance_quit;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open mo_finance_quit error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_finance_quit_Fet_Upd( struct mo_finance_quit_c *mo_finance_quit_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_mo_finance_quit INTO :mo_finance_quit_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd mo_finance_quit error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH mo_finance_quit finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(mo_finance_quit_c);

	return 0;
}

int Mo_finance_quit_Upd_Upd( struct mo_finance_quit_c mo_finance_quit_c , char * reply){
	int ret;

	EXEC SQL UPDATE mo_finance_quit SET trace_no=:mo_finance_quit_c.trace_no,
			trace_cnt=:mo_finance_quit_c.trace_cnt,
			mid_trace_no=:mo_finance_quit_c.mid_trace_no,
			tx_br_no=:mo_finance_quit_c.tx_br_no,
			tx_code=:mo_finance_quit_c.tx_code,
			tx_date=:mo_finance_quit_c.tx_date,
			tx_time=:mo_finance_quit_c.tx_time,
			untread_no=:mo_finance_quit_c.untread_no,
			untread_stat=:mo_finance_quit_c.untread_stat,
			pay_no=:mo_finance_quit_c.pay_no,
			untread_date=:mo_finance_quit_c.untread_date,
			ct_ind=:mo_finance_quit_c.ct_ind,
			payee_name=:mo_finance_quit_c.payee_name,
			payee_acno=:mo_finance_quit_c.payee_acno,
			payee_brno=:mo_finance_quit_c.payee_brno,
			payer_name=:mo_finance_quit_c.payer_name,
			payer_acno=:mo_finance_quit_c.payer_acno,
			payer_brno=:mo_finance_quit_c.payer_brno,
			item_code=:mo_finance_quit_c.item_code,
			unit_code=:mo_finance_quit_c.unit_code,
			amt=:mo_finance_quit_c.amt,
			untread_cause=:mo_finance_quit_c.untread_cause,
			brf=:mo_finance_quit_c.brf,
			tel=:mo_finance_quit_c.tel,
			chk=:mo_finance_quit_c.chk,
			auth=:mo_finance_quit_c.auth
	WHERE rowid=:mo_finance_quit_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE mo_finance_quit error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Mo_finance_quit_Del_Upd(struct mo_finance_quit_c mo_finance_quit_c , char * reply  ){

	EXEC SQL DELETE FROM mo_finance_quit WHERE rowid=:mo_finance_quit_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE mo_finance_quit error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_finance_quit_Clo_Upd( ){
	EXEC SQL CLOSE upd_mo_finance_quit;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Mo_finance_quit_Ins( struct mo_finance_quit_c mo_finance_quit_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO mo_finance_quit VALUES (:mo_finance_quit_c.trace_no,
			:mo_finance_quit_c.trace_cnt,
			:mo_finance_quit_c.mid_trace_no,
			:mo_finance_quit_c.tx_br_no,
			:mo_finance_quit_c.tx_code,
			:mo_finance_quit_c.tx_date,
			:mo_finance_quit_c.tx_time,
			:mo_finance_quit_c.untread_no,
			:mo_finance_quit_c.untread_stat,
			:mo_finance_quit_c.pay_no,
			:mo_finance_quit_c.untread_date,
			:mo_finance_quit_c.ct_ind,
			:mo_finance_quit_c.payee_name,
			:mo_finance_quit_c.payee_acno,
			:mo_finance_quit_c.payee_brno,
			:mo_finance_quit_c.payer_name,
			:mo_finance_quit_c.payer_acno,
			:mo_finance_quit_c.payer_brno,
			:mo_finance_quit_c.item_code,
			:mo_finance_quit_c.unit_code,
			:mo_finance_quit_c.amt,
			:mo_finance_quit_c.untread_cause,
			:mo_finance_quit_c.brf,
			:mo_finance_quit_c.tel,
			:mo_finance_quit_c.chk,
			:mo_finance_quit_c.auth);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT mo_finance_quit error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT mo_finance_quit error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
