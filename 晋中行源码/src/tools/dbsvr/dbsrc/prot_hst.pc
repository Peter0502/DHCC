#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"prot_hst_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int prot_hst_con ( struct prot_hst_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct prot_hst_c* ps){
	zip_tail(ps->prot_type);
	zip_tail(ps->reply);
}
int Prot_hst_Debug(struct prot_hst_c *ps){
	printf("prot_hst_c.tx_date=[%ld]\n",ps->tx_date);
	printf("prot_hst_c.ac_id=[%ld]\n",ps->ac_id);
	printf("prot_hst_c.prot_type=[%s]\n",ps->prot_type);
	printf("prot_hst_c.amt=[%f]\n",ps->amt);
	printf("prot_hst_c.amt2=[%f]\n",ps->amt2);
	printf("prot_hst_c.amt3=[%f]\n",ps->amt3);
	printf("prot_hst_c.reply=[%s]\n",ps->reply);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分                           ****/
/*****************************************************************************/
int Prot_hst_Sel(reply,prot_hst_c,fmtstr,va_alist)
char    *reply;
struct  prot_hst_c *prot_hst_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Prot_hst_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Prot_hst_Fet_Sel( prot_hst_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Prot_hst_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Prot_hst_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT prot_hst.* FROM prot_hst WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE prot_hst_sel FROM :comm;
	EXEC SQL DECLARE sel_prot_hst CURSOR FOR prot_hst_sel;

	EXEC SQL OPEN sel_prot_hst;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN prot_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Prot_hst_Fet_Sel ( struct prot_hst_c *prot_hst_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_prot_hst INTO :prot_hst_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch prot_hst error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch prot_hst finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(prot_hst_c);

	return 0;
}

int Prot_hst_Clo_Sel (){
	EXEC SQL CLOSE sel_prot_hst;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Prot_hst_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT prot_hst.* FROM prot_hst WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE prot_hst_upd FROM :comm;

	EXEC SQL DECLARE upd_prot_hst CURSOR FOR prot_hst_upd;

	EXEC SQL OPEN upd_prot_hst;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open prot_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Prot_hst_Fet_Upd( struct prot_hst_c *prot_hst_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_prot_hst INTO :prot_hst_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd prot_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH prot_hst finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(prot_hst_c);

	return 0;
}

int Prot_hst_Upd_Upd( struct prot_hst_c prot_hst_c , char * reply){
	int ret;

	EXEC SQL UPDATE prot_hst SET tx_date=:prot_hst_c.tx_date,
			ac_id=:prot_hst_c.ac_id,
			prot_type=:prot_hst_c.prot_type,
			amt=:prot_hst_c.amt,
			amt2=:prot_hst_c.amt2,
			amt3=:prot_hst_c.amt3,
			reply=:prot_hst_c.reply
	WHERE 1=0;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE prot_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}
	pub_reg_rec_file(" upd prot_hst"); 

	return 0;
}


int Prot_hst_Del_Upd(struct prot_hst_c prot_hst_c , char * reply  ){

	EXEC SQL DELETE FROM prot_hst WHERE rowid='0000';
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE prot_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Prot_hst_Clo_Upd( ){
	EXEC SQL CLOSE upd_prot_hst;

	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Prot_hst_Ins( struct prot_hst_c prot_hst_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO prot_hst VALUES (:prot_hst_c.tx_date,
			:prot_hst_c.ac_id,
			:prot_hst_c.prot_type,
			:prot_hst_c.amt,
			:prot_hst_c.amt2,
			:prot_hst_c.amt3,
			:prot_hst_c.reply);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT prot_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT prot_hst error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}
	pub_reg_rec_file(" ins prot_hst"); 

	return 0;
}
