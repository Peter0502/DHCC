#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"mo_discnt_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int mo_discnt_con ( struct mo_discnt_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct mo_discnt_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->pact_no);
	zip_tail(ps->tpact_no);
	zip_tail(ps->rpact_no);
	zip_tail(ps->br_no);
	zip_tail(ps->bkrl_code);
	zip_tail(ps->pn_type);
	zip_tail(ps->local_ind);
	zip_tail(ps->pn_ac_no);
	zip_tail(ps->pn_name);
	zip_tail(ps->ac_type);
	zip_tail(ps->pay_ac_type);
	zip_tail(ps->pay_ac_no);
	zip_tail(ps->pay_name);
	zip_tail(ps->get_ac_type);
	zip_tail(ps->tpay_ac_type);
	zip_tail(ps->tin_ac_no);
	zip_tail(ps->tpn_name);
	zip_tail(ps->rin_ac_no);
	zip_tail(ps->remitter);
	zip_tail(ps->rem_ac_no);
	zip_tail(ps->payer_brno_name);
	zip_tail(ps->payee);
	zip_tail(ps->payee_ac_no);
	zip_tail(ps->payee_brno_name);
	zip_tail(ps->note_type);
	zip_tail(ps->pnote_no);
	zip_tail(ps->sts);
	zip_tail(ps->po_knd);
	zip_tail(ps->tpn_style);
}
int Mo_discnt_Debug(struct mo_discnt_c *ps){
	vtcp_log("mo_discnt_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("mo_discnt_c.pact_no=[%s]\n",ps->pact_no);
	vtcp_log("mo_discnt_c.tpact_no=[%s]\n",ps->tpact_no);
	vtcp_log("mo_discnt_c.rpact_no=[%s]\n",ps->rpact_no);
	vtcp_log("mo_discnt_c.ac_id=[%ld]\n",ps->ac_id);
	vtcp_log("mo_discnt_c.ac_seqn=[%ld]\n",ps->ac_seqn);
	vtcp_log("mo_discnt_c.br_no=[%s]\n",ps->br_no);
	vtcp_log("mo_discnt_c.bkrl_code=[%s]\n",ps->bkrl_code);
	vtcp_log("mo_discnt_c.pn_type=[%s]\n",ps->pn_type);
	vtcp_log("mo_discnt_c.tranx_bal=[%f]\n",ps->tranx_bal);
	vtcp_log("mo_discnt_c.pn_rate=[%f]\n",ps->pn_rate);
	vtcp_log("mo_discnt_c.tpn_rate=[%f]\n",ps->tpn_rate);
	vtcp_log("mo_discnt_c.rtpn_rate=[%f]\n",ps->rtpn_rate);
	vtcp_log("mo_discnt_c.pn_date=[%ld]\n",ps->pn_date);
	vtcp_log("mo_discnt_c.tpn_date=[%ld]\n",ps->tpn_date);
	vtcp_log("mo_discnt_c.rtpn_date=[%ld]\n",ps->rtpn_date);
	vtcp_log("mo_discnt_c.return_date=[%ld]\n",ps->return_date);
	vtcp_log("mo_discnt_c.local_ind=[%s]\n",ps->local_ind);
	vtcp_log("mo_discnt_c.pn_int=[%f]\n",ps->pn_int);
	vtcp_log("mo_discnt_c.tpn_int=[%f]\n",ps->tpn_int);
	vtcp_log("mo_discnt_c.rpn_int=[%f]\n",ps->rpn_int);
	vtcp_log("mo_discnt_c.pn_ac_no=[%s]\n",ps->pn_ac_no);
	vtcp_log("mo_discnt_c.pn_name=[%s]\n",ps->pn_name);
	vtcp_log("mo_discnt_c.ac_type=[%s]\n",ps->ac_type);
	vtcp_log("mo_discnt_c.pay_ac_type=[%s]\n",ps->pay_ac_type);
	vtcp_log("mo_discnt_c.pay_ac_no=[%s]\n",ps->pay_ac_no);
	vtcp_log("mo_discnt_c.pay_name=[%s]\n",ps->pay_name);
	vtcp_log("mo_discnt_c.get_ac_type=[%s]\n",ps->get_ac_type);
	vtcp_log("mo_discnt_c.tpay_ac_type=[%s]\n",ps->tpay_ac_type);
	vtcp_log("mo_discnt_c.tin_ac_no=[%s]\n",ps->tin_ac_no);
	vtcp_log("mo_discnt_c.tpn_name=[%s]\n",ps->tpn_name);
	vtcp_log("mo_discnt_c.rin_ac_no=[%s]\n",ps->rin_ac_no);
	vtcp_log("mo_discnt_c.remitter=[%s]\n",ps->remitter);
	vtcp_log("mo_discnt_c.rem_ac_no=[%s]\n",ps->rem_ac_no);
	vtcp_log("mo_discnt_c.payer_brno_name=[%s]\n",ps->payer_brno_name);
	vtcp_log("mo_discnt_c.payee=[%s]\n",ps->payee);
	vtcp_log("mo_discnt_c.payee_ac_no=[%s]\n",ps->payee_ac_no);
	vtcp_log("mo_discnt_c.payee_brno_name=[%s]\n",ps->payee_brno_name);
	vtcp_log("mo_discnt_c.par_amt=[%f]\n",ps->par_amt);
	vtcp_log("mo_discnt_c.not_matr_date=[%ld]\n",ps->not_matr_date);
	vtcp_log("mo_discnt_c.note_type=[%s]\n",ps->note_type);
	vtcp_log("mo_discnt_c.pnote_no=[%s]\n",ps->pnote_no);
	vtcp_log("mo_discnt_c.way_days=[%ld]\n",ps->way_days);
	vtcp_log("mo_discnt_c.wrk_date=[%ld]\n",ps->wrk_date);
	vtcp_log("mo_discnt_c.trace_no=[%ld]\n",ps->trace_no);
	vtcp_log("mo_discnt_c.sts=[%s]\n",ps->sts);
	vtcp_log("mo_discnt_c.po_knd=[%s]\n",ps->po_knd);
	vtcp_log("mo_discnt_c.tpn_style=[%s]\n",ps->tpn_style);
	vtcp_log("mo_discnt_c.tot_int=[%f]\n",ps->tot_int);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Mo_discnt_Sel(reply,mo_discnt_c,fmtstr,va_alist)
char    *reply;
struct  mo_discnt_c *mo_discnt_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Mo_discnt_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Mo_discnt_Fet_Sel( mo_discnt_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Mo_discnt_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Mo_discnt_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,mo_discnt.* FROM mo_discnt WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mo_discnt_sel FROM :comm;
	EXEC SQL DECLARE sel_mo_discnt CURSOR FOR mo_discnt_sel;

	EXEC SQL OPEN sel_mo_discnt;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN mo_discnt error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_discnt_Fet_Sel ( struct mo_discnt_c *mo_discnt_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_mo_discnt INTO :mo_discnt_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch mo_discnt error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch mo_discnt finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(mo_discnt_c);

	return 0;
}

int Mo_discnt_Clo_Sel (){
	EXEC SQL CLOSE sel_mo_discnt;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Mo_discnt_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,mo_discnt.* FROM mo_discnt WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mo_discnt_upd FROM :comm;

	EXEC SQL DECLARE upd_mo_discnt CURSOR FOR mo_discnt_upd;

	EXEC SQL OPEN upd_mo_discnt;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open mo_discnt error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_discnt_Fet_Upd( struct mo_discnt_c *mo_discnt_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_mo_discnt INTO :mo_discnt_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd mo_discnt error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH mo_discnt finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(mo_discnt_c);

	return 0;
}

int Mo_discnt_Upd_Upd( struct mo_discnt_c mo_discnt_c , char * reply){
	int ret;

	EXEC SQL UPDATE mo_discnt SET pact_no=:mo_discnt_c.pact_no,
			tpact_no=:mo_discnt_c.tpact_no,
			rpact_no=:mo_discnt_c.rpact_no,
			ac_id=:mo_discnt_c.ac_id,
			ac_seqn=:mo_discnt_c.ac_seqn,
			br_no=:mo_discnt_c.br_no,
			bkrl_code=:mo_discnt_c.bkrl_code,
			pn_type=:mo_discnt_c.pn_type,
			tranx_bal=:mo_discnt_c.tranx_bal,
			pn_rate=:mo_discnt_c.pn_rate,
			tpn_rate=:mo_discnt_c.tpn_rate,
			rtpn_rate=:mo_discnt_c.rtpn_rate,
			pn_date=:mo_discnt_c.pn_date,
			tpn_date=:mo_discnt_c.tpn_date,
			rtpn_date=:mo_discnt_c.rtpn_date,
			return_date=:mo_discnt_c.return_date,
			local_ind=:mo_discnt_c.local_ind,
			pn_int=:mo_discnt_c.pn_int,
			tpn_int=:mo_discnt_c.tpn_int,
			rpn_int=:mo_discnt_c.rpn_int,
			pn_ac_no=:mo_discnt_c.pn_ac_no,
			pn_name=:mo_discnt_c.pn_name,
			ac_type=:mo_discnt_c.ac_type,
			pay_ac_type=:mo_discnt_c.pay_ac_type,
			pay_ac_no=:mo_discnt_c.pay_ac_no,
			pay_name=:mo_discnt_c.pay_name,
			get_ac_type=:mo_discnt_c.get_ac_type,
			tpay_ac_type=:mo_discnt_c.tpay_ac_type,
			tin_ac_no=:mo_discnt_c.tin_ac_no,
			tpn_name=:mo_discnt_c.tpn_name,
			rin_ac_no=:mo_discnt_c.rin_ac_no,
			remitter=:mo_discnt_c.remitter,
			rem_ac_no=:mo_discnt_c.rem_ac_no,
			payer_brno_name=:mo_discnt_c.payer_brno_name,
			payee=:mo_discnt_c.payee,
			payee_ac_no=:mo_discnt_c.payee_ac_no,
			payee_brno_name=:mo_discnt_c.payee_brno_name,
			par_amt=:mo_discnt_c.par_amt,
			not_matr_date=:mo_discnt_c.not_matr_date,
			note_type=:mo_discnt_c.note_type,
			pnote_no=:mo_discnt_c.pnote_no,
			way_days=:mo_discnt_c.way_days,
			wrk_date=:mo_discnt_c.wrk_date,
			trace_no=:mo_discnt_c.trace_no,
			sts=:mo_discnt_c.sts,
			po_knd=:mo_discnt_c.po_knd,
			tpn_style=:mo_discnt_c.tpn_style,
			tot_int=:mo_discnt_c.tot_int
	WHERE rowid=:mo_discnt_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE mo_discnt error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Mo_discnt_Del_Upd(struct mo_discnt_c mo_discnt_c , char * reply  ){

	EXEC SQL DELETE FROM mo_discnt WHERE rowid=:mo_discnt_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE mo_discnt error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_discnt_Clo_Upd( ){
	EXEC SQL CLOSE upd_mo_discnt;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Mo_discnt_Ins( struct mo_discnt_c mo_discnt_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO mo_discnt VALUES (:mo_discnt_c.pact_no,
			:mo_discnt_c.tpact_no,
			:mo_discnt_c.rpact_no,
			:mo_discnt_c.ac_id,
			:mo_discnt_c.ac_seqn,
			:mo_discnt_c.br_no,
			:mo_discnt_c.bkrl_code,
			:mo_discnt_c.pn_type,
			:mo_discnt_c.tranx_bal,
			:mo_discnt_c.pn_rate,
			:mo_discnt_c.tpn_rate,
			:mo_discnt_c.rtpn_rate,
			:mo_discnt_c.pn_date,
			:mo_discnt_c.tpn_date,
			:mo_discnt_c.rtpn_date,
			:mo_discnt_c.return_date,
			:mo_discnt_c.local_ind,
			:mo_discnt_c.pn_int,
			:mo_discnt_c.tpn_int,
			:mo_discnt_c.rpn_int,
			:mo_discnt_c.pn_ac_no,
			:mo_discnt_c.pn_name,
			:mo_discnt_c.ac_type,
			:mo_discnt_c.pay_ac_type,
			:mo_discnt_c.pay_ac_no,
			:mo_discnt_c.pay_name,
			:mo_discnt_c.get_ac_type,
			:mo_discnt_c.tpay_ac_type,
			:mo_discnt_c.tin_ac_no,
			:mo_discnt_c.tpn_name,
			:mo_discnt_c.rin_ac_no,
			:mo_discnt_c.remitter,
			:mo_discnt_c.rem_ac_no,
			:mo_discnt_c.payer_brno_name,
			:mo_discnt_c.payee,
			:mo_discnt_c.payee_ac_no,
			:mo_discnt_c.payee_brno_name,
			:mo_discnt_c.par_amt,
			:mo_discnt_c.not_matr_date,
			:mo_discnt_c.note_type,
			:mo_discnt_c.pnote_no,
			:mo_discnt_c.way_days,
			:mo_discnt_c.wrk_date,
			:mo_discnt_c.trace_no,
			:mo_discnt_c.sts,
			:mo_discnt_c.po_knd,
			:mo_discnt_c.tpn_style,
			:mo_discnt_c.tot_int);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT mo_discnt error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT mo_discnt error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
