#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"ln_reg_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int ln_reg_con ( struct ln_reg_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct ln_reg_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->type);
	zip_tail(ps->ind);
	zip_tail(ps->sts);
}
int Ln_reg_Debug(struct ln_reg_c *ps){
	vtcp_log("ln_reg_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("ln_reg_c.ac_id=[%ld]\n",ps->ac_id);
	vtcp_log("ln_reg_c.ac_seqn=[%ld]\n",ps->ac_seqn);
	vtcp_log("ln_reg_c.reg_date_beg=[%ld]\n",ps->reg_date_beg);
	vtcp_log("ln_reg_c.reg_date_end=[%ld]\n",ps->reg_date_end);
	vtcp_log("ln_reg_c.pay_date=[%ld]\n",ps->pay_date);
	vtcp_log("ln_reg_c.type=[%s]\n",ps->type);
	vtcp_log("ln_reg_c.lo_bal=[%f]\n",ps->lo_bal);
	vtcp_log("ln_reg_c.acm=[%f]\n",ps->acm);
	vtcp_log("ln_reg_c.pay_bal=[%f]\n",ps->pay_bal);
	vtcp_log("ln_reg_c.ind=[%s]\n",ps->ind);
	vtcp_log("ln_reg_c.sts=[%s]\n",ps->sts);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Ln_reg_Sel(reply,ln_reg_c,fmtstr,va_alist)
char    *reply;
struct  ln_reg_c *ln_reg_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Ln_reg_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Ln_reg_Fet_Sel( ln_reg_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Ln_reg_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Ln_reg_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,ln_reg.* FROM ln_reg WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE ln_reg_sel FROM :comm;
	EXEC SQL DECLARE sel_ln_reg CURSOR FOR ln_reg_sel;

	EXEC SQL OPEN sel_ln_reg;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN ln_reg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Ln_reg_Fet_Sel ( struct ln_reg_c *ln_reg_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_ln_reg INTO :ln_reg_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch ln_reg error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch ln_reg finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(ln_reg_c);

	return 0;
}

int Ln_reg_Clo_Sel (){
	EXEC SQL CLOSE sel_ln_reg;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Ln_reg_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,ln_reg.* FROM ln_reg WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE ln_reg_upd FROM :comm;

	EXEC SQL DECLARE upd_ln_reg CURSOR FOR ln_reg_upd;

	EXEC SQL OPEN upd_ln_reg;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open ln_reg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Ln_reg_Fet_Upd( struct ln_reg_c *ln_reg_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_ln_reg INTO :ln_reg_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd ln_reg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH ln_reg finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(ln_reg_c);

	return 0;
}

int Ln_reg_Upd_Upd( struct ln_reg_c ln_reg_c , char * reply){
	int ret;

	EXEC SQL UPDATE ln_reg SET ac_id=:ln_reg_c.ac_id,
			ac_seqn=:ln_reg_c.ac_seqn,
			reg_date_beg=:ln_reg_c.reg_date_beg,
			reg_date_end=:ln_reg_c.reg_date_end,
			pay_date=:ln_reg_c.pay_date,
			type=:ln_reg_c.type,
			lo_bal=:ln_reg_c.lo_bal,
			acm=:ln_reg_c.acm,
			pay_bal=:ln_reg_c.pay_bal,
			ind=:ln_reg_c.ind,
			sts=:ln_reg_c.sts
	WHERE rowid=:ln_reg_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE ln_reg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Ln_reg_Del_Upd(struct ln_reg_c ln_reg_c , char * reply  ){

	EXEC SQL DELETE FROM ln_reg WHERE rowid=:ln_reg_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE ln_reg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Ln_reg_Clo_Upd( ){
	EXEC SQL CLOSE upd_ln_reg;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Ln_reg_Ins( struct ln_reg_c ln_reg_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO ln_reg VALUES (:ln_reg_c.ac_id,
			:ln_reg_c.ac_seqn,
			:ln_reg_c.reg_date_beg,
			:ln_reg_c.reg_date_end,
			:ln_reg_c.pay_date,
			:ln_reg_c.type,
			:ln_reg_c.lo_bal,
			:ln_reg_c.acm,
			:ln_reg_c.pay_bal,
			:ln_reg_c.ind,
			:ln_reg_c.sts);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT ln_reg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT ln_reg error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
