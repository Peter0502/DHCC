#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"lv_pldsr_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int lv_pldsr_con ( struct lv_pldsr_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct lv_pldsr_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->packid);
	zip_tail(ps->orderno);
	zip_tail(ps->br_no);
	zip_tail(ps->or_br_no);
	zip_tail(ps->cash_br_no);
	zip_tail(ps->cash_opn_br_no);
	zip_tail(ps->cash_ac_no);
	zip_tail(ps->cash_name);
	zip_tail(ps->cash_addr);
	zip_tail(ps->yw_type);
	zip_tail(ps->pay_qs_no);
	zip_tail(ps->tx_mx_no);
	zip_tail(ps->pay_br_no);
	zip_tail(ps->pay_opn_br_no);
	zip_tail(ps->pay_ac_no);
	zip_tail(ps->pay_name);
	zip_tail(ps->pay_addr);
	zip_tail(ps->xyno);
	zip_tail(ps->content);
	zip_tail(ps->filename);
	zip_tail(ps->sts);
	zip_tail(ps->beg_sts);
	zip_tail(ps->operlevel);
	zip_tail(ps->repstat);
	zip_tail(ps->re_content);
	zip_tail(ps->repstat2);
	zip_tail(ps->re_content2);
}
int Lv_pldsr_Debug(struct lv_pldsr_c *ps){
	vtcp_log("lv_pldsr_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("lv_pldsr_c.packid=[%s]\n",ps->packid);
	vtcp_log("lv_pldsr_c.orderno=[%s]\n",ps->orderno);
	vtcp_log("lv_pldsr_c.wt_date=[%ld]\n",ps->wt_date);
	vtcp_log("lv_pldsr_c.br_no=[%s]\n",ps->br_no);
	vtcp_log("lv_pldsr_c.or_br_no=[%s]\n",ps->or_br_no);
	vtcp_log("lv_pldsr_c.dsf_date=[%ld]\n",ps->dsf_date);
	vtcp_log("lv_pldsr_c.re_lim_date=[%ld]\n",ps->re_lim_date);
	vtcp_log("lv_pldsr_c.cash_br_no=[%s]\n",ps->cash_br_no);
	vtcp_log("lv_pldsr_c.cash_opn_br_no=[%s]\n",ps->cash_opn_br_no);
	vtcp_log("lv_pldsr_c.cash_ac_no=[%s]\n",ps->cash_ac_no);
	vtcp_log("lv_pldsr_c.cash_name=[%s]\n",ps->cash_name);
	vtcp_log("lv_pldsr_c.cash_addr=[%s]\n",ps->cash_addr);
	vtcp_log("lv_pldsr_c.yw_type=[%s]\n",ps->yw_type);
	vtcp_log("lv_pldsr_c.totamt=[%f]\n",ps->totamt);
	vtcp_log("lv_pldsr_c.pay_qs_no=[%s]\n",ps->pay_qs_no);
	vtcp_log("lv_pldsr_c.pay_num=[%ld]\n",ps->pay_num);
	vtcp_log("lv_pldsr_c.tx_mx_no=[%s]\n",ps->tx_mx_no);
	vtcp_log("lv_pldsr_c.pay_br_no=[%s]\n",ps->pay_br_no);
	vtcp_log("lv_pldsr_c.pay_opn_br_no=[%s]\n",ps->pay_opn_br_no);
	vtcp_log("lv_pldsr_c.pay_ac_no=[%s]\n",ps->pay_ac_no);
	vtcp_log("lv_pldsr_c.pay_name=[%s]\n",ps->pay_name);
	vtcp_log("lv_pldsr_c.pay_addr=[%s]\n",ps->pay_addr);
	vtcp_log("lv_pldsr_c.tx_amt=[%f]\n",ps->tx_amt);
	vtcp_log("lv_pldsr_c.xyno=[%s]\n",ps->xyno);
	vtcp_log("lv_pldsr_c.content=[%s]\n",ps->content);
	vtcp_log("lv_pldsr_c.filename=[%s]\n",ps->filename);
	vtcp_log("lv_pldsr_c.sts=[%s]\n",ps->sts);
	vtcp_log("lv_pldsr_c.beg_sts=[%s]\n",ps->beg_sts);
	vtcp_log("lv_pldsr_c.operlevel=[%s]\n",ps->operlevel);
	vtcp_log("lv_pldsr_c.repstat=[%s]\n",ps->repstat);
	vtcp_log("lv_pldsr_c.succamt=[%f]\n",ps->succamt);
	vtcp_log("lv_pldsr_c.succnum=[%ld]\n",ps->succnum);
	vtcp_log("lv_pldsr_c.re_content=[%s]\n",ps->re_content);
	vtcp_log("lv_pldsr_c.re_dsf_date=[%ld]\n",ps->re_dsf_date);
	vtcp_log("lv_pldsr_c.repstat2=[%s]\n",ps->repstat2);
	vtcp_log("lv_pldsr_c.re_content2=[%s]\n",ps->re_content2);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Lv_pldsr_Sel(reply,lv_pldsr_c,fmtstr,va_alist)
char    *reply;
struct  lv_pldsr_c *lv_pldsr_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Lv_pldsr_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Lv_pldsr_Fet_Sel( lv_pldsr_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Lv_pldsr_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Lv_pldsr_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,lv_pldsr.* FROM lv_pldsr WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE lv_pldsr_sel FROM :comm;
	EXEC SQL DECLARE sel_lv_pldsr CURSOR FOR lv_pldsr_sel;

	EXEC SQL OPEN sel_lv_pldsr;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN lv_pldsr error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Lv_pldsr_Fet_Sel ( struct lv_pldsr_c *lv_pldsr_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_lv_pldsr INTO :lv_pldsr_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch lv_pldsr error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch lv_pldsr finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(lv_pldsr_c);

	return 0;
}

int Lv_pldsr_Clo_Sel (){
	EXEC SQL CLOSE sel_lv_pldsr;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Lv_pldsr_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,lv_pldsr.* FROM lv_pldsr WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE lv_pldsr_upd FROM :comm;

	EXEC SQL DECLARE upd_lv_pldsr CURSOR FOR lv_pldsr_upd;

	EXEC SQL OPEN upd_lv_pldsr;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open lv_pldsr error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Lv_pldsr_Fet_Upd( struct lv_pldsr_c *lv_pldsr_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_lv_pldsr INTO :lv_pldsr_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd lv_pldsr error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH lv_pldsr finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(lv_pldsr_c);

	return 0;
}

int Lv_pldsr_Upd_Upd( struct lv_pldsr_c lv_pldsr_c , char * reply){
	int ret;

	EXEC SQL UPDATE lv_pldsr SET packid=:lv_pldsr_c.packid,
			orderno=:lv_pldsr_c.orderno,
			wt_date=:lv_pldsr_c.wt_date,
			br_no=:lv_pldsr_c.br_no,
			or_br_no=:lv_pldsr_c.or_br_no,
			dsf_date=:lv_pldsr_c.dsf_date,
			re_lim_date=:lv_pldsr_c.re_lim_date,
			cash_br_no=:lv_pldsr_c.cash_br_no,
			cash_opn_br_no=:lv_pldsr_c.cash_opn_br_no,
			cash_ac_no=:lv_pldsr_c.cash_ac_no,
			cash_name=:lv_pldsr_c.cash_name,
			cash_addr=:lv_pldsr_c.cash_addr,
			yw_type=:lv_pldsr_c.yw_type,
			totamt=:lv_pldsr_c.totamt,
			pay_qs_no=:lv_pldsr_c.pay_qs_no,
			pay_num=:lv_pldsr_c.pay_num,
			tx_mx_no=:lv_pldsr_c.tx_mx_no,
			pay_br_no=:lv_pldsr_c.pay_br_no,
			pay_opn_br_no=:lv_pldsr_c.pay_opn_br_no,
			pay_ac_no=:lv_pldsr_c.pay_ac_no,
			pay_name=:lv_pldsr_c.pay_name,
			pay_addr=:lv_pldsr_c.pay_addr,
			tx_amt=:lv_pldsr_c.tx_amt,
			xyno=:lv_pldsr_c.xyno,
			content=:lv_pldsr_c.content,
			filename=:lv_pldsr_c.filename,
			sts=:lv_pldsr_c.sts,
			beg_sts=:lv_pldsr_c.beg_sts,
			operlevel=:lv_pldsr_c.operlevel,
			repstat=:lv_pldsr_c.repstat,
			succamt=:lv_pldsr_c.succamt,
			succnum=:lv_pldsr_c.succnum,
			re_content=:lv_pldsr_c.re_content,
			re_dsf_date=:lv_pldsr_c.re_dsf_date,
			repstat2=:lv_pldsr_c.repstat2,
			re_content2=:lv_pldsr_c.re_content2
	WHERE rowid=:lv_pldsr_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE lv_pldsr error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Lv_pldsr_Del_Upd(struct lv_pldsr_c lv_pldsr_c , char * reply  ){

	EXEC SQL DELETE FROM lv_pldsr WHERE rowid=:lv_pldsr_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE lv_pldsr error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Lv_pldsr_Clo_Upd( ){
	EXEC SQL CLOSE upd_lv_pldsr;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Lv_pldsr_Ins( struct lv_pldsr_c lv_pldsr_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO lv_pldsr VALUES (:lv_pldsr_c.packid,
			:lv_pldsr_c.orderno,
			:lv_pldsr_c.wt_date,
			:lv_pldsr_c.br_no,
			:lv_pldsr_c.or_br_no,
			:lv_pldsr_c.dsf_date,
			:lv_pldsr_c.re_lim_date,
			:lv_pldsr_c.cash_br_no,
			:lv_pldsr_c.cash_opn_br_no,
			:lv_pldsr_c.cash_ac_no,
			:lv_pldsr_c.cash_name,
			:lv_pldsr_c.cash_addr,
			:lv_pldsr_c.yw_type,
			:lv_pldsr_c.totamt,
			:lv_pldsr_c.pay_qs_no,
			:lv_pldsr_c.pay_num,
			:lv_pldsr_c.tx_mx_no,
			:lv_pldsr_c.pay_br_no,
			:lv_pldsr_c.pay_opn_br_no,
			:lv_pldsr_c.pay_ac_no,
			:lv_pldsr_c.pay_name,
			:lv_pldsr_c.pay_addr,
			:lv_pldsr_c.tx_amt,
			:lv_pldsr_c.xyno,
			:lv_pldsr_c.content,
			:lv_pldsr_c.filename,
			:lv_pldsr_c.sts,
			:lv_pldsr_c.beg_sts,
			:lv_pldsr_c.operlevel,
			:lv_pldsr_c.repstat,
			:lv_pldsr_c.succamt,
			:lv_pldsr_c.succnum,
			:lv_pldsr_c.re_content,
			:lv_pldsr_c.re_dsf_date,
			:lv_pldsr_c.repstat2,
			:lv_pldsr_c.re_content2);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT lv_pldsr error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT lv_pldsr error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
