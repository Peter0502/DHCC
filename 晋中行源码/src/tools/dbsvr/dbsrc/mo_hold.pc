#include<stdio.h>
#include<varargs.h>

#define EXTERN
#include"global.h"


EXEC SQL INCLUDE SQLCA;
#include"mo_hold_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)

int mo_hold_con ( struct mo_hold_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct mo_hold_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->hold_typ);
	zip_tail(ps->auto_unhold_ind);
	zip_tail(ps->hold_sts);
	zip_tail(ps->hold_br_no);
	zip_tail(ps->hold_tel);
	zip_tail(ps->hold_brf);
	zip_tail(ps->unhold_br_no);
	zip_tail(ps->unhold_tel);
	zip_tail(ps->unhold_brf);
}
int Mo_hold_Debug(struct mo_hold_c *ps){
	vtcp_log("mo_hold_c.rowid=[%s]\n",ps->rowid);
	vtcp_log("mo_hold_c.ac_id=[%ld]\n",ps->ac_id);
	vtcp_log("mo_hold_c.ac_seqn=[%ld]\n",ps->ac_seqn);
	vtcp_log("mo_hold_c.hold_seqn=[%ld]\n",ps->hold_seqn);
	vtcp_log("mo_hold_c.hold_typ=[%s]\n",ps->hold_typ);
	vtcp_log("mo_hold_c.plan_hold_amt=[%f]\n",ps->plan_hold_amt);
	vtcp_log("mo_hold_c.auto_unhold_ind=[%s]\n",ps->auto_unhold_ind);
	vtcp_log("mo_hold_c.hold_sts=[%s]\n",ps->hold_sts);
	vtcp_log("mo_hold_c.beg_hold_date=[%ld]\n",ps->beg_hold_date);
	vtcp_log("mo_hold_c.plan_unhold_date=[%ld]\n",ps->plan_unhold_date);
	vtcp_log("mo_hold_c.fct_unhold_date=[%ld]\n",ps->fct_unhold_date);
	vtcp_log("mo_hold_c.hold_br_no=[%s]\n",ps->hold_br_no);
	vtcp_log("mo_hold_c.hold_tel=[%s]\n",ps->hold_tel);
	vtcp_log("mo_hold_c.hold_brf=[%s]\n",ps->hold_brf);
	vtcp_log("mo_hold_c.unhold_br_no=[%s]\n",ps->unhold_br_no);
	vtcp_log("mo_hold_c.unhold_tel=[%s]\n",ps->unhold_tel);
	vtcp_log("mo_hold_c.unhold_brf=[%s]\n",ps->unhold_brf);
	vtcp_log("mo_hold_c.wrk_date=[%ld]\n",ps->wrk_date);
	vtcp_log("mo_hold_c.trace_no=[%ld]\n",ps->trace_no);
	return(0);
}
/*****************************************************************************/
/****                              查询函数部分[]                       ****/
/*****************************************************************************/
int Mo_hold_Sel(reply,mo_hold_c,fmtstr,va_alist)
char    *reply;
struct  mo_hold_c *mo_hold_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Mo_hold_Dec_Sel( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Mo_hold_Fet_Sel( mo_hold_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Mo_hold_Clo_Sel();

	return 0;
}



char *key_strcat(char *,char *);
int Mo_hold_Dec_Sel ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,mo_hold.* FROM mo_hold WHERE  ");
	key_strcat(comm,wherelist);

	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mo_hold_sel FROM :comm;
	EXEC SQL DECLARE sel_mo_hold CURSOR FOR mo_hold_sel;

	EXEC SQL OPEN sel_mo_hold;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN mo_hold error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_hold_Fet_Sel ( struct mo_hold_c *mo_hold_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_mo_hold INTO :mo_hold_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch mo_hold error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"Fetch mo_hold finished!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(mo_hold_c);

	return 0;
}

int Mo_hold_Clo_Sel (){
	EXEC SQL CLOSE sel_mo_hold;
	return 0;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Mo_hold_Dec_Upd( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,mo_hold.* FROM mo_hold WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	vtcp_log("%s,%d,SQLSTR=[%s]\n",__FILE__,__LINE__,comm);
	sqlca.sqlcode=0;
	EXEC SQL PREPARE mo_hold_upd FROM :comm;

	EXEC SQL DECLARE upd_mo_hold CURSOR FOR mo_hold_upd;

	EXEC SQL OPEN upd_mo_hold;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open mo_hold error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_hold_Fet_Upd( struct mo_hold_c *mo_hold_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_mo_hold INTO :mo_hold_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd mo_hold error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH mo_hold finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(mo_hold_c);

	return 0;
}

int Mo_hold_Upd_Upd( struct mo_hold_c mo_hold_c , char * reply){
	int ret;

	EXEC SQL UPDATE mo_hold SET ac_id=:mo_hold_c.ac_id,
			ac_seqn=:mo_hold_c.ac_seqn,
			hold_seqn=:mo_hold_c.hold_seqn,
			hold_typ=:mo_hold_c.hold_typ,
			plan_hold_amt=:mo_hold_c.plan_hold_amt,
			auto_unhold_ind=:mo_hold_c.auto_unhold_ind,
			hold_sts=:mo_hold_c.hold_sts,
			beg_hold_date=:mo_hold_c.beg_hold_date,
			plan_unhold_date=:mo_hold_c.plan_unhold_date,
			fct_unhold_date=:mo_hold_c.fct_unhold_date,
			hold_br_no=:mo_hold_c.hold_br_no,
			hold_tel=:mo_hold_c.hold_tel,
			hold_brf=:mo_hold_c.hold_brf,
			unhold_br_no=:mo_hold_c.unhold_br_no,
			unhold_tel=:mo_hold_c.unhold_tel,
			unhold_brf=:mo_hold_c.unhold_brf,
			wrk_date=:mo_hold_c.wrk_date,
			trace_no=:mo_hold_c.trace_no
	WHERE rowid=:mo_hold_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != 1403 ){
		sprintf(acErrMsg,"UPDATE mo_hold error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}


int Mo_hold_Del_Upd(struct mo_hold_c mo_hold_c , char * reply  ){

	EXEC SQL DELETE FROM mo_hold WHERE rowid=:mo_hold_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE mo_hold error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Mo_hold_Clo_Upd( ){
	EXEC SQL CLOSE upd_mo_hold;
	return 0;
}

/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Mo_hold_Ins( struct mo_hold_c mo_hold_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO mo_hold VALUES (:mo_hold_c.ac_id,
			:mo_hold_c.ac_seqn,
			:mo_hold_c.hold_seqn,
			:mo_hold_c.hold_typ,
			:mo_hold_c.plan_hold_amt,
			:mo_hold_c.auto_unhold_ind,
			:mo_hold_c.hold_sts,
			:mo_hold_c.beg_hold_date,
			:mo_hold_c.plan_unhold_date,
			:mo_hold_c.fct_unhold_date,
			:mo_hold_c.hold_br_no,
			:mo_hold_c.hold_tel,
			:mo_hold_c.hold_brf,
			:mo_hold_c.unhold_br_no,
			:mo_hold_c.unhold_tel,
			:mo_hold_c.unhold_brf,
			:mo_hold_c.wrk_date,
			:mo_hold_c.trace_no);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT mo_hold error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT mo_hold error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}

	return 0;
}
