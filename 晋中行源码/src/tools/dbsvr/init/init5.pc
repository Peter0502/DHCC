/******
  参数: 1 新数据库名
        2 起始日期
        3 终止日期
  生成节假日文件 com_parm_holiday
********/
#include <stdio.h>
#include <stdlib.h>
#include "public.h"
#include "svrpub_c.h"
EXEC SQL INCLUDE SQLCA;

#include "com_parm_holiday_c.h"
int db_connect()
{
    EXEC SQL BEGIN DECLARE SECTION;
        char    sql_username[16];
        char    sql_passwd[16];
    EXEC SQL END   DECLARE SECTION;

    memset(sql_passwd,   0 , sizeof(sql_passwd));
    memset(sql_username, 0 , sizeof(sql_username));

    strcpy(sql_username,getenv("DB_USER"));
    strcpy(sql_passwd,getenv("DB_PASSWD"));

    vtcp_log("%s,%d,USER[%s],PASSWD[%s]\n",__FILE__,__LINE__,sql_username,sql_passwd);

    EXEC SQL CONNECT :sql_username identified by :sql_passwd;
    if(sqlca.sqlcode)
    {
        vtcp_log("%s,%d,SQLCODE=[%d]\n",__FILE__,__LINE__,sqlca.sqlcode);
        return -1;
    }
    return (0);
}

int main(int argc, char *argv[])
{
    int sum=0;
    int num=0;
    int days=0,day1=0;
    int iRet=0;
    char pcResp[5];
    long date1=0,date2=0;
    struct com_parm_holiday_c com_parm_holiday;

    memset(pcResp,'\0',sizeof(pcResp));
    memset(&com_parm_holiday,'\0',sizeof(com_parm_holiday));
    if (argc != 3)
    {
        printf(" 参数错误!! %s + %s + date1 + date2 \n",argv[0],argv[1]);
        return 1;
    }

    date1 = atol(argv[1]);
    date2 = atol(argv[2]);
    db_connect();
    if(sqlca.sqlcode) 
    {
        printf("[%s][%d]database err [%d]\n",__FILE__,__LINE__,sqlca.sqlcode);
        return 1;
    }
    vtcp_log("[%s][%d]date1=[%ld] date2=[%ld]\n",__FILE__,__LINE__,date1,date2);
    sum = pub_base_CalTrueDays(date1,date2);
    EXEC SQL DELETE FROM com_parm_holiday;
    printf("[%s][%d]导入基础数据后处理步骤二>>>>\n",__FILE__,__LINE__);
    while(date2 >= date1)
    {
        num++;
        printf("[%s][%d]INIT2进行中,请稍候...[%2d%%]\r",__FILE__,__LINE__,num*100/sum);
        fflush(stdout);
        days = pub_base_CalTrueDays(19000101,date1);
        if (days < 0)
        {
            printf("[%s][%d]计算天数错误!! [%ld]\n",__FILE__,__LINE__,date1);
            goto ErrExit;
        }
        day1 = days%7 + 1;
        if (day1 == 6)
        {
            com_parm_holiday.beg_date = date1;
            if (pub_base_deadlineD(date1,1,&com_parm_holiday.end_date))
            {
                printf("[%s][%d]计算下一天日期错误!!\n",__FILE__,__LINE__);
                goto ErrExit;
            }
            strncpy(com_parm_holiday.date_code,"SXR",3);
            strncpy(com_parm_holiday.date_name,"双休日",6);
            com_parm_holiday.days = 2;      /**总天数**/
            com_parm_holiday.type[0] = '1'; /**0:未生效1:已生效**/
            vtcp_log("[%s][%] 准备插入数据\n",__FILE__,__LINE__);
            iRet=Com_parm_holiday_Ins(com_parm_holiday,pcResp);
            if (iRet)
            {
                printf("[%s][%d]插入数据错误[%d]\n",__FILE__,__LINE__,iRet);
                Com_parm_holiday_Debug(&com_parm_holiday);
                goto ErrExit;
            }
            if (pub_base_deadlineD(date1,2,&date1))
            {
                printf("[%s][%d]计算下两天日期错误!!\n",__FILE__,__LINE__);
                goto ErrExit;
            }
        }
        else 
        {
            if (pub_base_deadlineD(date1,1,&date1))
            {
                printf("[%s][%d]计算下一天日期错误!!\n",__FILE__,__LINE__);
                goto ErrExit;
            }
        }
    }
    EXEC SQL commit work;
    if (sqlca.sqlcode) 
    { 
        printf("[%s][%d]commit db err [%d]\n",__FILE__,__LINE__,sqlca.sqlcode);
        return 1;
    }

    printf("[%s][%d]INIT2进行中,请稍候...[完成]\n",__FILE__,__LINE__);

    return 0;
ErrExit:
    printf("[%s][%d]unnormal quit from init8.ec \n",__FILE__,__LINE__);

    EXEC SQL ROLLBACK WORK;
    if(sqlca.sqlcode)
    {
        printf("[%s][%d]database erro!! %d\n",__FILE__,__LINE__,sqlca.sqlcode);
        return 1;
    }

    return 1;
}
