#include "find_debug.h" 
#include<stdio.h> 
#include<varargs.h>
#define EXTERN
#include"public.h"


EXEC SQL INCLUDE SQLCA;
#include"trace_log_c.h"
#define CM_SQLCODE sqlca.sqlcode==1403?100:(sqlca.sqlcode==-1?-239:sqlca.sqlcode)
static char str[3000];
static char mystery[17];

int trace_log_con ( struct trace_log_c , char *);
int put_mystery( char *, char * );
char *zip_tail(char *s);
static void zip_struct(struct trace_log_c* ps){
	zip_tail(ps->rowid);
	zip_tail(ps->tx_br_no);
	zip_tail(ps->opn_br_no);
	zip_tail(ps->tx_code);
	zip_tail(ps->sub_tx_code);
	zip_tail(ps->cur_no);
	zip_tail(ps->prdt_no);
	zip_tail(ps->ac_no);
	zip_tail(ps->note_type);
	zip_tail(ps->note_no);
	zip_tail(ps->add_ind);
	zip_tail(ps->ct_ind);
	zip_tail(ps->brf);
	zip_tail(ps->tel);
	zip_tail(ps->chk);
	zip_tail(ps->aut);
	zip_tail(ps->hst_ind);
	zip_tail(ps->saving_notarize);
	zip_tail(ps->no_show);
	zip_tail(ps->sts);
}
/*****************************************************************************/
/****                              查询函数部分                           ****/
/*****************************************************************************/
int Trace_log_Sel_rol(reply,trace_log_c,fmtstr,va_alist)
char    *reply;
struct  trace_log_c *trace_log_c;
char    *fmtstr;
va_dcl
{
	int   ret;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	ret = Trace_log_Dec_Sel_rol( reply , "%s" , wherelist );
	if (ret){
		WRITEMSG
		return ret;
	}
	ret = Trace_log_Fet_Sel_rol( trace_log_c , reply );
	if (ret){
		WRITEMSG
		return ret;
	}

	Trace_log_Clo_Sel_rol();

	return 0;
}



char *key_strcat(char *,char *);
int Trace_log_Dec_Sel_rol ( reply , fmtstr , va_alist )
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm ," SELECT rowid,trace_log.* FROM trace_log WHERE  ");
	key_strcat(comm,wherelist);

	sqlca.sqlcode=0;
	EXEC SQL PREPARE trace_log_sel FROM :comm;
	if (sqlca.sqlcode){
		vtcp_log(comm);
		sprintf(acErrMsg,"prepare error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D101" );
		return CM_SQLCODE;
	}
	EXEC SQL DECLARE sel_trace_log CURSOR FOR trace_log_sel;

	EXEC SQL OPEN sel_trace_log;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"OPEN trace_log error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Trace_log_Fet_Sel_rol ( struct trace_log_c *trace_log_c , char * reply )
{

	int   ret;

	EXEC SQL FETCH sel_trace_log INTO :trace_log_c;
	if (sqlca.sqlcode&&sqlca.sqlcode!=1403){
		sprintf(acErrMsg,"Fetch trace_log error!!! %d",sqlca.sqlcode);
		WRITEMSG
		strcpy (reply,"D103");
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		/*sprintf(acErrMsg,"Fetch trace_log finished!!! %d",sqlca.sqlcode);
		WRITEMSG*/
		strcpy (reply,"D104");
		return CM_SQLCODE;
	}
	zip_struct(trace_log_c);

	return 0;
}

int Trace_log_Clo_Sel_rol (){
	EXEC SQL CLOSE sel_trace_log;
}

/*****************************************************************************/
/****                              修改函数部分                           ****/
/*****************************************************************************/
int Trace_log_Dec_Upd_rol( reply , fmtstr , va_alist)
char    *reply;
char    *fmtstr;
va_dcl
{
	EXEC    SQL BEGIN   DECLARE SECTION;
		char    comm[1000];
	EXEC    SQL END     DECLARE SECTION;
	char    wherelist[800];

	va_list ap;
	va_start(ap);
	vsprintf ( wherelist , fmtstr , ap );
	va_end(ap);

	sprintf ( comm , "SELECT rowid,trace_log.* FROM trace_log WHERE  ");
	key_strcat(comm,wherelist);
	strcat(comm," FOR UPDATE WAIT 5 ");
	sqlca.sqlcode=0;
	EXEC SQL PREPARE trace_log_upd FROM :comm;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"prepare trace_log error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D101" );
		return CM_SQLCODE;
	}

	EXEC SQL DECLARE upd_trace_log CURSOR FOR trace_log_upd;

	EXEC SQL OPEN upd_trace_log;
	if (sqlca.sqlcode){
		sprintf(acErrMsg,"open trace_log error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D102" );
		return CM_SQLCODE;
	}

	return 0;
}

int Trace_log_Fet_Upd_rol( struct trace_log_c *trace_log_c , char * reply ){
	int   ret;

	EXEC SQL FETCH upd_trace_log INTO :trace_log_c;
	if ( sqlca.sqlcode && sqlca.sqlcode!=1403 ){
		sprintf(acErrMsg,"FETCH upd trace_log error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D103" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == 1403 ){
		sprintf(acErrMsg,"FETCH trace_log finished %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D104" );
		return CM_SQLCODE;
	}
	zip_struct(trace_log_c);

	return 0;
}

int Trace_log_Upd_Upd_rol( struct trace_log_c trace_log_c , char * reply){
	int ret;

	EXEC SQL UPDATE trace_log SET trace_no=:trace_log_c.trace_no,
			trace_cnt=:trace_log_c.trace_cnt,
			tx_date=:trace_log_c.tx_date,
			tx_time=:trace_log_c.tx_time,
			tx_br_no=:trace_log_c.tx_br_no,
			opn_br_no=:trace_log_c.opn_br_no,
			tx_code=:trace_log_c.tx_code,
			sub_tx_code=:trace_log_c.sub_tx_code,
			svc_ind=:trace_log_c.svc_ind,
			cur_no=:trace_log_c.cur_no,
			prdt_no=:trace_log_c.prdt_no,
			ac_no=:trace_log_c.ac_no,
			ac_seqn=:trace_log_c.ac_seqn,
			ac_id=:trace_log_c.ac_id,
			note_type=:trace_log_c.note_type,
			note_no=:trace_log_c.note_no,
			add_ind=:trace_log_c.add_ind,
			amt=:trace_log_c.amt,
			ct_ind=:trace_log_c.ct_ind,
			brf=:trace_log_c.brf,
			tel=:trace_log_c.tel,
			chk=:trace_log_c.chk,
			aut=:trace_log_c.aut,
			hst_ind=:trace_log_c.hst_ind,
			saving_notarize=:trace_log_c.saving_notarize,
			no_show=:trace_log_c.no_show,
			sts=:trace_log_c.sts
	WHERE rowid=:trace_log_c.rowid;
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 ){
		sprintf(acErrMsg,"UPDATE trace_log error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 ){
		sprintf(acErrMsg,"UPDATE trace_log error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D106" );
		return CM_SQLCODE;
	}
	pub_reg_rec_file(" upd trace_log"); 

	return 0;
}


int Trace_log_Del_Upd_rol(struct trace_log_c trace_log_c , char * reply  ){

	EXEC SQL DELETE FROM trace_log WHERE rowid=:trace_log_c.rowid;
	if ( sqlca.sqlcode ){
		sprintf(acErrMsg,"DELETE trace_log error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D105" );
		return CM_SQLCODE;
	}

	return 0;
}

int Trace_log_Clo_Upd_rol( ){
	EXEC SQL CLOSE upd_trace_log;

	return 0;
}
/*****************************************************************************/
/****                              增加函数部分                           ****/
/*****************************************************************************/
int Trace_log_Ins( struct trace_log_c trace_log_c , char * reply ){
	int ret;

	EXEC SQL INSERT INTO trace_log VALUES (:trace_log_c.trace_no,
			:trace_log_c.trace_cnt,
			:trace_log_c.tx_date,
			:trace_log_c.tx_time,
			:trace_log_c.tx_br_no,
			:trace_log_c.opn_br_no,
			:trace_log_c.tx_code,
			:trace_log_c.sub_tx_code,
			:trace_log_c.svc_ind,
			:trace_log_c.cur_no,
			:trace_log_c.prdt_no,
			:trace_log_c.ac_no,
			:trace_log_c.ac_seqn,
			:trace_log_c.ac_id,
			:trace_log_c.note_type,
			:trace_log_c.note_no,
			:trace_log_c.add_ind,
			:trace_log_c.amt,
			:trace_log_c.ct_ind,
			:trace_log_c.brf,
			:trace_log_c.tel,
			:trace_log_c.chk,
			:trace_log_c.aut,
			:trace_log_c.hst_ind,
			:trace_log_c.saving_notarize,
			:trace_log_c.no_show,
			:trace_log_c.sts);
	if ( sqlca.sqlcode && sqlca.sqlcode != -1 )
	{
		sprintf(acErrMsg,"INSERT trace_log error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D107" );
		return CM_SQLCODE;
	}
	else if ( sqlca.sqlcode == -1 )
	{
		sprintf(acErrMsg,"INSERT trace_log error %d",sqlca.sqlcode);
		WRITEMSG
		strcpy ( reply , "D108" );
		return CM_SQLCODE;
	}
	pub_reg_rec_file(" ins trace_log"); 

	return 0;
}
